{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoginComponent = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst forms_1 = require(\"@angular/forms\");\n\nconst auth_service_1 = require(\"../../services/auth.service\");\n\nconst router_1 = require(\"@angular/router\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst cross_service_1 = require(\"../../services/cross.service\");\n\nconst places_dbservice_1 = require(\"../../services/places.dbservice\");\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\nconst i1 = (0, tslib_1.__importStar)(require(\"@angular/forms\"));\nconst i2 = (0, tslib_1.__importStar)(require(\"../../services/auth.service\"));\nconst i3 = (0, tslib_1.__importStar)(require(\"@angular/router\"));\nconst i4 = (0, tslib_1.__importStar)(require(\"../../services/cross.service\"));\nconst i5 = (0, tslib_1.__importStar)(require(\"../../services/places.dbservice\"));\nconst i6 = (0, tslib_1.__importStar)(require(\"@angular/common\"));\nconst i7 = (0, tslib_1.__importStar)(require(\"@mobiscroll/angular\"));\n\nfunction LoginComponent_mbsc_form_0_mbsc_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mbsc-button\", 9);\n    i0.ɵɵtext(1, \"Sign in\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.loginForm.invalid && ctx_r1.attemptedSubmit);\n  }\n}\n\nfunction LoginComponent_mbsc_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mbsc-form\", 1)(1, \"form\", 2);\n    i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_mbsc_form_0_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.logIn();\n    });\n    i0.ɵɵelementStart(2, \"div\", 3);\n    i0.ɵɵelement(3, \"mbsc-input\", 4)(4, \"mbsc-input\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 6);\n    i0.ɵɵelement(6, \"br\")(7, \"br\");\n    i0.ɵɵelementStart(8, \"a\");\n    i0.ɵɵtext(9, \"Forgot password?\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\", 7);\n    i0.ɵɵtemplate(11, LoginComponent_mbsc_form_0_mbsc_button_11_Template, 2, 1, \"mbsc-button\", 8);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"options\", ctx_r0.formSettings);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.loginForm);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"error\", ctx_r0.loginForm.controls.email.invalid && ctx_r0.loginForm.controls.email.dirty)(\"errorMessage\", ctx_r0.errorFor(\"email\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"error\", ctx_r0.loginForm.controls.password.invalid && ctx_r0.loginForm.controls.password.dirty)(\"errorMessage\", ctx_r0.errorFor(\"password\"));\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isLogin);\n  }\n}\n\nclass LoginComponent {\n  constructor(fb, authService, router, activeRoute, crossService, placesDBService) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.activeRoute = activeRoute;\n    this.crossService = crossService;\n    this.placesDBService = placesDBService;\n    this.showLogin = false;\n    this.return = '';\n    this.formSettings = {\n      theme: 'ios'\n    };\n    this.errorMessages = {\n      required: '{$1} required',\n      minlength: 'At least 6 characters required',\n      email: 'Invalid email address'\n    };\n    this.loginForm = fb.group({\n      email: ['', [forms_1.Validators.required, forms_1.Validators.email]],\n      password: ['', [forms_1.Validators.required, forms_1.Validators.minLength(6)]]\n    });\n  }\n\n  ngOnInit() {\n    console.log('loading login component');\n    this.userAuthSub = this.authService.user$.pipe((0, operators_1.take)(1), (0, operators_1.map)(user => user != null ? true : false)).subscribe(isUser => {\n      if (isUser) {\n        console.log('User logged in');\n        this.showLogin = false;\n      } else {\n        console.log('User Not logged in');\n        this.showLogin = true;\n      }\n    });\n    this.activeRoute.queryParams.subscribe(params => {\n      this.return = params['return'];\n    });\n  }\n\n  markFieldsDirty() {\n    for (var field in this.loginForm.controls) {\n      this.loginForm.controls[field].markAsDirty();\n    }\n  }\n\n  logIn(ev) {\n    if (this.loginForm.valid) {\n      this.authService.login(this.loginForm.value.email, this.loginForm.value.password).then(result => {\n        if (result) {\n          // this.crossService.retrieveServiceData();   //Special handling for mobiscroll tree data\n          // this.placesDBService.getPlacesFromDB();\n          if (this.return === undefined) {\n            this.router.navigate(['home']);\n          } else {\n            this.router.navigate([this.return]);\n          }\n        } else {\n          console.log('Was not able to login');\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      this.markFieldsDirty();\n    }\n  }\n\n  errorFor(fieldName) {\n    var field = this.loginForm.controls[fieldName];\n\n    for (var validator in field.errors) {\n      if (field.errors[validator]) {\n        var friendlyName = fieldName.charAt(0).toUpperCase() + fieldName.slice(1);\n        return this.errorMessages[validator].replace('{$1}', friendlyName);\n      }\n    }\n\n    return null;\n  }\n\n  ngOnDestroy() {\n    this.userAuthSub.unsubscribe();\n  }\n\n}\n\nexports.LoginComponent = LoginComponent;\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.CrossService), i0.ɵɵdirectiveInject(i5.PlacesDBService));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"md-login-form\", 3, \"options\", 4, \"ngIf\"], [1, \"md-login-form\", 3, \"options\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mbsc-form-group-inset\"], [\"formControlName\", \"email\", \"name\", \"Email\", \"placeholder\", \"Email\", 3, \"error\", \"errorMessage\"], [\"formControlName\", \"password\", \"name\", \"password\", \"type\", \"text\", \"placeholder\", \"Password\", \"password-toggle\", \"true\", \"icon\", \"none\", \"icon-align\", \"right\", 3, \"error\", \"errorMessage\"], [1, \"mbsc-form-group-inset\", \"mbsc-padding\", \"mbsc-align-center\"], [1, \"mbsc-form-group-inset\", \"mbsc-padding\"], [\"block\", \"\", \"type\", \"submit\", 3, \"disabled\", 4, \"ngIf\"], [\"block\", \"\", \"type\", \"submit\", 3, \"disabled\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LoginComponent_mbsc_form_0_Template, 12, 7, \"mbsc-form\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.showLogin);\n    }\n  },\n  directives: [i6.NgIf, i7.MbscForm, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i7.MbscInput, i1.NgControlStatus, i1.FormControlName, i7.MbscButton],\n  styles: [\".md-login-form[_ngcontent-%COMP%]   .md-logo[_ngcontent-%COMP%]{display:inline-block;width:100%;font-size:80px;text-align:center;height:46px;margin:20px 0 30px;color:#1c75bc}\"]\n});","map":null,"metadata":{},"sourceType":"script"}