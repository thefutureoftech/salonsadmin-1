{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserDBService = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst firestore_1 = require(\"@angular/fire/firestore\");\n\nconst database_1 = require(\"@angular/fire/database\");\n\nconst http_1 = require(\"@angular/common/http\");\n\nconst environment_1 = require(\"./../../environments/environment\");\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\nconst i1 = (0, tslib_1.__importStar)(require(\"@angular/fire/firestore\"));\nconst i2 = (0, tslib_1.__importStar)(require(\"@angular/fire/database\"));\nconst i3 = (0, tslib_1.__importStar)(require(\"@angular/common/http\"));\n\nclass UserDBService {\n  constructor(afs, db, http) {\n    this.afs = afs;\n    this.db = db;\n    this.http = http;\n  }\n\n  ngOnInit() {}\n\n  createUser(user, token) {\n    user.createdBy = 'Super Admin';\n    user.uid = 'dummy'; // mobiscroll.util.datetime.formatDate('yy-mm-dd HH:ii:ss', new Date());\n\n    user.createdAt = Date.now();\n    console.log(user);\n    const path = environment_1.environment.apiURL + 'createOwner';\n    console.log('Trying to Post');\n    console.log(path);\n    console.log(token);\n    return fetch(path, {\n      method: 'POST',\n      headers: new Headers({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }),\n      body: JSON.stringify({\n        email: user.email // password: user.password\n\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json().then(resData => {\n          console.log('response in dbCreateOwner is ' + resData.userId);\n          return resData;\n        });\n      } else {\n        return res.json().then(resData => {\n          console.log('response in dbCreateOwner is ' + resData.error);\n          return resData;\n        });\n      }\n    }).catch(err => {\n      console.log('error was ' + err);\n    });\n  }\n\n  updateProfile(user, userId) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      const collection = this.afs.collection('staff_users');\n      let querySnapshot = yield this.afs.collection('staff_users', ref => ref.where('email', '==', user.email)).get().take(1).toPromise();\n\n      if (querySnapshot && !querySnapshot.empty) {\n        return querySnapshot.docs[0].ref;\n      } else {\n        let data = {\n          email: user.email,\n          name: user.name,\n          arabicName: user.arabicName,\n          emailVerified: false,\n          phoneNumber: user.phoneNumber,\n          uid: userId,\n          createdBy: 'Super Admin',\n          isRTL: true,\n          createdAt: new Date() //mobiscroll.util.datetime.formatDate('yy-mm-dd HH:ii:ss', new Date())\n\n        };\n        return yield collection.add(data); // return this.afs.collection('users').doc(userId).set(data);\n      }\n    });\n  }\n\n  createOwnerStore(store, userId) {\n    const collection = this.afs.collection('stores');\n    let data = {\n      name: store.name,\n      arabicName: store.arabicName,\n      busTypeId: store.busTypeId,\n      ownerId: userId,\n      countryId: store.countryId\n    };\n    return collection.add(data);\n  }\n\n  getRoleId(role) {\n    const rolesCollection = this.afs.collection('roles', ref => ref.where('name', '==', role));\n    return rolesCollection.snapshotChanges().take(1).map(actions => {\n      return actions.map(action => {\n        let data = action.payload.doc.data();\n        let id = action.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }); // .subscribe(roles => {\n    //     const usersCollection: AngularFirestoreCollection<any> = this.afs.collection<any>('users', ref => ref.where('uid', '==', userId));\n    //     // this.afs.collection('users').doc(userId)\n    //     usersCollection.snapshotChanges().map(actions => {\n    //         return actions.map(action => {\n    //             let data = action.payload.doc.data();\n    //             let id = action.payload.doc.id;\n    //             return { id, ...data };\n    //         });\n    //     })\n    //         .subscribe(users => {\n    //             let id = users[0]['id'];\n    //             let ass: any[] = [];\n    //             ass.push({\n    //                 branchId: branchId,\n    //                 roleId: roles[0]['id']\n    //             });\n    //             this.afs.collection('users').doc(id).update({ assignments: ass });\n    //         });\n    // });\n  }\n\n  checkEmailExist(user, storeId) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let data = yield this.afs.collection('staff_users', ref => ref.where('email', '==', user.email)).valueChanges().take(1).toPromise();\n\n      if (data && data.length > 0) {\n        if (storeId) {\n          let data2 = yield this.afs.collection('branch_staff', ref => ref.where('user', '==', data[0].uid)).valueChanges().take(1).toPromise();\n\n          if (data2 && data2.length > 0) {\n            //No loop: we just check one branch as all branches of the staff have the same store (staff can not belong to more than one store)\n            let data3 = yield this.afs.collection('branches').doc(data2[0].branch).get().take(1).toPromise();\n\n            if (data3.exists) {\n              if (data3.data().storeId === storeId) {\n                user.uid = data[0].uid;\n                return false;\n              } else {\n                return true;\n              }\n            }\n          } else {\n            user.uid = data[0].uid;\n            return false;\n          }\n        } else {\n          return true;\n        }\n      } else {\n        return false;\n      }\n    });\n  }\n\n  checkIfAlreadyOwner(email) {\n    let storeData;\n    return this.afs.collection('staff_users', ref => ref.where('email', '==', email)).valueChanges().take(1).map(data => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      if (data && data.length > 0) {\n        let querySnapshot = yield this.afs.collection('stores', ref => ref.where('ownerId', '==', data[0].uid)).get().take(1).toPromise();\n\n        if (querySnapshot && !querySnapshot.empty) {\n          storeData = Object.assign({\n            id: querySnapshot.docs[0].id\n          }, querySnapshot.docs[0].data());\n          return {\n            result: true,\n            storeData: storeData\n          };\n        } else {\n          return {\n            result: false,\n            storeId: null\n          };\n        }\n      } else {\n        return {\n          result: false,\n          storeId: null\n        };\n      }\n    }));\n  }\n\n  checkPhoneNumberExist(phone) {\n    return this.afs.collection('staff_users', ref => ref.where('phoneNumber', '==', phone)).valueChanges().map(data => {\n      if (data.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n\n  getCurrentUser(email) {\n    return this.afs.collection('users', ref => ref.where('email', '==', email)).valueChanges().map(data => {\n      if (data.length > 0) {\n        return data[0];\n      } else {\n        return null;\n      }\n    });\n  }\n\n}\n\nexports.UserDBService = UserDBService;\n\nUserDBService.ɵfac = function UserDBService_Factory(t) {\n  return new (t || UserDBService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireDatabase), i0.ɵɵinject(i3.HttpClient));\n};\n\nUserDBService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserDBService,\n  factory: UserDBService.ɵfac\n});","map":null,"metadata":{},"sourceType":"script"}