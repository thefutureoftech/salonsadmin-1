{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CategoryDBService = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst firestore_1 = require(\"@angular/fire/firestore\");\n\nconst database_1 = require(\"@angular/fire/database\");\n\nconst firebase = (0, tslib_1.__importStar)(require(\"firebase\"));\n\nrequire(\"rxjs/add/operator/map\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\nconst i1 = (0, tslib_1.__importStar)(require(\"@angular/fire/firestore\"));\nconst i2 = (0, tslib_1.__importStar)(require(\"@angular/fire/database\"));\n\nclass CategoryDBService {\n  constructor(afs, db) {\n    this.afs = afs;\n    this.db = db;\n  }\n\n  ngOnInit() {}\n\n  getCategoriesFromDB(type, callback) {\n    this.afs.collection('categories', ref => ref.where('busType', '==', type)).snapshotChanges().pipe((0, rxjs_1.map)(actions => {\n      return actions.map(action => {\n        const data = action.payload.doc.data();\n        const id = action.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    })).pipe((0, rxjs_1.map)(data => {\n      return data;\n    })).subscribe(categories => {\n      this.categories = categories;\n      callback(categories);\n    });\n  }\n\n  getSubCategoriesFromDB(categoryId, callback) {\n    this.afs.collection('subcategories', ref => ref.where('parent', '==', categoryId)).snapshotChanges().pipe((0, rxjs_1.map)(actions => {\n      return actions.map(action => {\n        const data = action.payload.doc.data();\n        const id = action.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    })).pipe((0, rxjs_1.map)(data => {\n      return data;\n    })).subscribe(subCategories => {\n      this.subCategories = subCategories;\n      callback(subCategories);\n    });\n  }\n\n  getServicesFromDB(subCategoryId, callback) {\n    this.afs.collection('services', ref => ref.where('parent', '==', subCategoryId)).snapshotChanges().pipe((0, rxjs_1.map)(actions => {\n      return actions.map(action => {\n        const data = action.payload.doc.data();\n        const id = action.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    })).pipe((0, rxjs_1.map)(data => {\n      return data;\n    })).subscribe(services => {\n      this.services = services;\n      callback(services);\n    });\n  }\n\n  getCategories() {\n    if (this.categories) {\n      return this.categories.slice();\n    } else {\n      return null;\n    }\n  }\n\n  getSubCategories() {\n    if (this.subCategories) {\n      return this.subCategories.slice();\n    } else {\n      return null;\n    }\n  }\n\n  getServices() {\n    if (this.services) {\n      return this.services.slice();\n    } else {\n      return null;\n    }\n  }\n\n  getCategory(id) {\n    let category = this.categories.find(item => {\n      return item.id === id;\n    });\n    return Object.assign({}, category);\n  }\n\n  getSubCategory(id) {\n    let subCategory = this.subCategories.find(item => {\n      return item.id === id;\n    });\n    return Object.assign({}, subCategory);\n  }\n\n  getService(id) {\n    let service = this.services.find(item => {\n      return item.id === id;\n    });\n    return Object.assign({}, service);\n  }\n\n  saveCategory(id, category) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let categoryNew = {};\n      categoryNew.name = category.name;\n      categoryNew.arabicName = category.arabicName;\n      categoryNew.busType = category.busType;\n      this.afs.collection('categories').doc(id).update(categoryNew);\n\n      if (!category.imageURL.includes('https')) {\n        yield this.saveCategoryImage(id, category);\n      }\n    });\n  }\n\n  saveCategoryImage(id, category) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let myFile = category.imageURL.replace(/^data:image\\/[a-z]+;base64,/, '');\n      let filePath = 'categories/' + category.id + '/images/' + '/image/';\n      let storegaeRef = firebase.storage().ref().child(filePath); //need to produce unique name\n\n      let uploadTask = storegaeRef.putString(myFile, 'base64');\n      let subscrbeFun = uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, snapshot => {}, error => {}, () => {\n        uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n          // You get your url from here\n          console.log('File available at', downloadURL);\n          yield this.afs.collection('categories').doc(category.id).update({\n            imageURL: downloadURL\n          });\n        }));\n      });\n    });\n  }\n\n  saveSubCategory(id, subCategory) {\n    let subCategoryNew = {};\n    subCategoryNew.name = subCategory.name;\n    subCategoryNew.arabicName = subCategory.arabicName;\n    subCategoryNew.parent = subCategory.parent;\n    this.afs.collection('subcategories').doc(id).update(subCategoryNew);\n  }\n\n  saveService(id, service) {\n    let serviceNew = {};\n    serviceNew.name = service.name;\n    serviceNew.arabicName = service.arabicName;\n    serviceNew.parent = service.parent;\n    serviceNew.busType = service.busType;\n    this.afs.collection('services').doc(id).update(serviceNew);\n  }\n\n  deleteCategory(id) {\n    this.afs.collection('categories').doc(id).delete();\n  }\n\n  deleteSubCategory(id) {\n    this.afs.collection('subcategories').doc(id).delete();\n  }\n\n  deleteService(id) {\n    this.afs.collection('services').doc(id).delete();\n  }\n\n  createCategory(category) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      yield this.afs.collection('categories').doc(category.name).set(category);\n      yield this.saveCategoryImage(category.name, category);\n    });\n  }\n\n  createSubCategory(subCategory) {\n    this.afs.collection('subcategories').doc(subCategory.name).set(subCategory);\n  }\n\n  createService(service) {\n    this.afs.collection('services').add(service);\n  }\n\n  canDeleteCategory(id) {\n    return this.afs.collection('subcategories', ref => ref.where('parent', '==', id)).valueChanges().pipe((0, rxjs_1.map)(data => {\n      return data;\n    }));\n  }\n\n  canDeleteSubCategory(id) {\n    return this.afs.collection('services', ref => ref.where('parent', '==', id)).valueChanges().pipe((0, rxjs_1.map)(data => {\n      return data;\n    }));\n  }\n\n  canDeleteService(id) {\n    return true;\n  }\n\n  setSelectedCategory(id) {\n    if (!id) {\n      this.selectedCategory = null;\n      return;\n    }\n\n    this.selectedCategory = this.categories.find(item => {\n      return item.id === id;\n    });\n  }\n\n  setSelectedSubCategory(id) {\n    if (!id) {\n      this.selectedSubCategory = null;\n      return;\n    }\n\n    this.selectedSubCategory = this.subCategories.find(item => {\n      return item.id === id;\n    });\n  }\n\n  setSelectedService(id) {\n    if (!id) {\n      this.selectedService = null;\n      return;\n    }\n\n    this.selectedService = this.services.find(item => {\n      return item.id === id;\n    });\n  }\n\n  getSelectedCategory() {\n    return this.selectedCategory;\n  }\n\n  getSelectedSubCategory() {\n    return this.selectedSubCategory;\n  }\n\n  getSelectedService() {\n    return this.selectedService;\n  }\n\n}\n\nexports.CategoryDBService = CategoryDBService;\n\nCategoryDBService.ɵfac = function CategoryDBService_Factory(t) {\n  return new (t || CategoryDBService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireDatabase));\n};\n\nCategoryDBService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoryDBService,\n  factory: CategoryDBService.ɵfac\n});","map":null,"metadata":{},"sourceType":"script"}