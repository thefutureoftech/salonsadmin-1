{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubscriptionService = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst firebase = (0, tslib_1.__importStar)(require(\"firebase/app\"));\n\nconst _ = (0, tslib_1.__importStar)(require(\"lodash\"));\n\nconst environment_prod_1 = require(\"../../environments/environment.prod\");\n\nconst algoliasearch_1 = (0, tslib_1.__importDefault)(require(\"algoliasearch\"));\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\n\nclass SubscriptionService {\n  constructor() {\n    this.dbf = firebase.firestore();\n    const client = (0, algoliasearch_1.default)('4GLVRF37UR', '7037d91ad362bdb4975795e21898a054');\n    this.algoliaIndex = client.initIndex('BRANCHES');\n  }\n\n  getDashboardData() {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      this.dashboard = {};\n      this.dashboard.branchesNumber = 0;\n      this.dashboard.monthlyBranches = 0;\n      this.dashboard.yearlyBranches = 0;\n      this.dashboard.activeBranches = 0;\n      let querySnapshot = yield this.dbf.collection('branches').get().catch(error => {\n        return {\n          empty: true\n        };\n      });\n\n      if (!querySnapshot.empty) {\n        for (let doc of querySnapshot.docs) {\n          let branchData = doc.data();\n          branchData.id = doc.id;\n          this.dashboard.branchesNumber++;\n\n          if (branchData.active) {\n            this.dashboard.activeBranches++;\n          }\n\n          let querySnapshot2 = yield this.dbf.collection('branch_invoices').where('branchId', '==', doc.id).get().catch(error => {\n            return {\n              empty: true\n            };\n          });\n\n          if (!querySnapshot2.empty) {\n            let invoices = [];\n\n            for (let doc of querySnapshot2.docs) {\n              let invoiceData = doc.data();\n              invoiceData.id = doc.id;\n              invoices.push(invoiceData);\n            }\n\n            if (invoices && invoices.length > 1) {\n              invoices.sort(function compare(a, b) {\n                let dateA = new Date(a.paymentDate);\n                let dateB = new Date(b.paymentDate);\n                return dateB.getTime() - dateA.getTime();\n              });\n            }\n\n            if (invoices[0].package === 'card1') {\n              this.dashboard.monthlyBranches++;\n            } else {\n              this.dashboard.yearlyBranches++;\n            }\n          }\n        }\n\n        return this.dashboard;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  searchSignUpFormByEmailOrPhone(email) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      this.signupFormDetails = [];\n      let querySnapshot;\n      querySnapshot = yield this.dbf.collection('staff_users').where('email', '==', email).get().catch(error => {\n        return {\n          empty: true\n        };\n      });\n\n      if (!querySnapshot.empty) {\n        let querySnapshot2 = yield this.dbf.collection('stores').where('ownerId', '==', querySnapshot.docs[0].data().uid).get().catch(error => {\n          return {\n            empty: true\n          };\n        });\n\n        if (!querySnapshot2.empty) {\n          let querySnapshot3 = yield this.dbf.collection('branches').where('storeId', '==', querySnapshot2.docs[0].id).get().catch(error => {\n            return {\n              empty: true\n            };\n          });\n\n          if (!querySnapshot3.empty) {\n            for (let doc of querySnapshot3.docs) {\n              let signUpFormDetailsData = yield this.getBranchSignUpFormDetails(doc.id);\n\n              if (signUpFormDetailsData) {\n                signUpFormDetailsData.ownerName = querySnapshot.docs[0].data().name;\n                signUpFormDetailsData.ownerPhoneNumber = querySnapshot.docs[0].data().phoneNumber;\n                signUpFormDetailsData.active = doc.data().active;\n                signUpFormDetailsData.ownerEmail = querySnapshot.docs[0].data().email;\n                this.signupFormDetails.push(signUpFormDetailsData);\n              }\n            }\n          }\n        }\n      }\n\n      if (this.signupFormDetails.length > 0) {\n        return this.signupFormDetails;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  searchSignUpFormByBranchName(searchTerm) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      this.signupFormDetails = [];\n      let searchIds = [];\n      let hits = yield this.algoliaIndex.search(searchTerm);\n\n      for (let hit of hits.hits) {\n        searchIds.push(hit['objectID']);\n      }\n\n      if (searchIds.length > 0) {\n        for (let branchId of searchIds) {\n          let docSnapshot = yield this.dbf.collection('branches').doc(branchId).get();\n\n          if (docSnapshot.exists) {\n            let signUpFormDetailsData = yield this.getBranchSignUpFormDetails(docSnapshot.id);\n\n            if (signUpFormDetailsData) {\n              let docSnapshot2 = yield this.dbf.collection('stores').doc(docSnapshot.data().storeId).get();\n\n              if (docSnapshot2.exists) {\n                console.log('we have store data'); //Assuming owner has only ONE store\n\n                let querySnapshot;\n                querySnapshot = yield this.dbf.collection('staff_users').where('uid', '==', docSnapshot2.data().ownerId).get().catch(error => {\n                  return {\n                    empty: true\n                  };\n                });\n\n                if (!querySnapshot.empty) {\n                  console.log('we have staff users data');\n                  signUpFormDetailsData.ownerPhoneNumber = querySnapshot.docs[0].data().phoneNumber;\n                  signUpFormDetailsData.ownerName = querySnapshot.docs[0].data().name;\n                  signUpFormDetailsData.ownerEmail = querySnapshot.docs[0].data().email;\n                }\n              }\n\n              signUpFormDetailsData.active = docSnapshot.data().active;\n              this.signupFormDetails.push(signUpFormDetailsData);\n            }\n          }\n        }\n      }\n\n      if (this.signupFormDetails.length > 0) {\n        return this.signupFormDetails;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  getBranchSignUpFormDetails(branchId) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let signupFormDetails = {};\n      let docSnapshot = yield this.dbf.collection('branches').doc(branchId).get();\n\n      if (docSnapshot && docSnapshot.exists) {\n        let branchData = docSnapshot.data();\n        branchData.id = docSnapshot.id;\n        signupFormDetails.branchData = branchData;\n      }\n\n      let querySnapshot2 = yield this.dbf.collection('branch_invoices').where('branchId', '==', branchId).get().catch(error => {\n        return {\n          empty: true\n        };\n      });\n\n      if (!querySnapshot2.empty) {\n        let invoices = [];\n\n        for (let doc of querySnapshot2.docs) {\n          let invoiceData = doc.data();\n          invoiceData.id = doc.id;\n\n          if (invoiceData.paymentDate instanceof firebase.firestore.Timestamp) {\n            invoiceData.paymentDate = invoiceData.paymentDate.toDate();\n          }\n\n          invoices.push(invoiceData);\n        }\n\n        if (invoices && invoices.length > 1) {\n          invoices.sort(function compare(a, b) {\n            let dateA = new Date(a.paymentDate);\n            let dateB = new Date(b.paymentDate);\n            return dateB.getTime() - dateA.getTime();\n          });\n        }\n\n        signupFormDetails.invoice = invoices[0];\n\n        if (signupFormDetails.invoice.nextPaymentDate instanceof firebase.firestore.Timestamp) {\n          signupFormDetails.invoice.nextPaymentDate = signupFormDetails.invoice.nextPaymentDate.toDate();\n        }\n      }\n\n      if (signupFormDetails.branchData || signupFormDetails.invoice) {\n        return signupFormDetails;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  saveSignUpDetails(signupDetail) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let docSnapshot = yield this.dbf.collection('branches').doc(signupDetail.branchData.id).get();\n\n      if (docSnapshot && docSnapshot.exists) {\n        let oldActive = docSnapshot.data().active;\n        yield docSnapshot.ref.update(signupDetail.branchData);\n\n        if (!oldActive) {\n          if (signupDetail.branchData.active) {\n            yield this.sendBranchOwnerActivationEmail(signupDetail.ownerEmail, signupDetail.branchData.id);\n          }\n        }\n      }\n    });\n  }\n\n  getPlanPricingData() {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let planPricingData = {};\n      let querySnapshot = yield this.dbf.collection('plan_pricing').get().catch(error => {\n        return {\n          empty: true\n        };\n      });\n\n      if (!querySnapshot.empty) {\n        planPricingData = querySnapshot.docs[0].data();\n        planPricingData.id = querySnapshot.docs[0].id;\n\n        if (planPricingData.freePeriod.from_date instanceof firebase.firestore.Timestamp) {\n          planPricingData.freePeriod.from_date = planPricingData.freePeriod.from_date.toDate();\n        }\n\n        if (planPricingData.freePeriod.to_date instanceof firebase.firestore.Timestamp) {\n          planPricingData.freePeriod.to_date = planPricingData.freePeriod.to_date.toDate();\n        }\n\n        return planPricingData;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  savPlanPricingData(planPricing) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let planPricingData = {};\n      planPricingData = _.cloneDeep(planPricing);\n      delete planPricingData.id;\n      planPricingData.freePeriod.days = +planPricing.freePeriod.days;\n      planPricingData.freePeriod.period = +planPricing.freePeriod.period;\n      planPricingData.package1.days = +planPricingData.package1.days;\n      planPricingData.package1.period = +planPricingData.package1.period;\n      planPricingData.package1.price = +planPricingData.package1.price;\n      planPricingData.package1.affiliate_discount = +planPricingData.package1.affiliate_discount;\n      planPricingData.package2.days = +planPricingData.package2.days;\n      planPricingData.package2.period = +planPricingData.package2.period;\n      planPricingData.package2.price = +planPricingData.package2.price;\n      planPricingData.package2.affiliate_discount = +planPricingData.package2.affiliate_discount;\n      console.log(planPricingData);\n      let querySnapshot = yield this.dbf.collection('plan_pricing').get().catch(error => {\n        return {\n          empty: true\n        };\n      });\n\n      if (!querySnapshot.empty) {\n        yield querySnapshot.docs[0].ref.update(planPricingData);\n      }\n    });\n  }\n\n  renewBranchSubscription(branchId, selectedPackage, token) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let res;\n\n      try {\n        let url = environment_prod_1.environment.apiURL + 'renewBranchSubscription';\n        res = yield fetch(url, {\n          method: 'POST',\n          headers: new Headers({\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + token\n          }),\n          body: JSON.stringify({\n            branchId: branchId,\n            subsciption_package: selectedPackage\n          })\n        });\n        let result = yield res.json();\n      } catch (error) {}\n    });\n  }\n\n  sendBranchOwnerActivationEmail(ownerEmail, branchId) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let res;\n\n      try {\n        let url = environment_prod_1.environment.apiURL + 'sendBranchOwnerActivationEmail';\n        res = yield fetch(url, {\n          method: 'POST',\n          headers: new Headers({\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify({\n            ownerEmail: ownerEmail,\n            branchId: branchId\n          })\n        });\n        let result = yield res.json();\n      } catch (error) {}\n    });\n  }\n\n  testPushNotification() {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let res;\n\n      try {\n        let url = environment_prod_1.environment.apiURL + 'sendTestPushNotification';\n        res = yield fetch(url, {\n          method: 'POST',\n          headers: new Headers({\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify({\n            userId: 'vo54WeAJR0W3gN3zgGKfoPjTXox1'\n          })\n        });\n        let result = yield res.json();\n      } catch (error) {}\n    });\n  }\n\n}\n\nexports.SubscriptionService = SubscriptionService;\n\nSubscriptionService.ɵfac = function SubscriptionService_Factory(t) {\n  return new (t || SubscriptionService)();\n};\n\nSubscriptionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SubscriptionService,\n  factory: SubscriptionService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"script"}