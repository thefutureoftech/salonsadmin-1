{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AffiliateService = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst firebase = (0, tslib_1.__importStar)(require(\"firebase/app\"));\n\nconst _ = (0, tslib_1.__importStar)(require(\"lodash\"));\n\nconst environment_prod_1 = require(\"../../environments/environment.prod\");\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\n\nclass AffiliateService {\n  constructor() {\n    this.dbf = firebase.firestore();\n  }\n\n  getAffiliatesData(listType, affiliatedId) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let affiliatedUsers = [];\n      let querySnapshot;\n      let docSnapshot;\n\n      if (affiliatedId) {\n        docSnapshot = yield this.dbf.collection('users_affiliated').doc(affiliatedId).get();\n      } else {\n        querySnapshot = yield this.dbf.collection('users_affiliated').get().catch(error => {\n          return {\n            empty: true\n          };\n        });\n      }\n\n      if (querySnapshot && !querySnapshot.empty) {\n        for (let doc of querySnapshot.docs) {\n          let affiliateData;\n          affiliateData = yield this.getAffiliate(listType, doc);\n\n          if (affiliateData) {\n            affiliatedUsers.push(affiliateData);\n          }\n        }\n\n        return affiliatedUsers;\n      } else if (docSnapshot && docSnapshot.id) {\n        let affiliateData;\n        affiliateData = yield this.getAffiliate(listType, docSnapshot);\n\n        if (affiliateData) {\n          affiliatedUsers.push(affiliateData);\n        }\n\n        return affiliatedUsers;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  getAffiliate(listType, doc) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      console.log(doc.data());\n      let affiliateData = doc.data();\n\n      if (listType === 'requests' && !doc.data().isRequesting) {\n        return null;\n      }\n\n      if (affiliateData.lastPaymentDate instanceof firebase.firestore.Timestamp) {\n        affiliateData.lastPaymentDate = affiliateData.lastPaymentDate.toDate();\n      }\n\n      let querySnapshot2 = yield this.dbf.collection('users').where('uid', '==', affiliateData.userId).get().catch(error => {\n        return {\n          empty: true\n        };\n      });\n\n      if (!querySnapshot2.empty) {\n        affiliateData.phoneNumber = querySnapshot2.docs[0].data().phoneNumber;\n      }\n\n      let obj = Object.assign({\n        id: doc.id\n      }, affiliateData);\n      return obj;\n    });\n  }\n\n  getUserByPhoneNumber(phoneNumber) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let user = {};\n      let querySnapshot = yield this.dbf.collection('users').where('phoneNumber', '==', phoneNumber).get().catch(error => {\n        return {\n          empty: true\n        };\n      });\n\n      if (!querySnapshot.empty) {\n        user = querySnapshot.docs[0].data();\n        user.id = querySnapshot.docs[0].id;\n        let querySnapshot2 = yield this.dbf.collection('users_affiliated').where('userId', '==', user.uid).get().catch(error => {\n          return {\n            empty: true\n          };\n        });\n\n        if (!querySnapshot2.empty && querySnapshot2.docs[0].data().active) {\n          user.affiliate = true;\n        }\n\n        return user;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  toggleAffiliate(userId, toggleValue) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let querySnapshot = yield this.dbf.collection('users_affiliated').where('userId', '==', userId).get().catch(error => {\n        return {\n          empty: true\n        };\n      });\n\n      if (!querySnapshot.empty) {\n        yield querySnapshot.docs[0].ref.update({\n          active: toggleValue\n        });\n      } else {\n        let querySnapshot2 = yield this.dbf.collection('users').where('uid', '==', userId).get().catch(error => {\n          return {\n            empty: true\n          };\n        });\n\n        if (!querySnapshot2.empty) {\n          console.log('Making affiliate for user id ' + querySnapshot2.docs[0].data().uid);\n          let userData = querySnapshot2.docs[0].data();\n          let affiliateData = {\n            userId: userId,\n            userName: userData.name,\n            userArabicName: userData.arabicName,\n            lastUpdated: new Date(),\n            readyToPayAmount: 0,\n            totalPaidAmount: 0,\n            currency: 'OMR',\n            active: toggleValue\n          };\n          let docRef = yield this.dbf.collection('users_affiliated').add(affiliateData);\n        }\n      }\n    });\n  }\n\n  saveAffiliate(affiliate, listType) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let affiliateData = _.cloneDeep(affiliate);\n\n      delete affiliate.phoneNumber;\n      delete affiliateData.earning;\n      let docSnapshot = yield this.dbf.collection('users_affiliated').doc(affiliateData.id).get();\n\n      if (docSnapshot && docSnapshot.exists) {\n        let oldActive = docSnapshot.data().active;\n        yield docSnapshot.ref.update(affiliateData);\n\n        if (!oldActive) {\n          if (affiliateData.active) {\n            this.sendAffiliateNotification(affiliateData.id, listType);\n          }\n        }\n      }\n    });\n  }\n\n  transferMoneyToAffiliate(affiliate, listType) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let affiliateData = _.cloneDeep(affiliate);\n\n      delete affiliate.phoneNumber;\n      delete affiliateData.earning;\n      affiliateData.totalPaidAmount = affiliate.totalPaidAmount + affiliateData.readyToPayAmount;\n      let transferAmount = affiliateData.readyToPayAmount;\n      affiliateData.readyToPayAmount = 0;\n      affiliateData.isRequesting = false;\n      let docSnapshot = yield this.dbf.collection('users_affiliated').doc(affiliateData.id).get();\n\n      if (docSnapshot && docSnapshot.exists) {\n        yield docSnapshot.ref.update(affiliateData);\n        this.sendAffiliateNotification(affiliateData.id, listType, transferAmount);\n      }\n    });\n  }\n\n  sendAffiliateNotification(affiliateId, listType, transferAmount) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let res;\n\n      try {\n        let url = environment_prod_1.environment.apiURL + 'sendAffiliateNewTransferTransferNotification';\n\n        if (listType === 'requests') {\n          res = yield fetch(url, {\n            method: 'POST',\n            headers: new Headers({\n              'Content-Type': 'application/json',\n              'Cache-Control': 'no-cache',\n              'Access-Control-Allow-Origin': '*'\n            }),\n            body: JSON.stringify({\n              affiliateId: affiliateId,\n              affiliateType: listType,\n              transferAmount: transferAmount\n            })\n          });\n        } else if (listType === 'members') {\n          res = yield fetch(url, {\n            method: 'POST',\n            headers: new Headers({\n              'Content-Type': 'application/json',\n              'Cache-Control': 'no-cache',\n              'Access-Control-Allow-Origin': '*'\n            }),\n            body: JSON.stringify({\n              affiliateId: affiliateId,\n              affiliateType: listType\n            })\n          });\n        }\n\n        let result = yield res.json();\n      } catch (error) {}\n    });\n  }\n\n  getAffiliatedDashboard() {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let dashboard = {};\n      dashboard.totalCommission = 0;\n      dashboard.totalRedaToPay = 0;\n      dashboard.tottalPaid = 0;\n      dashboard.topAffiliates = [];\n      let querySnapshot = yield this.dbf.collection('users_affiliated').get().catch(error => {\n        return {\n          empty: true\n        };\n      });\n\n      if (!querySnapshot.empty) {\n        for (let doc of querySnapshot.docs) {\n          let user;\n          user = doc.data();\n          user.id = doc.id;\n\n          if (user.readyToPayAmount === 0 && user.totalPaidAmount === 0) {\n            continue;\n          }\n\n          let querySnapshot2 = yield this.dbf.collection('users').where('uid', '==', user.userId).get().catch(error => {\n            return {\n              empty: true\n            };\n          });\n\n          if (!querySnapshot2.empty) {\n            user.phoneNumber = querySnapshot2.docs[0].data().phoneNumber;\n          }\n\n          dashboard.totalRedaToPay = dashboard.totalRedaToPay + user.readyToPayAmount;\n          dashboard.tottalPaid = dashboard.tottalPaid + user.totalPaidAmount;\n          dashboard.totalCommission = dashboard.totalCommission + user.readyToPayAmount + user.totalPaidAmount;\n          user.earning = user.readyToPayAmount + user.totalPaidAmount;\n          dashboard.topAffiliates.push(user);\n        }\n\n        dashboard.topAffiliates.sort(function compare(a, b) {\n          return b.earning - a.earning;\n        });\n        return dashboard;\n      } else {\n        return null;\n      }\n    });\n  }\n\n}\n\nexports.AffiliateService = AffiliateService;\n\nAffiliateService.ɵfac = function AffiliateService_Factory(t) {\n  return new (t || AffiliateService)();\n};\n\nAffiliateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AffiliateService,\n  factory: AffiliateService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"script"}