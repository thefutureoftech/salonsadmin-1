{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CityAdminComponent = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst core_1 = require(\"@angular/core\");\n\nconst places_dbservice_1 = require(\"../../services/places.dbservice\");\n\nconst router_1 = require(\"@angular/router\");\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\nconst i1 = (0, tslib_1.__importStar)(require(\"../../services/places.dbservice\"));\nconst i2 = (0, tslib_1.__importStar)(require(\"@angular/router\"));\nconst i3 = (0, tslib_1.__importStar)(require(\"@angular/common\"));\nconst i4 = (0, tslib_1.__importStar)(require(\"@mobiscroll/angular\"));\nconst i5 = (0, tslib_1.__importStar)(require(\"@angular/forms\"));\n\nfunction CityAdminComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"mbsc-button\", 3);\n    i0.ɵɵlistener(\"click\", function CityAdminComponent_div_0_Template_mbsc_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.createNewCity();\n    });\n    i0.ɵɵtext(2, \"Create New City\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"br\");\n    i0.ɵɵelementStart(4, \"mbsc-input\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function CityAdminComponent_div_0_Template_mbsc_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.selected = $event;\n    })(\"onSet\", function CityAdminComponent_div_0_Template_mbsc_input_onSet_4_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.citySelected($event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"mbsc-data\", ctx_r0.cities)(\"mbsc-options\", ctx_r0.selectOptions)(\"ngModel\", ctx_r0.selected);\n  }\n}\n\nfunction CityAdminComponent_router_outlet_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"router-outlet\");\n  }\n}\n\nfunction CityAdminComponent_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Please make a selection for state first!!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nclass CityAdminComponent {\n  constructor(placesDBService, router, activeRoute, ref) {\n    this.placesDBService = placesDBService;\n    this.router = router;\n    this.activeRoute = activeRoute;\n    this.ref = ref;\n    this.cities = [];\n    this.selectOptions = {\n      theme: 'ios',\n      headerText: 'Select'\n    };\n  }\n\n  ngOnInit() {\n    if (this.placesDBService.getSelectedState()) {\n      this.stateSelected = true;\n    } else {\n      this.stateSelected = false;\n      this.placesDBService.setSelectedCity(null);\n      return;\n    }\n\n    this.placesDBService.getCitiesFromDB(this.setCities.bind(this), this.placesDBService.getSelectedState().id);\n\n    if (this.placesDBService.getSelectedCity()) {\n      let id = this.placesDBService.getSelectedCity().id;\n      this.router.navigate(['edit'], {\n        relativeTo: this.activeRoute,\n        queryParams: {\n          id: id,\n          type: 'City'\n        }\n      });\n    }\n  }\n\n  setCities(cities) {\n    this.citiesList = [];\n    this.citiesList = cities;\n    this.cities = [];\n    this.cities.push({\n      text: '',\n      value: '0'\n    });\n    this.citiesList.forEach(city => {\n      this.cities.push({\n        text: city.name,\n        value: city.id\n      });\n    });\n\n    if (this.placesDBService.getSelectedCity()) {\n      let selected = this.citiesList.find(item => {\n        return this.placesDBService.getSelectedCity().id === item.id;\n      });\n\n      if (selected) {\n        this.displaySelected = true;\n        this.selected = selected.id;\n      } else {\n        this.displaySelected = false;\n        this.placesDBService.setSelectedCity(null);\n      }\n    }\n\n    ; // if(!this.displaySelected){\n    //   this.placesDBService.setSelectedCity(null);\n    // }\n  }\n\n  citySelected(event) {\n    let selected = this.citiesList.find(item => {\n      return item.name === event.valueText;\n    });\n\n    if (!selected) {\n      this.router.navigate(['../cities'], {\n        relativeTo: this.activeRoute\n      });\n      this.placesDBService.setSelectedCity(null);\n      this.displaySelected = false;\n    } else {\n      this.placesDBService.setSelectedCity(selected.id);\n      this.router.navigate(['edit'], {\n        relativeTo: this.activeRoute,\n        queryParams: {\n          id: selected.id,\n          type: 'City'\n        }\n      });\n      this.displaySelected = true;\n    }\n  }\n\n  createNewCity() {\n    this.router.navigate(['new'], {\n      relativeTo: this.activeRoute,\n      queryParams: {\n        type: 'City'\n      }\n    });\n    this.displaySelected = true;\n  }\n\n}\n\nexports.CityAdminComponent = CityAdminComponent;\n\nCityAdminComponent.ɵfac = function CityAdminComponent_Factory(t) {\n  return new (t || CityAdminComponent)(i0.ɵɵdirectiveInject(i1.PlacesDBService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nCityAdminComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CityAdminComponent,\n  selectors: [[\"app-city-admin\"]],\n  decls: 3,\n  vars: 3,\n  consts: [[\"class\", \"mbsc-btn-group-block\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mbsc-btn-group-block\"], [3, \"click\"], [\"type\", \"text\", \"name\", \"city\", \"mbsc-select\", \"\", \"placeholder\", \"Select A City\", 3, \"mbsc-data\", \"mbsc-options\", \"ngModel\", \"ngModelChange\", \"onSet\"]],\n  template: function CityAdminComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CityAdminComponent_div_0_Template, 5, 3, \"div\", 0);\n      i0.ɵɵtemplate(1, CityAdminComponent_router_outlet_1_Template, 1, 0, \"router-outlet\", 1);\n      i0.ɵɵtemplate(2, CityAdminComponent_p_2_Template, 2, 0, \"p\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.stateSelected);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.displaySelected);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.stateSelected);\n    }\n  },\n  directives: [i3.NgIf, i4.MbscButton, i4.MbscInput, i4.MbscSelect, i5.NgControlStatus, i5.NgModel, i2.RouterOutlet],\n  styles: [\"\"]\n});","map":null,"metadata":{},"sourceType":"script"}