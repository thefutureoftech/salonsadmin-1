{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StoreDBService = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst firestore_1 = require(\"@angular/fire/firestore\");\n\nconst firebase = (0, tslib_1.__importStar)(require(\"firebase\"));\n\nconst database_1 = require(\"@angular/fire/database\");\n\nconst translate_service_1 = require(\"../translate/translate.service\");\n\nconst user_dbservice_1 = require(\"./user.dbservice\");\n\nconst store_service_1 = require(\"./store.service\");\n\nrequire(\"rxjs/add/operator/map\");\n\nrequire(\"rxjs/add/operator/take\");\n\nconst geofirestore_1 = require(\"geofirestore\");\n\nconst geokit_1 = require(\"geokit\");\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\nconst i1 = (0, tslib_1.__importStar)(require(\"@angular/fire/firestore\"));\nconst i2 = (0, tslib_1.__importStar)(require(\"@angular/fire/database\"));\nconst i3 = (0, tslib_1.__importStar)(require(\"../translate/translate.service\"));\nconst i4 = (0, tslib_1.__importStar)(require(\"./user.dbservice\"));\nconst i5 = (0, tslib_1.__importStar)(require(\"./store.service\"));\n\nclass StoreDBService {\n  constructor(afs, db, translateService, userDBService, storeService) {\n    // this.dbRef = this.db.list('/locations');\n    // this.geoFire = new GeoFire(this.dbRef.query.ref);\n    this.afs = afs;\n    this.db = db;\n    this.translateService = translateService;\n    this.userDBService = userDBService;\n    this.storeService = storeService;\n    this.geofirestore = new geofirestore_1.GeoFirestore(firebase.firestore());\n  }\n\n  getbusinessTypes(busName) {\n    console.log('Passed business type is ' + busName);\n\n    if (this.translateService.currentLang == 'en') {\n      console.log('English query with business name ' + busName);\n      this.bussinessType = this.afs.collection('bussinessTYpes', ref => ref.where('name', '==', busName));\n      console.log('collection for business types is ' + this.bussinessType);\n    } else {\n      this.bussinessType = this.afs.collection('bussinessTypes', ref => ref.where('arabicName', '==', busName));\n    } // this.bussinessType.doc('salons').ref.get().then(doc=>{\n    //     console.log('document data for busines types '+doc.data().id);\n    // });\n\n\n    return this.bussinessType.snapshotChanges().map(actions => {\n      return actions.map(action => {\n        const data = action.payload.doc.data();\n        const id = action.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    });\n  }\n\n  createStoreBranch(storeId, branch, staff, services, callBack, token) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      let employees = [];\n      let i = 0;\n      console.log('this.storeService.getBranch().storeLogoURL is ' + this.storeService.getBranch().storeLogoURL);\n      let branchCollection = this.afs.collection('branches');\n      let data = {\n        name: branch.name,\n        arabicName: branch.arabicName,\n        storeId: storeId,\n        storeLogoURL: this.storeService.getBranch().storeLogoURL,\n        address: branch.address,\n        schedule: branch.schedule,\n        location: branch.location,\n        setting: {\n          booking: {\n            booking_hours_advance: 0,\n            cancel_upto_hours_advance: 0,\n            allow_staff_selection: true,\n            allow_booking_overlap: false,\n            online_policy: ''\n          },\n          calendar: {\n            time_slot_interval: '15',\n            week_start_day: 0\n          },\n          general: {\n            rtlSet: false\n          }\n        } // services: services\n\n      };\n      branchCollection.add(data).then(docRef => {\n        docRef.get().then(docSnapshot2 => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n          const geoCollectionRef = this.geofirestore.collection('branch_location');\n          const hash = geokit_1.Geokit.hash({\n            lat: data.location['latitude'],\n            lng: data.location['longitude']\n          });\n          const document = {\n            branch_id: docSnapshot2.id,\n            coordinates: new firebase.firestore.GeoPoint(+data.location['latitude'], +data.location['longitude'])\n          };\n          yield geoCollectionRef.add(document).then(() => {\n            console.log('location document has been set in Firestore');\n          }, error => {\n            console.log('Error: ' + error);\n          });\n          let branch = this.storeService.getBranch();\n          branch.id = docSnapshot2.id;\n          this.storeService.setBranch(branch); // this.saveServices(services, branch.id);        //save into service_branch collection\n          //**** Decide if you want to include the owner as a staff here so owner should be added\n          //to the staff array as well e.x. staff.push(userDBService.getOwner());\n          //but check if user.owner is true then skip to updateBranchAssignment\n\n          if (staff && staff.length > 0) {\n            staff.forEach(user => {\n              if (user.uid != '') {\n                this.userDBService.getRoleId('staff').subscribe(roles => {\n                  let branchStaff = {\n                    branch: branch.id,\n                    workName: user.name,\n                    workArabicName: user.arabicName,\n                    workEmail: user.email,\n                    createdAt: new Date(),\n                    ratings: [],\n                    user: user.uid,\n                    roles: [roles[0]['id']]\n                  };\n                  this.afs.collection('branch_staff').add(branchStaff).then(() => {\n                    i++;\n\n                    if (i == staff.length) {\n                      let bookingIdCollection = this.afs.collection('branch_booking_id');\n                      bookingIdCollection.add({\n                        branch: branch.id,\n                        booking_id: 0\n                      });\n                      callBack();\n                    }\n                  });\n                });\n              } else {\n                this.userDBService.createUser(user, token).then(response => {\n                  if (response['error'] && response['error'] !== 'The email address is already in use by another account.') {//return;\n                  }\n\n                  this.userDBService.updateProfile(user, response.userId).then(docRef => {\n                    docRef.get().then(docSnapshot => {\n                      user.uid = docSnapshot.data().uid; // this.userDBService.updateBranchAssignments(docSnapshot.data().uid, docSnapshot2.id);\n\n                      this.userDBService.getRoleId('staff').subscribe(roles => {\n                        employees.push({\n                          userId: docSnapshot.data().uid,\n                          roleId: roles[0]['id']\n                        });\n                        let branchStaffPath = `branche_staff/${branch.id}_${user.uid}`;\n                        let branchStaff = {\n                          branch: branch.id,\n                          workName: user.name,\n                          workArabicName: user.arabicName,\n                          workEmail: user.email,\n                          createdAt: new Date(),\n                          user: user.uid,\n                          roles: [roles[0]['id']]\n                        };\n                        this.afs.collection('branch_staff').add(branchStaff).then(() => {\n                          i++;\n\n                          if (i == staff.length) {\n                            let bookingIdCollection = this.afs.collection('branch_booking_id');\n                            bookingIdCollection.add({\n                              branch: branch.id,\n                              booking_id: 0\n                            });\n                            callBack();\n                          }\n                        });\n                      });\n                    });\n                  });\n                });\n              }\n            });\n          } else {\n            let bookingIdCollection = this.afs.collection('branch_booking_id');\n            bookingIdCollection.add({\n              branch: branch.id,\n              booking_id: 0\n            });\n            callBack();\n          }\n        }));\n      });\n    });\n  }\n\n  updateUserBranchRole(role, userEmail, branchId, callback) {\n    console.log(userEmail);\n    const usersCollection = this.afs.collection('staff_users', ref => ref.where('email', '==', userEmail));\n    usersCollection.get().toPromise().then(users => {\n      let userId = users.docs[0].data().uid;\n      let user = users.docs[0].data();\n      console.log(user);\n      this.userDBService.getRoleId('staff').subscribe(roles => {\n        let roleId = roles[0]['id'];\n        let branchStaff = {\n          branch: branchId,\n          workName: user.name,\n          workArabicName: user.arabicName,\n          workEmail: user.email,\n          createdAt: new Date(),\n          user: userId,\n          roles: [roles[0]['id']]\n        };\n        console.log(branchStaff);\n        this.afs.collection('branch_staff').add(branchStaff).then(() => {\n          callback();\n        }); // });\n      });\n    });\n  }\n\n  fillServices(services, callback) {\n    let i = 0;\n    this.afs.collection('categories').snapshotChanges().map(actions => {\n      return actions.map(action => {\n        let data = action.payload.doc.data();\n        let id = action.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }).subscribe(categories => {\n      categories.forEach(category => {\n        let parent_category = {\n          label: '',\n          children: []\n        };\n        parent_category.label = category['name'];\n        this.afs.collection('subcategories', ref => ref.where('parent', '==', category['id'])).snapshotChanges().map(actions => {\n          return actions.map(action => {\n            let data = action.payload.doc.data();\n            let id = action.payload.doc.id;\n            return Object.assign({\n              id\n            }, data);\n          });\n        }).subscribe(subcategories => {\n          subcategories.forEach(subcategory => {\n            let sub_category = {\n              label: '',\n              children: []\n            };\n            sub_category.label = subcategory['name'];\n            this.afs.collection('services', ref => ref.where('parent', '==', subcategory['id'])).snapshotChanges().map(actions => {\n              return actions.map(action => {\n                let data = action.payload.doc.data();\n                let id = action.payload.doc.id;\n                return Object.assign({\n                  id\n                }, data);\n              });\n            }).subscribe(services => {\n              services.forEach(service => {\n                sub_category.children.push(service);\n              });\n            });\n            parent_category.children.push(sub_category);\n          });\n        });\n        i++;\n        services.push(parent_category);\n\n        if (i == categories.length) {\n          callback(services.slice());\n        }\n      });\n    });\n  }\n\n  saveServices(services, branchId) {\n    services.forEach(category => {\n      category.children.forEach(subcategory => {\n        subcategory.children.forEach(service => {\n          let serviceId = service.id;\n          let newDocument = {\n            branchId: branchId,\n            serviceId: serviceId\n          };\n          let docPath = `branch_service/${branchId}_${serviceId}`;\n          this.afs.doc(docPath).set(newDocument);\n        });\n      });\n    });\n  }\n\n  saveLogo(file, storeId, callback) {\n    let myFile = file.replace(/^data:image\\/[a-z]+;base64,/, '');\n    let filePath = 'stores/' + storeId + '/images/logo';\n    this.storegaeRef = firebase.storage().ref().child(filePath); //need to produce unique name\n\n    let uploadTask = this.storegaeRef.putString(myFile, 'base64');\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, snapshot => {}, error => {}, () => {\n      uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => {\n        // You get your url from here\n        console.log('File available at', downloadURL);\n        this.afs.collection('stores').doc(storeId).update({\n          logoURL: downloadURL\n        }).then(() => {\n          console.log('File available at', downloadURL);\n          let branch = this.storeService.getBranch();\n          branch.storeLogoURL = downloadURL;\n          this.storeService.setBranch(branch);\n          console.log('this.storeService.getBranch().storeLogoURL is ' + this.storeService.getBranch().storeLogoURL);\n          callback();\n        });\n      }); // let fileURL = uploadTask.snapshot.downloadURL;\n    });\n  }\n\n  getUserLocation(callback) {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.latitude = position.coords.latitude;\n        this.longitude = position.coords.longitude;\n        callback(this.latitude, this.longitude);\n      });\n    }\n  }\n\n  saveLocation(branchId) {\n    let coords = [+this.latitude, +this.longitude];\n    let key = 'branch_' + branchId;\n    this.geoFire.set(key, coords).then(_ => console.log('location updated')).catch(err => console.log(err));\n  }\n\n}\n\nexports.StoreDBService = StoreDBService;\n\nStoreDBService.ɵfac = function StoreDBService_Factory(t) {\n  return new (t || StoreDBService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireDatabase), i0.ɵɵinject(i3.TranslateService), i0.ɵɵinject(i4.UserDBService), i0.ɵɵinject(i5.StoreService));\n};\n\nStoreDBService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StoreDBService,\n  factory: StoreDBService.ɵfac\n});","map":null,"metadata":{},"sourceType":"script"}