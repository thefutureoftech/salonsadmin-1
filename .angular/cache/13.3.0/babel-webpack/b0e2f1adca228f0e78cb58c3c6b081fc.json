{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AdminGuard = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst router_1 = require(\"@angular/router\");\n\nconst auth_service_1 = require(\"../services/auth.service\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst cross_service_1 = require(\"../services/cross.service\");\n\nconst places_dbservice_1 = require(\"../services/places.dbservice\");\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\nconst i1 = (0, tslib_1.__importStar)(require(\"../services/auth.service\"));\nconst i2 = (0, tslib_1.__importStar)(require(\"@angular/router\"));\nconst i3 = (0, tslib_1.__importStar)(require(\"../services/cross.service\"));\nconst i4 = (0, tslib_1.__importStar)(require(\"../services/places.dbservice\"));\n\nclass AdminGuard {\n  constructor(auth, router, activeRoute, crossService, placesDBService) {\n    this.auth = auth;\n    this.router = router;\n    this.activeRoute = activeRoute;\n    this.crossService = crossService;\n    this.placesDBService = placesDBService;\n  }\n\n  canActivate(next, state) {\n    return this.auth.user$.pipe((0, operators_1.take)(1), (0, operators_1.map)(user => user && user.superAdmin ? true : false), (0, operators_1.tap)(isAdmin => {\n      console.log('Guard admin is ' + isAdmin);\n\n      if (!isAdmin) {\n        this.router.navigate(['login'], {\n          queryParams: {\n            return: state.url\n          }\n        });\n        return false;\n      } else {\n        console.log('retrieving application data');\n        this.crossService.retrieveServiceData(); //Special handling for mobiscroll tree data\n\n        this.placesDBService.getPlacesFromDB();\n        return true;\n      }\n    }));\n  }\n\n}\n\nexports.AdminGuard = AdminGuard;\n\nAdminGuard.ɵfac = function AdminGuard_Factory(t) {\n  return new (t || AdminGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i3.CrossService), i0.ɵɵinject(i4.PlacesDBService));\n};\n\nAdminGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdminGuard,\n  factory: AdminGuard.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"script"}