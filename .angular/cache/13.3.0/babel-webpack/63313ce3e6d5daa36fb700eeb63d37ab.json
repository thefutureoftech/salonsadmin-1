{"ast":null,"code":"/* eslint-disable */\nimport { Injectable, Input as Input$1, Output, Directive, NgModule, EventEmitter, ElementRef, NgZone, ViewContainerRef, ViewChild, Optional, Component, ContentChildren, QueryList, ChangeDetectionStrategy, ViewChildren, ChangeDetectorRef, Injector, Inject, forwardRef, ContentChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgControl, FormsModule } from '@angular/forms';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nimport * as ɵngcc2 from '@angular/common';\nvar _c0 = [\"initElement\"];\n\nfunction MbscInput_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 5);\n  }\n}\n\nfunction MbscInput_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 6);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.errorMessage);\n  }\n}\n\nvar _c1 = [\"*\"];\n\nfunction MbscCalendarComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscColorComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscDateComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscTimeComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscDatetimeComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nvar _c2 = [\"rootElement\"];\n\nfunction MbscTextarea_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\n\nfunction MbscDropdown_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\n\nfunction MbscCheckbox_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\n\nfunction MbscSwitch_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\n\nfunction MbscRadio_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\n\nfunction MbscSegmented_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\");\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(\"mbsc-ic mbsc-ic-\" + ctx_r1.icon);\n  }\n}\n\nvar _c3 = [\"inputElements\"];\n\nfunction MbscSlider_input_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"input\", 2, 3);\n    ɵngcc0.ɵɵlistener(\"blur\", function MbscSlider_input_2_Template_input_blur_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.onTouch($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var v_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r0.disabled);\n    ɵngcc0.ɵɵattribute(\"value\", ctx_r0.dummyArray.length > 1 && ctx_r0.initialValue ? ctx_r0.initialValue[v_r1] : ctx_r0.initialValue)(\"data-step-labels\", ctx_r0.dataStepLabels)(\"data-template\", ctx_r0.valueTemplate)(\"data-tooltip\", ctx_r0.tooltip ? \"true\" : null)(\"data-highlight\", ctx_r0.highlight)(\"data-live\", ctx_r0.live)(\"data-icon\", ctx_r0.icon ? ctx_r0.icon : null)(\"data-val\", ctx_r0.val ? ctx_r0.val : null)(\"data-label-style\", ctx_r0.labelStyle)(\"data-input-style\", ctx_r0.inputStyle)(\"name\", ctx_r0.name)(\"max\", ctx_r0.max !== undefined ? ctx_r0.max : null)(\"min\", ctx_r0.min !== undefined ? ctx_r0.min : null)(\"step\", ctx_r0.step !== undefined ? ctx_r0.step : null);\n  }\n}\n\nvar _c4 = [\"itemWrapper\"];\n\nfunction MbscImageComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 2);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"disabled\", ctx_r0.disabled)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign)(\"placeholder\", ctx_r0.placeholder)(\"controlNg\", false);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\", ctx_r0.label, \" \");\n  }\n}\n\nfunction MbscMeasurementComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscTemperatureComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscDistanceComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscSpeedComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscForceComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscMassComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscNumberComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscNumpadComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscNumpadDecimalComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscNumpadDateComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscNumpadTimeComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscNumpadTimespanComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscRangeComponent_mbsc_input_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nvar _c5 = [[[\"mbsc-range-start\"]], [[\"mbsc-range-end\"]], \"*\"];\nvar _c6 = [\"mbsc-range-start\", \"mbsc-range-end\", \"*\"];\n\nfunction MbscScrollerComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscSelectComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscTimerComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscTimespanComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nfunction MbscTreelistComponent_mbsc_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx_r0.name)(\"theme\", ctx_r0.theme)(\"themeVariant\", ctx_r0.themeVariant)(\"label-style\", ctx_r0.labelStyle)(\"input-style\", ctx_r0.inputStyle)(\"disabled\", ctx_r0.disabled)(\"dropdown\", ctx_r0.dropdown)(\"placeholder\", ctx_r0.placeholder)(\"error\", ctx_r0.error)(\"errorMessage\", ctx_r0.errorMessage)(\"icon\", ctx_r0.inputIcon)(\"icon-align\", ctx_r0.iconAlign);\n  }\n}\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __param(paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n}\n\nfunction __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nvar mobiscroll = mobiscroll || {},\n    util = {},\n    calendars = {};\n\nvar os,\n    vers,\n    majorVersion,\n    minorVersion,\n    version = [],\n    isBrowser = typeof window !== 'undefined',\n    isDark = isBrowser && window.matchMedia && window.matchMedia('(prefers-color-scheme:dark)').matches,\n    userAgent = isBrowser ? navigator.userAgent : '',\n    platform = isBrowser ? navigator.platform : '',\n    maxTouchPoints = isBrowser ? navigator.maxTouchPoints : 0,\n    isSafari = /Safari/.test(userAgent),\n    device = userAgent.match(/Android|iPhone|iPad|iPod|Windows Phone|Windows|MSIE/i),\n    raf = isBrowser && window.requestAnimationFrame || function (func) {\n  return setTimeout(func, 20);\n},\n    rafc = isBrowser && window.cancelAnimationFrame || function (id) {\n  clearTimeout(id);\n};\n\nif (/Android/i.test(device)) {\n  os = 'android';\n  vers = userAgent.match(/Android\\s+([\\d.]+)/i);\n\n  if (vers) {\n    version = vers[0].replace('Android ', '').split('.');\n  }\n} else if (/iPhone|iPad|iPod/i.test(device) || /iPhone|iPad|iPod/i.test(platform) || platform === 'MacIntel' && maxTouchPoints > 1) {\n  // On iPad with iOS 13 desktop site request is automatically enabled in Safari,\n  // so 'iPad' is no longer present in the user agent string.\n  // In this case we check `navigator.platform` and `navigator.maxTouchPoints`.\n  // maxTouchPoints is needed to exclude desktop Mac OS X.\n  os = 'ios';\n  vers = userAgent.match(/OS\\s+([\\d_]+)/i);\n\n  if (vers) {\n    version = vers[0].replace(/_/g, '.').replace('OS ', '').split('.');\n  }\n} else if (/Windows Phone/i.test(device)) {\n  os = 'wp';\n} else if (/Windows|MSIE/i.test(device)) {\n  os = 'windows';\n}\n\nmajorVersion = version[0];\nminorVersion = version[1];\n\nfunction testProps(props) {\n  var i;\n\n  for (i in props) {\n    if (mod[props[i]] !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction testPrefix() {\n  var prefixes = ['Webkit', 'Moz', 'O', 'ms'],\n      p;\n\n  for (p in prefixes) {\n    if (testProps([prefixes[p] + 'Transform'])) {\n      return '-' + prefixes[p].toLowerCase() + '-';\n    }\n  }\n\n  return '';\n}\n\nfunction testTouch(e, elm) {\n  if (e.type == 'touchstart') {\n    elm.__mbscTouched = 1;\n  } else if (elm.__mbscTouched) {\n    delete elm.__mbscTouched;\n    return false;\n  }\n\n  return true;\n}\n\nfunction getPosition(t, vertical) {\n  var prefixes = ['t', 'webkitT', 'MozT', 'OT', 'msT'],\n      style = getComputedStyle(t[0]),\n      i = 0,\n      matrix,\n      px,\n      v;\n\n  while (!matrix && i < prefixes.length) {\n    v = prefixes[i];\n\n    if (style[v + 'ransform'] !== undefined) {\n      matrix = style[v + 'ransform'];\n    }\n\n    i++;\n  }\n\n  matrix = matrix.split(')')[0].split(', ');\n  px = vertical ? matrix[13] || matrix[5] : matrix[12] || matrix[4];\n  return px;\n}\n\nfunction getTextColor(color) {\n  if (color) {\n    // Cache calculated text colors, because it is slow\n    if (textColors[color]) {\n      return textColors[color];\n    }\n\n    var ctx = canvas && canvas.getContext('2d');\n\n    if (!ctx) {\n      return '#fff';\n    } // Use canvas element, since it does not require DOM append\n\n\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, 1, 1);\n    var rgb = ctx.getImageData(0, 0, 1, 1).data;\n    var delta = +rgb[0] * 0.299 + +rgb[1] * 0.587 + +rgb[2] * 0.114;\n    var textColor = delta < 130 ? '#fff' : '#000';\n    textColors[color] = textColor;\n    return textColor;\n  }\n}\n\nfunction scrollStep(el, startTime, from, to, callback) {\n  var elapsed = Math.min(1, (new Date() - startTime) / 468),\n      eased = 0.5 * (1 - Math.cos(Math.PI * elapsed)),\n      current = from + (to - from) * eased;\n  el.scrollTop = current;\n\n  if (current !== to) {\n    raf(function () {\n      scrollStep(el, startTime, from, to, callback);\n    });\n  } else if (callback) {\n    callback();\n  }\n}\n\nfunction smoothScroll(el, to, prevAnim, callback) {\n  if (prevAnim) {\n    el.scrollTop = to;\n\n    if (callback) {\n      callback();\n    }\n  } else {\n    scrollStep(el, new Date(), el.scrollTop, to, callback);\n  }\n}\n\nfunction listen(el, event, handler, opt) {\n  if (el) {\n    el.addEventListener(event, handler, opt);\n  }\n}\n\nfunction unlisten(el, event, handler, opt) {\n  if (el) {\n    el.removeEventListener(event, handler, opt);\n  }\n}\n\nfunction matches(element, selector) {\n  if (!selector || !element || element.nodeType !== 1) {\n    return false;\n  }\n\n  var matchesSelector = element.matches || element.matchesSelector || element.webkitMatchesSelector || element.mozMatchesSelector || element.msMatchesSelector;\n  return matchesSelector.call(element, selector);\n}\n\nfunction closest(el, target, selector) {\n  while (target) {\n    if (matches(target, selector)) {\n      return target;\n    }\n\n    target = target !== el ? target.parentNode : null;\n  }\n\n  return null;\n}\n\nfunction trigger(elm, name, data) {\n  var evt;\n\n  try {\n    evt = new CustomEvent(name, {\n      detail: data,\n      bubbles: true,\n      cancelable: true\n    });\n  } catch (e) {\n    evt = document.createEvent('Event');\n    evt.initEvent(name, true, true);\n    evt.detail = data;\n  }\n\n  elm.dispatchEvent(evt);\n}\n\nfunction setFocusInvisible() {\n  win.__mbscFocusVisible = false;\n}\n\nfunction setFocusVisible() {\n  win.__mbscFocusVisible = true;\n}\n\nfunction addWindowFocus() {\n  var focusCount = win.__mbscFocusCount || 0;\n\n  if (focusCount === 0) {\n    listen(win, 'mousedown', setFocusInvisible, true);\n    listen(win, 'keydown', setFocusVisible, true);\n  }\n\n  win.__mbscFocusCount = ++focusCount;\n}\n\nfunction removeWindowFocus() {\n  var focusCount = win.__mbscFocusCount || 0;\n  win.__mbscFocusCount = --focusCount;\n\n  if (win.__mbscFocusCount === 0) {\n    unlisten(win, 'mousedown', setFocusInvisible);\n    unlisten(win, 'keydown', setFocusVisible);\n  }\n}\n\nvar animEnd,\n    canvas,\n    mod,\n    cssPrefix,\n    hasGhostClick,\n    hasTransition,\n    isWebView,\n    isWkWebView,\n    jsPrefix,\n    win,\n    textColors = {};\n\nif (isBrowser) {\n  win = window;\n  canvas = document.createElement('canvas');\n  mod = document.createElement('modernizr').style;\n  cssPrefix = testPrefix();\n  jsPrefix = cssPrefix.replace(/^-/, '').replace(/-$/, '').replace('moz', 'Moz');\n  animEnd = mod.animation !== undefined ? 'animationend' : 'webkitAnimationEnd';\n  hasTransition = mod.transition !== undefined; // UIWebView on iOS still has the ghost click, \n  // WkWebView does not have a ghost click, but it's hard to tell if it's UIWebView or WkWebView\n  // In addition in iOS 12.2 if we enable tap handling, it brakes the form inputs\n  // (keyboard appears, but the cursor is not in the input).\n\n  isWebView = os === 'ios' && !isSafari;\n  isWkWebView = isWebView && win.webkit && win.webkit.messageHandlers;\n  hasGhostClick = mod.touchAction === undefined || isWebView && !isWkWebView;\n}\n\nvar cssNumber = {\n  'column-count': 1,\n  'columns': 1,\n  'font-weight': 1,\n  'line-height': 1,\n  'opacity': 1,\n  'z-index': 1,\n  'zoom': 1\n},\n    propMap = {\n  'readonly': 'readOnly'\n},\n    emptyArray = [],\n    _slice = Array.prototype.slice;\n\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\n\nfunction isObject(obj) {\n  return typeof obj === \"object\";\n}\n\nfunction likeArray(obj) {\n  return typeof obj.length == 'number';\n}\n\nfunction camelize(str) {\n  return str.replace(/-+(.)?/g, function (match, chr) {\n    return chr ? chr.toUpperCase() : '';\n  });\n}\n\nfunction extend(target, source, deep) {\n  for (var key in source) {\n    if (deep && ($.isPlainObject(source[key]) || $.isArray(source[key]))) {\n      if ($.isPlainObject(source[key]) && !$.isPlainObject(target[key]) || $.isArray(source[key]) && !$.isArray(target[key])) {\n        target[key] = {};\n      }\n\n      extend(target[key], source[key], deep);\n    } else if (source[key] !== undefined) {\n      target[key] = source[key];\n    }\n  }\n}\n\nfunction dasherize(str) {\n  return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();\n}\n\nfunction maybeAddPx(name, value) {\n  return typeof value == \"number\" && !cssNumber[dasherize(name)] ? value + \"px\" : value;\n}\n\nvar Dom = function () {\n  var Dom = function Dom(arr) {\n    var _this = this,\n        i = 0; // Create array-like object\n\n\n    for (i = 0; i < arr.length; i++) {\n      _this[i] = arr[i];\n    }\n\n    _this.length = arr.length; // Return collection with methods\n\n    return $(this);\n  };\n\n  var $ = function $(selector, context) {\n    var arr = [],\n        i = 0;\n\n    if (selector && !context) {\n      if (selector instanceof Dom) {\n        return selector;\n      }\n    }\n\n    if (isFunction(selector)) {\n      return $(document).ready(selector);\n    }\n\n    if (selector) {\n      // String\n      if (typeof selector === 'string') {\n        var els, tempParent, html;\n        selector = html = selector.trim();\n\n        if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n          var toCreate = 'div';\n\n          if (html.indexOf('<li') === 0) {\n            toCreate = 'ul';\n          }\n\n          if (html.indexOf('<tr') === 0) {\n            toCreate = 'tbody';\n          }\n\n          if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) {\n            toCreate = 'tr';\n          }\n\n          if (html.indexOf('<tbody') === 0) {\n            toCreate = 'table';\n          }\n\n          if (html.indexOf('<option') === 0) {\n            toCreate = 'select';\n          }\n\n          tempParent = document.createElement(toCreate);\n          tempParent.innerHTML = html;\n\n          for (i = 0; i < tempParent.childNodes.length; i++) {\n            arr.push(tempParent.childNodes[i]);\n          }\n        } else {\n          if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {\n            // Pure ID selector\n            els = [document.getElementById(selector.split('#')[1])];\n          } else {\n            if (context instanceof Dom) {\n              context = context[0];\n            } // Other selectors\n\n\n            els = (context || document).querySelectorAll(selector);\n          }\n\n          for (i = 0; i < els.length; i++) {\n            if (els[i]) {\n              arr.push(els[i]);\n            }\n          }\n        }\n      } // Node/element\n      else if (selector.nodeType || selector === window || selector === document) {\n        arr.push(selector);\n      } //Array of elements or instance of Dom\n      else if (selector.length > 0 && selector[0].nodeType) {\n        for (i = 0; i < selector.length; i++) {\n          arr.push(selector[i]);\n        }\n      } else if ($.isArray(selector)) {\n        arr = selector;\n      }\n    }\n\n    return new Dom(arr);\n  };\n\n  Dom.prototype = {\n    ready: function ready(callback) {\n      if (document.attachEvent ? document.readyState == 'complete' : document.readyState != 'loading') {\n        callback($);\n      } else {\n        document.addEventListener('DOMContentLoaded', function () {\n          callback($);\n        }, false);\n      }\n\n      return this;\n    },\n    concat: emptyArray.concat,\n    empty: function empty() {\n      return this.each(function () {\n        this.innerHTML = '';\n      });\n    },\n    map: function map(fn) {\n      return $($.map(this, function (el, i) {\n        return fn.call(el, i, el);\n      }));\n    },\n    slice: function slice() {\n      return $(_slice.apply(this, arguments));\n    },\n    // Classes and attriutes\n    // NOTE: element.classList attribure is not supported on android 2.3!!!\n    addClass: function addClass(className) {\n      if (typeof className === 'undefined') {\n        return this;\n      }\n\n      var classes = className.split(' ');\n\n      for (var i = 0; i < classes.length; i++) {\n        for (var j = 0; j < this.length; j++) {\n          if (typeof this[j].classList !== 'undefined' && classes[i] !== '') {\n            this[j].classList.add(classes[i]);\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function removeClass(className) {\n      if (typeof className === 'undefined') {\n        return this;\n      }\n\n      var classes = className.split(' ');\n\n      for (var i = 0; i < classes.length; i++) {\n        for (var j = 0; j < this.length; j++) {\n          if (typeof this[j].classList !== 'undefined' && classes[i] !== '') {\n            this[j].classList.remove(classes[i]);\n          }\n        }\n      }\n\n      return this;\n    },\n    hasClass: function hasClass(className) {\n      return this[0] ? this[0].classList.contains(className) : false;\n    },\n    toggleClass: function toggleClass(className) {\n      var classes = className.split(' ');\n\n      for (var i = 0; i < classes.length; i++) {\n        for (var j = 0; j < this.length; j++) {\n          if (typeof this[j].classList !== 'undefined') {\n            this[j].classList.toggle(classes[i]);\n          }\n        }\n      }\n\n      return this;\n    },\n    closest: function closest(selector, context) {\n      var node = this[0],\n          collection = false;\n\n      if (isObject(selector)) {\n        collection = $(selector);\n      }\n\n      while (node && !(collection ? collection.indexOf(node) >= 0 : matches(node, selector))) {\n        node = node !== context && node.nodeType !== node.DOCUMENT_NODE && node.parentNode;\n      }\n\n      return $(node);\n    },\n    attr: function attr(attrs, value) {\n      var attr;\n\n      if (arguments.length === 1 && typeof attrs === 'string') {\n        // Get attr\n        if (this.length) {\n          attr = this[0].getAttribute(attrs);\n          return attr || attr === '' ? attr : undefined;\n        }\n      } else {\n        // Set attrs\n        for (var i = 0; i < this.length; i++) {\n          if (arguments.length === 2) {\n            // String\n            this[i].setAttribute(attrs, value);\n          } else {\n            // Object\n            for (var attrName in attrs) {\n              this[i][attrName] = attrs[attrName];\n              this[i].setAttribute(attrName, attrs[attrName]);\n            }\n          }\n        }\n\n        return this;\n      }\n    },\n    removeAttr: function removeAttr(attr) {\n      for (var i = 0; i < this.length; i++) {\n        this[i].removeAttribute(attr);\n      }\n\n      return this;\n    },\n    prop: function prop(props, value) {\n      props = propMap[props] || props;\n\n      if (arguments.length === 1 && typeof props === 'string') {\n        // Get prop\n        return this[0] ? this[0][props] : undefined;\n      } else {\n        // Set props\n        for (var i = 0; i < this.length; i++) {\n          this[i][props] = value;\n        }\n\n        return this;\n      }\n    },\n    val: function val(value) {\n      if (typeof value === 'undefined') {\n        if (this.length && this[0].multiple) {\n          return $.map(this.find('option:checked'), function (v) {\n            return v.value;\n          });\n        }\n\n        return this[0] ? this[0].value : undefined;\n      }\n\n      if (this.length && this[0].multiple) {\n        $.each(this[0].options, function () {\n          this.selected = value.indexOf(this.value) != -1;\n        });\n      } else {\n        for (var i = 0; i < this.length; i++) {\n          this[i].value = value;\n        }\n      }\n\n      return this;\n    },\n    //Events\n    on: function on(eventName, targetSelector, listener, capture) {\n      var boundListener,\n          elm,\n          event,\n          events = eventName.split(' '),\n          i,\n          j;\n\n      function handleLiveEvent(e) {\n        var target = e.target;\n\n        while (target) {\n          if ($(target).is(targetSelector)) {\n            listener.call(target, e);\n          }\n\n          target = target !== this ? target.parentNode : null;\n        }\n      }\n\n      function handleNamespaces(el, name, listener, capture) {\n        var namespace = name.split('.');\n\n        if (!el.DomNameSpaces) {\n          el.DomNameSpaces = [];\n        }\n\n        el.DomNameSpaces.push({\n          namespace: namespace[1],\n          event: namespace[0],\n          listener: listener,\n          capture: capture\n        });\n        el.addEventListener(namespace[0], listener, capture);\n      }\n\n      for (i = 0; i < this.length; i++) {\n        elm = this[i];\n\n        if (isFunction(targetSelector) || targetSelector === false) {\n          // Usual events\n          if (isFunction(targetSelector)) {\n            capture = listener || false;\n            listener = targetSelector;\n          }\n\n          for (j = 0; j < events.length; j++) {\n            event = events[j]; // check for namespaces\n\n            if (event.indexOf('.') != -1) {\n              handleNamespaces(elm, event, listener, capture);\n            } else {\n              elm.addEventListener(event, listener, capture);\n            }\n          }\n        } else {\n          // Live events\n          boundListener = handleLiveEvent.bind(elm);\n\n          for (j = 0; j < events.length; j++) {\n            event = events[j];\n\n            if (!elm.DomLiveListeners) {\n              elm.DomLiveListeners = [];\n            }\n\n            elm.DomLiveListeners.push({\n              listener: listener,\n              liveListener: boundListener\n            });\n\n            if (event.indexOf('.') != -1) {\n              handleNamespaces(elm, event, boundListener, capture);\n            } else {\n              elm.addEventListener(event, boundListener, capture);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    off: function off(eventName, targetSelector, listener, capture) {\n      var elm,\n          event,\n          events,\n          i,\n          j,\n          k,\n          liveListeners,\n          that = this;\n\n      function removeEvents(event) {\n        var el,\n            i,\n            j,\n            item,\n            nameSpaces,\n            parts = event.split('.'),\n            name = parts[0],\n            ns = parts[1];\n\n        for (i = 0; i < that.length; ++i) {\n          el = that[i];\n          nameSpaces = el.DomNameSpaces;\n\n          if (nameSpaces) {\n            for (j = 0; j < nameSpaces.length; ++j) {\n              item = nameSpaces[j];\n\n              if (item.namespace == ns && (item.event == name || !name)) {\n                el.removeEventListener(item.event, item.listener, item.capture);\n                item.removed = true;\n              }\n            } // remove the events from the DomNameSpaces array\n\n\n            for (j = nameSpaces.length - 1; j >= 0; --j) {\n              if (nameSpaces[j].removed) {\n                nameSpaces.splice(j, 1);\n              }\n            }\n          }\n        }\n      }\n\n      events = eventName.split(' ');\n\n      for (i = 0; i < events.length; i++) {\n        event = events[i];\n\n        for (j = 0; j < this.length; j++) {\n          elm = this[j];\n          liveListeners = elm.DomLiveListeners;\n\n          if (isFunction(targetSelector) || targetSelector === false) {\n            // Usual events\n            if (isFunction(targetSelector)) {\n              capture = listener || false;\n              listener = targetSelector;\n            }\n\n            if (event.indexOf('.') === 0) {\n              // remove namespace events\n              removeEvents(event.substr(1));\n            } else {\n              elm.removeEventListener(event, listener, capture);\n            }\n          } else {\n            // Live event\n            if (liveListeners) {\n              for (k = 0; k < liveListeners.length; k++) {\n                if (liveListeners[k].listener === listener) {\n                  elm.removeEventListener(event, liveListeners[k].liveListener, capture);\n                }\n              }\n            }\n\n            if (elm.DomNameSpaces && elm.DomNameSpaces.length && event) {\n              removeEvents(event);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    trigger: function trigger$1(eventName, eventData) {\n      var events = eventName.split(' ');\n\n      for (var i = 0; i < events.length; i++) {\n        for (var j = 0; j < this.length; j++) {\n          trigger(this[j], events[i], eventData);\n        }\n      }\n\n      return this;\n    },\n    // Sizing/Styles\n    width: function width(dim) {\n      if (dim !== undefined) {\n        return this.css('width', dim);\n      }\n\n      if (this[0] === window) {\n        return window.innerWidth;\n      } else if (this[0] === document) {\n        return document.documentElement.scrollWidth;\n      } else {\n        return this.length > 0 ? parseFloat(this.css('width')) : null;\n      }\n    },\n    height: function height(dim) {\n      if (dim !== undefined) {\n        return this.css('height', dim);\n      }\n\n      if (this[0] === window) {\n        return window.innerHeight;\n      } else if (this[0] === document) {\n        var body = document.body,\n            html = document.documentElement;\n        return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n      } else {\n        return this.length > 0 ? parseFloat(this.css('height')) : null;\n      }\n    },\n    innerWidth: function innerWidth() {\n      var elm = this;\n\n      if (this.length > 0) {\n        if (this[0].innerWidth) {\n          return this[0].innerWidth;\n        } else {\n          var size = this[0].offsetWidth,\n              sides = ['left', 'right'];\n          sides.forEach(function (side) {\n            size -= parseInt(elm.css(camelize('border-' + side + '-width')) || 0, 10);\n          });\n          return size;\n        }\n      }\n    },\n    innerHeight: function innerHeight() {\n      var elm = this;\n\n      if (this.length > 0) {\n        if (this[0].innerHeight) {\n          return this[0].innerHeight;\n        } else {\n          var size = this[0].offsetHeight,\n              sides = ['top', 'bottom'];\n          sides.forEach(function (side) {\n            size -= parseInt(elm.css(camelize('border-' + side + '-width')) || 0, 10);\n          });\n          return size;\n        }\n      }\n    },\n    offset: function offset() {\n      if (this.length > 0) {\n        var el = this[0],\n            box = el.getBoundingClientRect(),\n            doc = document.documentElement;\n        return {\n          top: box.top + window.pageYOffset - doc.clientTop,\n          left: box.left + window.pageXOffset - doc.clientLeft\n        };\n      }\n    },\n    hide: function hide() {\n      for (var i = 0; i < this.length; i++) {\n        this[i].style.display = 'none';\n      }\n\n      return this;\n    },\n    show: function show() {\n      for (var i = 0; i < this.length; i++) {\n        if (this[i].style.display == \"none\") {\n          this[i].style.display = '';\n        }\n\n        if (getComputedStyle(this[i], '').getPropertyValue(\"display\") == \"none\") {\n          this[i].style.display = 'block';\n        }\n      }\n\n      return this;\n    },\n    clone: function clone() {\n      return this.map(function () {\n        return this.cloneNode(true);\n      });\n    },\n    styles: function styles() {\n      return this[0] ? window.getComputedStyle(this[0], null) : undefined;\n    },\n    css: function css(property, value) {\n      var i,\n          key,\n          element = this[0],\n          css = '';\n\n      if (arguments.length < 2) {\n        if (!element) {\n          return;\n        }\n\n        if (typeof property === 'string') {\n          return element.style[property] || getComputedStyle(element, '').getPropertyValue(property);\n        }\n      }\n\n      if (typeof property === 'string') {\n        if (!value && value !== 0) {\n          this.each(function () {\n            this.style.removeProperty(dasherize(property));\n          });\n        } else {\n          css = dasherize(property) + \":\" + maybeAddPx(property, value);\n        }\n      } else {\n        for (key in property) {\n          if (!property[key] && property[key] !== 0) {\n            for (i = 0; i < this.length; i++) {\n              this[i].style.removeProperty(dasherize(key));\n            }\n          } else {\n            css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';';\n          }\n        }\n      }\n\n      return this.each(function () {\n        this.style.cssText += ';' + css;\n      });\n    },\n    each: function each(callback) {\n      for (var i = 0; i < this.length; i++) {\n        if (callback.apply(this[i], [i, this[i]]) === false) {\n          break;\n        }\n      }\n\n      return this;\n    },\n    filter: function filter(callback) {\n      var matchedItems = [];\n\n      for (var i = 0; i < this.length; i++) {\n        if (isFunction(callback)) {\n          if (callback.call(this[i], i, this[i])) {\n            matchedItems.push(this[i]);\n          }\n        } else if (matches(this[i], callback)) {\n          matchedItems.push(this[i]);\n        }\n      }\n\n      return new Dom(matchedItems);\n    },\n    html: function html(_html) {\n      if (typeof _html === 'undefined') {\n        return this[0] ? this[0].innerHTML : undefined;\n      } else {\n        this.empty();\n\n        for (var i = 0; i < this.length; i++) {\n          this[i].innerHTML = _html;\n        }\n\n        return this;\n      }\n    },\n    text: function text(_text) {\n      if (typeof _text === 'undefined') {\n        return this[0] ? this[0].textContent.trim() : null;\n      } else {\n        for (var i = 0; i < this.length; i++) {\n          this[i].textContent = _text;\n        }\n\n        return this;\n      }\n    },\n    is: function is(selector) {\n      return this.length > 0 && matches(this[0], selector);\n    },\n    not: function not(selector) {\n      var nodes = [];\n\n      if (isFunction(selector) && selector.call !== undefined) {\n        this.each(function (idx) {\n          if (!selector.call(this, idx)) {\n            nodes.push(this);\n          }\n        });\n      } else {\n        var excludes = typeof selector == 'string' ? this.filter(selector) : likeArray(selector) && isFunction(selector.item) ? _slice.call(selector) : $(selector);\n\n        if (isObject(excludes)) {\n          excludes = $.map(excludes, function (el) {\n            return el;\n          });\n        }\n\n        this.each(function (i, el) {\n          if (excludes.indexOf(el) < 0) {\n            nodes.push(el);\n          }\n        });\n      }\n\n      return $(nodes);\n    },\n    indexOf: function indexOf(el) {\n      for (var i = 0; i < this.length; i++) {\n        if (this[i] === el) {\n          return i;\n        }\n      }\n    },\n    index: function index(element) {\n      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0]);\n    },\n    get: function get(idx) {\n      return idx === undefined ? _slice.call(this) : this[idx >= 0 ? idx : idx + this.length];\n    },\n    eq: function eq(index) {\n      if (typeof index === 'undefined') {\n        return this;\n      }\n\n      var length = this.length,\n          returnIndex;\n\n      if (index > length - 1) {\n        return new Dom([]);\n      }\n\n      if (index < 0) {\n        returnIndex = length + index;\n        return returnIndex < 0 ? new Dom([]) : new Dom([this[returnIndex]]);\n      }\n\n      return new Dom([this[index]]);\n    },\n    append: function append(newChild) {\n      var i, j;\n\n      for (i = 0; i < this.length; i++) {\n        if (typeof newChild === 'string') {\n          var tempDiv = document.createElement('div');\n          tempDiv.innerHTML = newChild;\n\n          while (tempDiv.firstChild) {\n            this[i].appendChild(tempDiv.firstChild);\n          }\n        } else if (newChild instanceof Dom) {\n          for (j = 0; j < newChild.length; j++) {\n            this[i].appendChild(newChild[j]);\n          }\n        } else {\n          this[i].appendChild(newChild);\n        }\n      }\n\n      return this;\n    },\n    appendTo: function appendTo(parent) {\n      $(parent).append(this);\n      return this;\n    },\n    prepend: function prepend(newChild) {\n      var i, j;\n\n      for (i = 0; i < this.length; i++) {\n        if (typeof newChild === 'string') {\n          var tempDiv = document.createElement('div');\n          tempDiv.innerHTML = newChild;\n\n          for (j = tempDiv.childNodes.length - 1; j >= 0; j--) {\n            this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n          } // this[i].insertAdjacentHTML('afterbegin', newChild);\n\n        } else if (newChild instanceof Dom) {\n          for (j = 0; j < newChild.length; j++) {\n            this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n          }\n        } else {\n          this[i].insertBefore(newChild, this[i].childNodes[0]);\n        }\n      }\n\n      return this;\n    },\n    prependTo: function prependTo(parent) {\n      $(parent).prepend(this);\n      return this;\n    },\n    insertBefore: function insertBefore(selector) {\n      var before = $(selector);\n\n      for (var i = 0; i < this.length; i++) {\n        if (before.length === 1) {\n          before[0].parentNode.insertBefore(this[i], before[0]);\n        } else if (before.length > 1) {\n          for (var j = 0; j < before.length; j++) {\n            before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);\n          }\n        }\n      }\n\n      return this;\n    },\n    insertAfter: function insertAfter(selector) {\n      var after = $(selector);\n\n      for (var i = 0; i < this.length; i++) {\n        if (after.length === 1) {\n          after[0].parentNode.insertBefore(this[i], after[0].nextSibling);\n        } else if (after.length > 1) {\n          for (var j = 0; j < after.length; j++) {\n            after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);\n          }\n        }\n      }\n\n      return this;\n    },\n    next: function next(selector) {\n      if (this.length > 0) {\n        if (selector) {\n          if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n            return new Dom([this[0].nextElementSibling]);\n          } else {\n            return new Dom([]);\n          }\n        } else {\n          if (this[0].nextElementSibling) {\n            return new Dom([this[0].nextElementSibling]);\n          } else {\n            return new Dom([]);\n          }\n        }\n      } else {\n        return new Dom([]);\n      }\n    },\n    nextAll: function nextAll(selector) {\n      var nextEls = [],\n          el = this[0];\n\n      if (!el) {\n        return new Dom([]);\n      }\n\n      while (el.nextElementSibling) {\n        var next = el.nextElementSibling;\n\n        if (selector) {\n          if ($(next).is(selector)) {\n            nextEls.push(next);\n          }\n        } else {\n          nextEls.push(next);\n        }\n\n        el = next;\n      }\n\n      return new Dom(nextEls);\n    },\n    prev: function prev(selector) {\n      if (this.length > 0) {\n        if (selector) {\n          if (this[0].previousElementSibling && $(this[0].previousElementSibling).is(selector)) {\n            return new Dom([this[0].previousElementSibling]);\n          } else {\n            return new Dom([]);\n          }\n        } else {\n          if (this[0].previousElementSibling) {\n            return new Dom([this[0].previousElementSibling]);\n          } else {\n            return new Dom([]);\n          }\n        }\n      } else {\n        return new Dom([]);\n      }\n    },\n    prevAll: function prevAll(selector) {\n      var prevEls = [];\n      var el = this[0];\n\n      if (!el) {\n        return new Dom([]);\n      }\n\n      while (el.previousElementSibling) {\n        var prev = el.previousElementSibling;\n\n        if (selector) {\n          if ($(prev).is(selector)) {\n            prevEls.push(prev);\n          }\n        } else {\n          prevEls.push(prev);\n        }\n\n        el = prev;\n      }\n\n      return new Dom(prevEls);\n    },\n    parent: function parent(selector) {\n      var parents = [];\n\n      for (var i = 0; i < this.length; i++) {\n        if (this[i].parentNode !== null) {\n          if (selector) {\n            if ($(this[i].parentNode).is(selector)) {\n              parents.push(this[i].parentNode);\n            }\n          } else {\n            parents.push(this[i].parentNode);\n          }\n        }\n      }\n\n      return $($.unique(parents));\n    },\n    parents: function parents(selector) {\n      var parents = [];\n\n      for (var i = 0; i < this.length; i++) {\n        var parent = this[i].parentNode;\n\n        while (parent) {\n          if (selector) {\n            if ($(parent).is(selector)) {\n              parents.push(parent);\n            }\n          } else {\n            parents.push(parent);\n          }\n\n          parent = parent.parentNode;\n        }\n      }\n\n      return $($.unique(parents));\n    },\n    find: function find(selector) {\n      var foundElements = [];\n\n      for (var i = 0; i < this.length; i++) {\n        var found = this[i].querySelectorAll(selector);\n\n        for (var j = 0; j < found.length; j++) {\n          foundElements.push(found[j]);\n        }\n      }\n\n      return new Dom(foundElements);\n    },\n    children: function children(selector) {\n      var children = [];\n\n      for (var i = 0; i < this.length; i++) {\n        var childNodes = this[i].childNodes;\n\n        for (var j = 0; j < childNodes.length; j++) {\n          if (!selector) {\n            if (childNodes[j].nodeType === 1) {\n              children.push(childNodes[j]);\n            }\n          } else {\n            if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) {\n              children.push(childNodes[j]);\n            }\n          }\n        }\n      }\n\n      return new Dom($.unique(children));\n    },\n    remove: function remove() {\n      for (var i = 0; i < this.length; i++) {\n        if (this[i].parentNode) {\n          this[i].parentNode.removeChild(this[i]);\n        }\n      }\n\n      return this;\n    },\n    add: function add() {\n      var dom = this;\n      var i, j;\n\n      for (i = 0; i < arguments.length; i++) {\n        var toAdd = $(arguments[i]);\n\n        for (j = 0; j < toAdd.length; j++) {\n          dom[dom.length] = toAdd[j];\n          dom.length++;\n        }\n      }\n\n      return dom;\n    },\n    before: function before(elm) {\n      $(elm).insertBefore(this);\n      return this;\n    },\n    after: function after(elm) {\n      $(elm).insertAfter(this);\n      return this;\n    },\n    scrollTop: function scrollTop(value) {\n      if (!this.length) {\n        return;\n      }\n\n      var hasScrollTop = ('scrollTop' in this[0]);\n\n      if (value === undefined) {\n        return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset;\n      }\n\n      return this.each(hasScrollTop ? function () {\n        this.scrollTop = value;\n      } : function () {\n        this.scrollTo(this.scrollX, value);\n      });\n    },\n    scrollLeft: function scrollLeft(value) {\n      if (!this.length) {\n        return;\n      }\n\n      var hasScrollLeft = ('scrollLeft' in this[0]);\n\n      if (value === undefined) {\n        return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset;\n      }\n\n      return this.each(hasScrollLeft ? function () {\n        this.scrollLeft = value;\n      } : function () {\n        this.scrollTo(value, this.scrollY);\n      });\n    },\n    contents: function contents() {\n      return this.map(function (i, v) {\n        return _slice.call(v.childNodes);\n      });\n    },\n    nextUntil: function nextUntil(selector) {\n      var n = this,\n          array = [];\n\n      while (n.length && !n.filter(selector).length) {\n        array.push(n[0]);\n        n = n.next();\n      }\n\n      return $(array);\n    },\n    prevUntil: function prevUntil(selector) {\n      var n = this,\n          array = [];\n\n      while (n.length && !$(n).filter(selector).length) {\n        array.push(n[0]);\n        n = n.prev();\n      }\n\n      return $(array);\n    },\n    detach: function detach() {\n      return this.remove();\n    }\n  }; // Link to prototype\n\n  $.fn = Dom.prototype;\n  return $;\n}(); // Export to local scope\n\n\nvar $ = Dom; // Export to mobiscroll\n\nmobiscroll.$ = Dom; // DOM Library Utilites\n\n$.inArray = function (elem, array, i) {\n  return emptyArray.indexOf.call(array, elem, i);\n};\n\n$.extend = function (target) {\n  var deep,\n      args = _slice.call(arguments, 1);\n\n  if (typeof target == 'boolean') {\n    deep = target;\n    target = args.shift();\n  }\n\n  target = target || {};\n  args.forEach(function (arg) {\n    extend(target, arg, deep);\n  });\n  return target;\n};\n\n$.isFunction = isFunction;\n\n$.isArray = function (arr) {\n  return Object.prototype.toString.apply(arr) === '[object Array]';\n};\n\n$.isPlainObject = function (obj) {\n  return isObject(obj) && obj !== null && obj !== obj.window && Object.getPrototypeOf(obj) == Object.prototype;\n};\n\n$.each = function (obj, callback) {\n  var i, prop;\n\n  if (!isObject(obj) || !callback) {\n    return;\n  }\n\n  if ($.isArray(obj) || obj instanceof Dom) {\n    // Array\n    for (i = 0; i < obj.length; i++) {\n      if (callback.call(obj[i], i, obj[i]) === false) {\n        break;\n      }\n    }\n  } else {\n    // Object\n    for (prop in obj) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (obj.hasOwnProperty(prop) && prop !== 'length') {\n        if (callback.call(obj[prop], prop, obj[prop]) === false) {\n          break;\n        }\n      }\n    }\n  }\n\n  return this;\n};\n\n$.unique = function (arr) {\n  var unique = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n\n  return unique;\n};\n\n$.map = function (elements, callback) {\n  var value,\n      values = [],\n      i,\n      key;\n\n  if (likeArray(elements)) {\n    for (i = 0; i < elements.length; i++) {\n      value = callback(elements[i], i);\n\n      if (value !== null) {\n        values.push(value);\n      }\n    }\n  } else {\n    for (key in elements) {\n      value = callback(elements[key], key);\n\n      if (value !== null) {\n        values.push(value);\n      }\n    }\n  }\n\n  return values.length > 0 ? $.fn.concat.apply([], values) : values;\n};\n\nfunction noop() {}\n\nfunction objectToArray(obj) {\n  var arr = [],\n      i;\n\n  for (i in obj) {\n    arr.push(obj[i]);\n  }\n\n  return arr;\n}\n\nfunction arrayToObject(arr) {\n  var obj = {},\n      i;\n\n  if (arr) {\n    for (i = 0; i < arr.length; i++) {\n      obj[arr[i]] = arr[i];\n    }\n  }\n\n  return obj;\n}\n\nfunction isNumeric(a) {\n  return a - parseFloat(a) >= 0;\n}\n\nfunction isString(s) {\n  return typeof s === 'string';\n}\n\nfunction constrain(val, min, max) {\n  return Math.max(min, Math.min(val, max));\n}\n\nfunction pad(num, size) {\n  num = num + '';\n  size = size || 2;\n\n  while (num.length < size) {\n    num = '0' + num;\n  }\n\n  return num;\n}\n\nfunction throttle(fn, threshhold) {\n  var last, timer;\n  threshhold = threshhold || 100;\n  return function () {\n    var context = this,\n        now = +new Date(),\n        args = arguments;\n\n    if (last && now < last + threshhold) {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        last = now;\n        fn.apply(context, args);\n      }, threshhold);\n    } else {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n}\n\nfunction vibrate(time) {\n  if ('vibrate' in navigator) {\n    navigator.vibrate(time || 50);\n  }\n}\n\nfunction getPercent(v, min, max) {\n  return (v - min) * 100 / (max - min);\n}\n\nfunction getBoolAttr(attr, def, $elm) {\n  var v = $elm.attr(attr);\n  return v === undefined || v === '' ? def : v === 'true';\n}\n\nvar tapped = 0;\nvar allowQuick;\n\nfunction preventClick() {\n  // Prevent ghost click\n  tapped++;\n  setTimeout(function () {\n    tapped--;\n  }, 500);\n}\n\nfunction triggerClick(ev, control) {\n  // Prevent duplicate triggers on the same element\n  // e.g. a form checkbox inside a listview item\n  if (control.mbscClick) {\n    return;\n  }\n\n  var touch = (ev.originalEvent || ev).changedTouches[0],\n      evt = document.createEvent('MouseEvents');\n  evt.initMouseEvent('click', true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);\n  evt.isMbscTap = true; // Prevent ionic to bust our click\n  // This works for Ionic 1 - 3, not sure about 4\n\n  evt.isIonicTap = true; // This will allow a click fired together with this click\n  // We need this, because clicking on a label will trigger a click\n  // on the associated input as well, which should not be busted\n\n  allowQuick = true;\n  control.mbscChange = true;\n  control.mbscClick = true;\n  control.dispatchEvent(evt);\n  allowQuick = false; // Prevent ghost click\n\n  preventClick();\n  setTimeout(function () {\n    delete control.mbscClick;\n  });\n}\n\nfunction getCoord(e, c, page) {\n  var ev = e.originalEvent || e,\n      prop = (page ? 'page' : 'client') + c; // Multi touch support\n\n  if (ev.targetTouches && ev.targetTouches[0]) {\n    return ev.targetTouches[0][prop];\n  }\n\n  if (ev.changedTouches && ev.changedTouches[0]) {\n    return ev.changedTouches[0][prop];\n  }\n\n  return e[prop];\n}\n\nfunction getControlType($elm) {\n  var attrs = ['switch', 'range', 'rating', 'segmented', 'stepper'];\n  var elm = $elm[0];\n  var role = $elm.attr('data-role');\n  var type = $elm.attr('type') || elm.nodeName.toLowerCase();\n\n  if (/(switch|range|rating|segmented|stepper|select)/.test(role)) {\n    type = role;\n  } else {\n    for (var i = 0; i < attrs.length; i++) {\n      if ($elm.is('[mbsc-' + attrs[i] + ']')) {\n        type = attrs[i];\n      }\n    }\n  }\n\n  return type;\n}\n\nfunction activateControl(control, type, ev) {\n  control.focus();\n\n  if (/(button|submit|checkbox|switch|radio)/.test(type)) {\n    ev.preventDefault();\n  }\n\n  if (!/select/.test(type)) {\n    triggerClick(ev, control);\n  }\n}\n\nfunction tap(that, el, handler, prevent, tolerance, time) {\n  var startX,\n      startY,\n      target,\n      moved,\n      startTime,\n      $ = mobiscroll.$,\n      $elm = $(el);\n  tolerance = tolerance || 9;\n\n  function onStart(ev) {\n    if (!target) {\n      // Can't always call preventDefault here, it kills page scroll\n      // if (prevent) {\n      //     ev.preventDefault();\n      // }\n      target = this;\n      startX = getCoord(ev, 'X');\n      startY = getCoord(ev, 'Y');\n      moved = false;\n      startTime = new Date();\n    }\n  }\n\n  function onMove(ev) {\n    // If movement is more than 20px, don't fire the click event handler\n    if (target && !moved && (Math.abs(getCoord(ev, 'X') - startX) > tolerance || Math.abs(getCoord(ev, 'Y') - startY) > tolerance)) {\n      moved = true;\n    }\n  }\n\n  function onEnd(ev) {\n    if (target) {\n      if (time && new Date() - startTime < 100 || !moved) {\n        // ev.preventDefault();\n        // handler.call(target, ev, that);\n        triggerClick(ev, ev.target);\n      } else {\n        preventClick();\n      }\n\n      target = false;\n    }\n  }\n\n  function onClick(ev) {\n    if (prevent) {\n      ev.preventDefault();\n    } // If handler was not called on touchend, call it on click;\n\n\n    handler.call(this, ev, that);\n  }\n\n  function onCancel() {\n    target = false;\n  }\n\n  $elm.each(function (i, elm) {\n    if (that.settings.tap) {\n      listen(elm, 'touchstart', onStart, {\n        passive: true\n      });\n      listen(elm, 'touchcancel', onCancel);\n      listen(elm, 'touchmove', onMove, {\n        passive: true\n      });\n      listen(elm, 'touchend', onEnd);\n    }\n\n    listen(elm, 'click', onClick);\n\n    elm.__mbscOff = function () {\n      unlisten(elm, 'touchstart', onStart, {\n        passive: true\n      });\n      unlisten(elm, 'touchcancel', onCancel);\n      unlisten(elm, 'touchmove', onMove, {\n        passive: true\n      });\n      unlisten(elm, 'touchend', onEnd);\n      unlisten(elm, 'click', onClick);\n      delete elm.__mbscOff;\n    };\n  });\n}\n\nfunction tapOff($elm) {\n  if ($elm && $elm[0] && $elm[0].__mbscOff) {\n    $elm[0].__mbscOff();\n  }\n} // Prevent standard behaviour on body click\n\n\nfunction bustClick(ev) {\n  // Textarea needs the mousedown event\n  if (tapped && !allowQuick && !ev.isMbscTap && !(ev.target.nodeName == 'TEXTAREA' && ev.type == 'mousedown')) {\n    ev.stopPropagation();\n    ev.preventDefault();\n    return false;\n  }\n}\n\nif (isBrowser) {\n  ['mouseover', 'mousedown', 'mouseup', 'click'].forEach(function (ev) {\n    document.addEventListener(ev, bustClick, true);\n  });\n\n  if (os == 'android' && majorVersion < 5) {\n    document.addEventListener('change', function (ev) {\n      if (tapped && ev.target.type == 'checkbox' && !ev.target.mbscChange) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n\n      delete ev.target.mbscChange;\n    }, true);\n  }\n}\n/*!\r\n * Mobiscroll v4.10.6\r\n * http://mobiscroll.com\r\n *\r\n *\r\n * Copyright 2010-2018, Acid Media\r\n *\r\n */\n\n\nmobiscroll.uid = \"b1ead642\";\n\nfunction getWidth(el) {\n  return el[0].innerWidth || el.innerWidth();\n}\n\nfunction getThemeName(s) {\n  var themeName = s.theme,\n      themeVariant = s.themeVariant;\n\n  if (themeName == 'auto' || !themeName) {\n    themeName = ms.autoTheme;\n  }\n\n  if (themeName == 'default') {\n    themeName = 'mobiscroll';\n  }\n\n  if ((themeVariant === 'dark' || isDark && themeVariant === 'auto') && ms.themes.form[themeName + '-dark']) {\n    themeName = themeName + '-dark';\n  } else if (themeVariant === 'light' && /.+-dark$/.test(themeName)) {\n    themeName = themeName.replace(/-dark$/, '');\n  }\n\n  return themeName;\n}\n\nfunction autoInit(selector, Component, hasRefresh) {\n  if (isBrowser) {\n    $$1(function () {\n      $$1(selector).each(function () {\n        new Component(this, {});\n      });\n      $$1(document).on('mbsc-enhance', function (ev, settings) {\n        if ($$1(ev.target).is(selector)) {\n          new Component(ev.target, settings || {});\n        } else {\n          $$1(selector, ev.target).each(function () {\n            new Component(this, settings || {});\n          });\n        }\n      });\n\n      if (hasRefresh) {\n        $$1(document).on('mbsc-refresh', function (ev) {\n          var inst;\n\n          if ($$1(ev.target).is(selector)) {\n            inst = instances[ev.target.id];\n\n            if (inst) {\n              inst.refresh();\n            }\n          } else {\n            $$1(selector, ev.target).each(function () {\n              inst = instances[this.id];\n\n              if (inst) {\n                inst.refresh();\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n}\n\nvar ms,\n    $$1 = mobiscroll.$,\n    id = +new Date(),\n    instances = {},\n    classes = {},\n    empty = {},\n    breakpoints = {\n  xsmall: 0,\n  small: 576,\n  medium: 768,\n  large: 992,\n  xlarge: 1200\n},\n    extend$1 = $$1.extend;\nextend$1(util, {\n  getCoord: getCoord,\n  preventClick: preventClick,\n  vibrate: vibrate\n});\nms = extend$1(mobiscroll, {\n  $: $$1,\n  version: '4.10.6',\n  autoTheme: 'mobiscroll',\n  themes: {\n    form: {},\n    page: {},\n    frame: {},\n    scroller: {},\n    listview: {},\n    navigation: {},\n    progress: {},\n    card: {}\n  },\n  platform: {\n    name: os,\n    majorVersion: majorVersion,\n    minorVersion: minorVersion\n  },\n  i18n: {},\n  instances: instances,\n  classes: classes,\n  util: util,\n  settings: {},\n  setDefaults: function setDefaults(o) {\n    extend$1(this.settings, o);\n  },\n  customTheme: function customTheme(name, baseTheme) {\n    var i,\n        themes = mobiscroll.themes,\n        comps = ['frame', 'scroller', 'listview', 'navigation', 'form', 'page', 'progress', 'card'];\n\n    for (i = 0; i < comps.length; i++) {\n      themes[comps[i]][name] = extend$1({}, themes[comps[i]][baseTheme], {\n        baseTheme: baseTheme\n      });\n    }\n  }\n});\n\nvar Base = function Base(el, settings) {\n  var ctx,\n      lang,\n      preset,\n      resp,\n      s,\n      theme,\n      themeName,\n      trigger,\n      defaults,\n      that = this;\n  that.settings = {};\n  that.element = el;\n  that._init = noop;\n  that._destroy = noop;\n  that._processSettings = noop;\n\n  that._checkResp = function (width) {\n    if (that && that._responsive) {\n      var newResp = getResponsiveSettings(width);\n\n      if (resp !== newResp) {\n        resp = newResp;\n        that.init({});\n        return true;\n      }\n    }\n  };\n\n  that._getRespCont = function () {\n    return $$1(s.context == 'body' ? window : s.context);\n  };\n\n  that.init = function (newSettings, newValue) {\n    var key, value; // In case of settings update save the old value\n\n    if (newSettings && that.getVal) {\n      value = that.getVal();\n    } // Reset settings object\n\n\n    for (key in that.settings) {\n      delete that.settings[key];\n    }\n\n    s = that.settings; // Update original user settings\n\n    extend$1(settings, newSettings); // Load user defaults\n\n    if (that._hasDef) {\n      defaults = ms.settings;\n    } // Create settings object\n\n\n    extend$1(s, that._defaults, defaults, settings); // Get theme defaults\n\n    if (that._hasTheme) {\n      themeName = getThemeName(s);\n      settings.theme = themeName;\n      theme = ms.themes[that._class] ? ms.themes[that._class][themeName] : {};\n    } // Get language defaults\n\n\n    if (that._hasLang) {\n      lang = ms.i18n[s.lang];\n    } // Update settings object\n\n\n    extend$1(s, theme, lang, defaults, settings);\n    ctx = that._getRespCont();\n\n    if (that._responsive) {\n      if (!resp) {\n        resp = getResponsiveSettings();\n      }\n\n      extend$1(s, resp);\n    }\n\n    that._processSettings(resp || {}); // Load preset settings\n\n\n    if (that._presets) {\n      preset = that._presets[s.preset];\n\n      if (preset) {\n        preset = preset.call(el, that, settings);\n        extend$1(s, preset, settings, resp);\n      }\n    }\n\n    that._init(newSettings); // In case of settings update reset the value.\n    // This is needed to adapt the value for the updated settings\n    // E.g. min/max, date format, etc.\n\n\n    if (newSettings && that.setVal) {\n      that.setVal(newValue === undefined ? value : newValue, true);\n    }\n\n    trigger('onInit');\n  };\n\n  that.destroy = function () {\n    if (that) {\n      that._destroy();\n\n      trigger('onDestroy'); // Delete scroller instance\n\n      delete instances[el.id];\n      that = null;\n    }\n  };\n  /**\r\n   * Attach tap event to the given element.\r\n   */\n\n\n  that.tap = function (el, handler, prevent, tolerance, time) {\n    tap(that, el, handler, prevent, tolerance, time);\n  };\n  /**\r\n   * Triggers an event\r\n   */\n\n\n  that.trigger = function (name, ev) {\n    var ret,\n        i,\n        v,\n        s = [defaults, theme, preset, settings];\n\n    for (i = 0; i < 4; i++) {\n      v = s[i];\n\n      if (v && v[name]) {\n        ret = v[name].call(el, ev || {}, that);\n      }\n    }\n\n    return ret;\n  };\n  /**\r\n   * Sets one ore more options.\r\n   */\n\n\n  that.option = function (opt, value, newValue) {\n    var obj = {},\n        // preserve settings that are possible to change runtime\n    dynamic = ['data', 'invalid', 'valid', 'readonly'];\n\n    if (/calendar|eventcalendar|range/.test(s.preset)) {\n      dynamic.push('marked', 'labels', 'colors');\n    }\n\n    if (typeof opt === 'object') {\n      obj = opt;\n    } else {\n      obj[opt] = value;\n    }\n\n    dynamic.forEach(function (v) {\n      settings[v] = s[v];\n    });\n    that.init(obj, newValue);\n  };\n  /**\r\n   * Returns the mobiscroll instance.\r\n   */\n\n\n  that.getInst = function () {\n    return that;\n  };\n\n  settings = settings || {};\n  trigger = that.trigger;\n\n  function getResponsiveSettings(w) {\n    var result = empty,\n        width;\n\n    if (s.responsive) {\n      width = w || getWidth(ctx);\n      $$1.each(s.responsive, function (key, value) {\n        if (width >= (value.breakpoint || breakpoints[key])) {\n          result = value;\n        }\n      });\n    }\n\n    return result;\n  }\n\n  function construct() {\n    $$1(el).addClass('mbsc-comp'); // Autogenerate id\n\n    if (!el.id) {\n      el.id = 'mobiscroll' + ++id;\n    } else if (instances[el.id]) {\n      instances[el.id].destroy();\n    } // Save instance\n\n\n    instances[el.id] = that;\n    that.__ready = true;\n  }\n\n  if (!that.__ready) {\n    construct();\n  }\n};\n\nvar Observable = function () {\n  function Observable() {\n    this.keyCount = 0;\n    this.subscribers = new Map();\n  }\n\n  Observable.prototype.subscribe = function (handler) {\n    var key = this.keyCount++;\n    this.subscribers.set(key, handler);\n    return key;\n  };\n\n  Observable.prototype.unsubscribe = function (handler) {\n    if (typeof handler === 'number') {\n      this.subscribers.delete(handler);\n    } else {\n      var foundKey_1 = null;\n      this.subscribers.forEach(function (fn, key) {\n        if (fn === handler) {\n          foundKey_1 = key;\n        }\n      });\n      this.subscribers.delete(foundKey_1);\n    }\n  };\n\n  Observable.prototype.next = function (value) {\n    this.subscribers.forEach(function (handler) {\n      handler(value);\n    });\n  };\n\n  return Observable;\n}();\n\nvar MbscRouterToken = function () {\n  function MbscRouterToken() {}\n\n  return MbscRouterToken;\n}();\n\nvar MbscOptionsService = function () {\n  function MbscOptionsService() {}\n\n  Object.defineProperty(MbscOptionsService.prototype, \"options\", {\n    get: function () {\n      return this._options;\n    },\n    set: function (o) {\n      this._options = o;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscOptionsService.ɵfac = function MbscOptionsService_Factory(t) {\n    return new (t || MbscOptionsService)();\n  };\n\n  MbscOptionsService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MbscOptionsService,\n    factory: function (t) {\n      return MbscOptionsService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscOptionsService;\n}();\n\nvar MbscInputService = function () {\n  function MbscInputService() {\n    this._controlSet = false;\n    this._componentRef = undefined;\n  }\n\n  Object.defineProperty(MbscInputService.prototype, \"isControlSet\", {\n    get: function () {\n      return this._controlSet;\n    },\n    set: function (v) {\n      this._controlSet = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscInputService.prototype, \"input\", {\n    get: function () {\n      return this._componentRef;\n    },\n    set: function (v) {\n      this._componentRef = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscInputService.ɵfac = function MbscInputService_Factory(t) {\n    return new (t || MbscInputService)();\n  };\n\n  MbscInputService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MbscInputService,\n    factory: function (t) {\n      return MbscInputService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscInputService;\n}();\n\nvar MbscListService = function () {\n  function MbscListService() {\n    this.addRemoveObservable = new Observable();\n  }\n\n  MbscListService.prototype.notifyAddRemove = function (item) {\n    this.addRemoveObservable.next(item);\n  };\n\n  MbscListService.prototype.onAddRemove = function () {\n    return this.addRemoveObservable;\n  };\n\n  MbscListService.ɵfac = function MbscListService_Factory(t) {\n    return new (t || MbscListService)();\n  };\n\n  MbscListService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MbscListService,\n    factory: function (t) {\n      return MbscListService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscListService;\n}();\n\nvar MbscBase = function () {\n  function MbscBase(initialElem, zone) {\n    this.initialElem = initialElem;\n    this.zone = zone;\n    this.options = {};\n    this.onInit = new EventEmitter();\n    this.onDestroy = new EventEmitter();\n    this.inlineOptionsObj = {};\n    this.pendingValue = undefined;\n    this.themeClassesSet = false;\n    this.instance = null;\n    this.element = null;\n    this.inlineOptionsObj.zone = zone;\n  }\n\n  MbscBase.prototype.getInlineEvents = function () {\n    var _this = this;\n\n    var _loop_1 = function (prop) {\n      if (this_1[prop] instanceof EventEmitter && (!this_1.options || !this_1.options[prop])) {\n        this_1.inlineOptionsObj[prop] = function (event, inst) {\n          event.inst = inst;\n\n          _this[prop].emit(event);\n        };\n      }\n    };\n\n    var this_1 = this;\n\n    for (var prop in this) {\n      _loop_1(prop);\n    }\n  };\n\n  MbscBase.prototype.setThemeClasses = function () {\n    $$1(this.initialElem.nativeElement).addClass(this.getThemeClasses());\n    this.themeClassesSet = true;\n  };\n\n  MbscBase.prototype.clearThemeClasses = function () {\n    $$1(this.initialElem.nativeElement).removeClass(this.getThemeClasses());\n  };\n\n  MbscBase.prototype.getThemeClasses = function () {\n    var s = this.instance.settings;\n    return 'mbsc-control-ng mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : '');\n  };\n\n  MbscBase.prototype.setElement = function () {\n    this.element = this.initialElem.nativeElement;\n    var contentInput = $$1('input', this.initialElem.nativeElement);\n\n    if (contentInput.length) {\n      this.element = contentInput[0];\n    }\n  };\n\n  MbscBase.prototype.ngAfterViewInit = function () {\n    this.setElement();\n    this.startInit();\n  };\n\n  MbscBase.prototype.startInit = function () {\n    var _this = this;\n\n    this.getInlineEvents();\n    var ionInput = this.getIonInput();\n\n    if (ionInput && (ionInput.getInputElement || ionInput.then) && this.element.nodeName !== \"INPUT\") {\n      if (ionInput.getInputElement) {\n        ionInput.getInputElement().then(function (inp) {\n          _this.setElement();\n\n          _this.initControl();\n        });\n      } else {\n        ionInput.then(function (ionInpComponent) {\n          ionInpComponent.getInputElement().then(function (inp) {\n            _this.setElement();\n\n            _this.initControl();\n          });\n        });\n      }\n    } else if (!this.instance) {\n      this.initControl();\n    }\n  };\n\n  MbscBase.prototype.getIonInput = function () {\n    var v = this._view;\n    var native = this.initialElem.nativeElement;\n    var ionInputNode = native.nodeName === \"ION-INPUT\";\n    var inp1 = ionInputNode && v && v._data && v._data.componentView && v._data.componentView.component;\n    var inp2 = ionInputNode && native.componentOnReady && native.componentOnReady();\n    return inp1 || inp2;\n  };\n\n  MbscBase.prototype.initControl = function () {};\n\n  MbscBase.prototype.ngOnDestroy = function () {\n    if (this.instance) {\n      this.instance.destroy();\n    }\n  };\n\n  MbscBase.prototype.updateOptions = function (newOptions, optionChanged, invalidChanged, dataChanged) {\n    var _this = this;\n\n    if (optionChanged || invalidChanged) {\n      setTimeout(function () {\n        if (newOptions.theme && _this.themeClassesSet) {\n          _this.clearThemeClasses();\n        }\n\n        _this.instance.option(newOptions, undefined, _this.pendingValue);\n\n        if (newOptions.theme && _this.themeClassesSet) {\n          _this.setThemeClasses();\n        }\n      });\n    } else if (dataChanged) {\n      this.refreshData(this.data);\n    } else if (this.instance.redraw) {\n      this.instance.redraw();\n    }\n  };\n\n  MbscBase.prototype.ngOnChanges = function (changes) {\n    var optionChange = false,\n        cloneChange = false,\n        invalidChange = false,\n        dataChange = false,\n        newOptions = {};\n\n    for (var prop in changes) {\n      if (!changes[prop].firstChange && prop !== 'options' && prop !== 'value') {\n        if (this.cloneDictionary && this.cloneDictionary[prop]) {\n          this.makeClone(prop, changes[prop].currentValue);\n\n          if (this.instance) {\n            this.instance.settings[prop] = changes[prop].currentValue;\n          }\n\n          if (prop == 'invalid') {\n            invalidChange = true;\n          }\n\n          if (prop == 'data') {\n            dataChange = true;\n          }\n\n          cloneChange = true;\n        } else {\n          newOptions[prop] = changes[prop].currentValue;\n          optionChange = true;\n        }\n      } else if (!changes[prop].firstChange && prop !== 'value') {\n        newOptions = extend$1(changes[prop].currentValue, newOptions);\n        optionChange = true;\n      } else if (changes[prop].firstChange) {\n        if (prop !== 'options' && prop !== 'value') {\n          this.inlineOptionsObj[prop] = changes[prop].currentValue;\n        }\n      }\n    }\n\n    if (cloneChange) {\n      extend$1(newOptions, this.cloneDictionary);\n    }\n\n    if (optionChange || cloneChange) {\n      this.updateOptions(newOptions, optionChange, invalidChange, dataChange);\n    }\n  };\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscBase.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscBase.prototype, \"cssClass\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscBase.prototype, \"theme\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscBase.prototype, \"themeVariant\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscBase.prototype, \"lang\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscBase.prototype, \"rtl\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscBase.prototype, \"responsive\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscBase.prototype, \"onInit\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscBase.prototype, \"onDestroy\", void 0);\n\n  MbscBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone])], MbscBase);\n\n  MbscBase.ɵfac = function MbscBase_Factory(t) {\n    return new (t || MbscBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscBase,\n    selectors: [[\"\", \"mbsc-b\", \"\"]],\n    inputs: {\n      options: [\"mbsc-options\", \"options\"],\n      cssClass: \"cssClass\",\n      theme: \"theme\",\n      themeVariant: \"themeVariant\",\n      lang: \"lang\",\n      rtl: \"rtl\",\n      responsive: \"responsive\"\n    },\n    outputs: {\n      onInit: \"onInit\",\n      onDestroy: \"onDestroy\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscBase;\n}();\n\nvar MbscValueBase = function (_super) {\n  __extends(MbscValueBase, _super);\n\n  function MbscValueBase(initialElem, zone) {\n    var _this = _super.call(this, initialElem, zone) || this;\n\n    _this.initialValue = undefined;\n    return _this;\n  }\n\n  MbscValueBase.prototype.setNewValue = function (v) {};\n\n  MbscValueBase.prototype.setNewValueProxy = function (v) {\n    if (!this.instance) {\n      this.initialValue = v;\n    }\n\n    this.setNewValue(v);\n  };\n\n  MbscValueBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone])], MbscValueBase);\n\n  MbscValueBase.ɵfac = function MbscValueBase_Factory(t) {\n    return new (t || MbscValueBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscValueBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscValueBase,\n    selectors: [[\"\", \"mbsc-v-b\", \"\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscValueBase;\n}(MbscBase);\n\nvar MbscCloneBase = function (_super) {\n  __extends(MbscCloneBase, _super);\n\n  function MbscCloneBase(initElem, zone) {\n    var _this = _super.call(this, initElem, zone) || this;\n\n    _this.cloneDictionary = {};\n    return _this;\n  }\n\n  MbscCloneBase.prototype.makeClone = function (setting, value) {\n    if (value) {\n      this.cloneDictionary[setting] = [];\n\n      for (var i = 0; i < value.length; i++) {\n        this.cloneDictionary[setting].push(value[i]);\n      }\n    } else {\n      this.cloneDictionary[setting] = value;\n    }\n  };\n\n  MbscCloneBase.prototype.ngDoCheck = function () {\n    var changed = false,\n        data = false,\n        invalid = false;\n\n    for (var key in this.cloneDictionary) {\n      if (this[key] !== undefined && !deepEqualsArray(this[key], this.cloneDictionary[key])) {\n        this.makeClone(key, this[key]);\n        this.instance.settings[key] = this[key];\n        changed = true;\n\n        if (key == 'invalid') {\n          invalid = true;\n        }\n\n        if (key == 'data') {\n          data = true;\n        }\n      }\n    }\n\n    if (changed && this.instance) {\n      this.updateOptions(this.cloneDictionary, false, invalid, data);\n    }\n  };\n\n  MbscCloneBase.prototype.ngOnInit = function () {\n    for (var key in this.cloneDictionary) {\n      this.makeClone(key, this[key]);\n    }\n  };\n\n  MbscCloneBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone])], MbscCloneBase);\n\n  MbscCloneBase.ɵfac = function MbscCloneBase_Factory(t) {\n    return new (t || MbscCloneBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscCloneBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscCloneBase,\n    selectors: [[\"\", \"mbsc-c-b\", \"\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCloneBase;\n}(MbscValueBase);\n\nvar MbscControlBase = function (_super) {\n  __extends(MbscControlBase, _super);\n\n  function MbscControlBase(initialElement, zone, control, _inputService, _view) {\n    var _this = _super.call(this, initialElement, zone) || this;\n\n    _this.control = control;\n    _this._inputService = _inputService;\n    _this._view = _view;\n    _this._needsTimeout = true;\n\n    _this.onChange = function () {};\n\n    _this.onTouch = function () {};\n\n    _this.onChangeEmitter = new EventEmitter();\n    _this.oldAccessor = null;\n\n    _this.overwriteAccessor();\n\n    if (_inputService) {\n      _inputService.isControlSet = true;\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(MbscControlBase.prototype, \"optionExtensions\", {\n    get: function () {\n      var _this = this;\n\n      var externalOnClose = this.options && this.options.onClose;\n      var externalOnFill = this.options && this.options.onFill;\n      var onCloseEmitter = this.onClose;\n      return {\n        onFill: function (event, inst) {\n          if (_this.oldAccessor) {\n            _this.oldAccessor.writeValue(event.valueText);\n          } else {\n            var ionInput = _this.getIonInput();\n\n            if (ionInput) {\n              ionInput.value = event.valueText;\n            }\n          }\n\n          if (externalOnFill) {\n            externalOnFill(event, inst);\n          }\n        },\n        onClose: function (event, inst) {\n          _this.onTouch();\n\n          if (externalOnClose) {\n            externalOnClose(event, inst);\n          }\n\n          if (onCloseEmitter) {\n            event.inst = inst;\n            onCloseEmitter.emit(event);\n          }\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscControlBase.prototype, \"enableManualEdit\", {\n    get: function () {\n      var nsf = this.showOnFocus === false || this.options.showOnFocus === false,\n          nst = this.showOnTap === false || this.options.showOnTap === false;\n      return nsf && nst;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscControlBase.prototype.handleChange = function (element) {\n    var that = this;\n    $$1(element || this.element).on('change', function () {\n      that.zone.run(function () {\n        if (that.element.value !== that.instance._value && that.enableManualEdit) {\n          that.instance.setVal(that.element.value, true, true);\n        } else {\n          var value = that.instance.getVal();\n\n          if (that.control) {\n            if (!valueEquals(value, that.control.model)) {\n              that.onChange(value);\n              that.control.control.patchValue(value);\n            }\n          } else {\n            that.onChangeEmitter.emit(value);\n          }\n        }\n      });\n    });\n\n    function valueEquals(v1, v2) {\n      if (v1 === v2) {\n        return true;\n      }\n\n      if (v1 instanceof Date && v2 instanceof Date) {\n        return +v1 === +v2;\n      }\n\n      return false;\n    }\n  };\n\n  MbscControlBase.prototype.overwriteAccessor = function () {\n    if (this.control) {\n      if (this.control.valueAccessor !== this) {\n        this.oldAccessor = this.control.valueAccessor;\n      }\n\n      this.control.valueAccessor = this;\n    }\n  };\n\n  MbscControlBase.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.handleChange();\n    this.overwriteAccessor();\n\n    if (this.control && this.control._setUpControl) {\n      this.control._setUpControl();\n    }\n  };\n\n  MbscControlBase.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  MbscControlBase.prototype.registerOnTouched = function (fn) {\n    this.onTouch = fn;\n  };\n\n  MbscControlBase.prototype.setDisabledState = function (isDisabled) {\n    this.disabled = isDisabled;\n\n    if (this.oldAccessor && this.oldAccessor.setDisabledState) {\n      this.oldAccessor.setDisabledState(isDisabled);\n    }\n\n    if (this.instance && this.instance.disable && this.instance.enable) {\n      if (isDisabled) {\n        this.instance.disable();\n      } else {\n        this.instance.enable();\n      }\n    }\n  };\n\n  MbscControlBase.prototype.writeValue = function (v) {\n    var _this = this;\n\n    if (this._needsTimeout) {\n      this.pendingValue = v;\n      setTimeout(function () {\n        _this.pendingValue = undefined;\n\n        _this.setNewValueProxy(v);\n      });\n    } else {\n      this.setNewValueProxy(v);\n    }\n  };\n\n  __decorate([Input$1('label-style'), __metadata(\"design:type\", String)], MbscControlBase.prototype, \"labelStyle\", void 0);\n\n  __decorate([Input$1('input-style'), __metadata(\"design:type\", String)], MbscControlBase.prototype, \"inputStyle\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscControlBase.prototype, \"showOnFocus\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscControlBase.prototype, \"showOnTap\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscControlBase.prototype, \"disabled\", void 0);\n\n  MbscControlBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, ViewContainerRef])], MbscControlBase);\n\n  MbscControlBase.ɵfac = function MbscControlBase_Factory(t) {\n    return new (t || MbscControlBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscControlBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscControlBase,\n    selectors: [[\"\", \"mbsc-cc-b\", \"\"]],\n    inputs: {\n      disabled: \"disabled\",\n      labelStyle: [\"label-style\", \"labelStyle\"],\n      inputStyle: [\"input-style\", \"inputStyle\"],\n      showOnFocus: \"showOnFocus\",\n      showOnTap: \"showOnTap\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscControlBase;\n}(MbscCloneBase);\n\nvar MbscFrameBase = function (_super) {\n  __extends(MbscFrameBase, _super);\n\n  function MbscFrameBase(initialElem, zone, control, _inputService, view) {\n    var _this = _super.call(this, initialElem, zone, control, _inputService, view) || this;\n\n    _this.onBeforeClose = new EventEmitter();\n    _this.onBeforeShow = new EventEmitter();\n    _this.onCancel = new EventEmitter();\n    _this.onClose = new EventEmitter();\n    _this.onFill = new EventEmitter();\n    _this.onMarkupReady = new EventEmitter();\n    _this.onPosition = new EventEmitter();\n    _this.onShow = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscFrameBase.prototype, \"inline\", {\n    get: function () {\n      return (this.display || this.options && this.options.display) === 'inline';\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscFrameBase.prototype.ngOnInit = function () {\n    this.cloneDictionary.invalid = [];\n    this.cloneDictionary.valid = [];\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscFrameBase.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscFrameBase.prototype, \"dropdown\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscFrameBase.prototype, \"anchor\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscFrameBase.prototype, \"animate\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscFrameBase.prototype, \"buttons\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscFrameBase.prototype, \"closeOnOverlayTap\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscFrameBase.prototype, \"context\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscFrameBase.prototype, \"display\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscFrameBase.prototype, \"showInput\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscFrameBase.prototype, \"focusOnClose\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscFrameBase.prototype, \"focusTrap\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscFrameBase.prototype, \"headerText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscFrameBase.prototype, \"scrollLock\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscFrameBase.prototype, \"touchUi\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscFrameBase.prototype, \"onBeforeClose\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscFrameBase.prototype, \"onBeforeShow\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscFrameBase.prototype, \"onCancel\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscFrameBase.prototype, \"onClose\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscFrameBase.prototype, \"onFill\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscFrameBase.prototype, \"onMarkupReady\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscFrameBase.prototype, \"onPosition\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscFrameBase.prototype, \"onShow\", void 0);\n\n  MbscFrameBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, ViewContainerRef])], MbscFrameBase);\n\n  MbscFrameBase.ɵfac = function MbscFrameBase_Factory(t) {\n    return new (t || MbscFrameBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscFrameBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscFrameBase,\n    selectors: [[\"\", \"mbsc-fr-b\", \"\"]],\n    inputs: {\n      options: \"options\",\n      dropdown: \"dropdown\",\n      anchor: \"anchor\",\n      animate: \"animate\",\n      buttons: \"buttons\",\n      closeOnOverlayTap: \"closeOnOverlayTap\",\n      context: \"context\",\n      display: \"display\",\n      showInput: \"showInput\",\n      focusOnClose: \"focusOnClose\",\n      focusTrap: \"focusTrap\",\n      headerText: \"headerText\",\n      scrollLock: \"scrollLock\",\n      touchUi: \"touchUi\"\n    },\n    outputs: {\n      onBeforeClose: \"onBeforeClose\",\n      onBeforeShow: \"onBeforeShow\",\n      onCancel: \"onCancel\",\n      onClose: \"onClose\",\n      onFill: \"onFill\",\n      onMarkupReady: \"onMarkupReady\",\n      onPosition: \"onPosition\",\n      onShow: \"onShow\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscFrameBase;\n}(MbscControlBase);\n\nvar MbscScrollerBase = function (_super) {\n  __extends(MbscScrollerBase, _super);\n\n  function MbscScrollerBase(initialElement, zone, control, _inputService, view) {\n    var _this = _super.call(this, initialElement, zone, control, _inputService, view) || this;\n\n    _this.onWheelChange = new EventEmitter();\n    _this.onSet = new EventEmitter();\n    _this.onItemTap = new EventEmitter();\n    _this.onClear = new EventEmitter();\n    return _this;\n  }\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscScrollerBase.prototype, \"circular\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscScrollerBase.prototype, \"height\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscScrollerBase.prototype, \"layout\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscScrollerBase.prototype, \"maxWidth\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscScrollerBase.prototype, \"minWidth\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscScrollerBase.prototype, \"multiline\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscScrollerBase.prototype, \"readonly\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscScrollerBase.prototype, \"rows\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscScrollerBase.prototype, \"showLabel\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscScrollerBase.prototype, \"showScrollArrows\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscScrollerBase.prototype, \"wheels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscScrollerBase.prototype, \"width\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Function)], MbscScrollerBase.prototype, \"validate\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscScrollerBase.prototype, \"cancelText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscScrollerBase.prototype, \"clearText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscScrollerBase.prototype, \"selectedText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscScrollerBase.prototype, \"setText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Function)], MbscScrollerBase.prototype, \"formatValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Function)], MbscScrollerBase.prototype, \"parseValue\", void 0);\n\n  __decorate([Output('onChange'), __metadata(\"design:type\", EventEmitter)], MbscScrollerBase.prototype, \"onWheelChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscScrollerBase.prototype, \"onSet\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscScrollerBase.prototype, \"onItemTap\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscScrollerBase.prototype, \"onClear\", void 0);\n\n  MbscScrollerBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, ViewContainerRef])], MbscScrollerBase);\n\n  MbscScrollerBase.ɵfac = function MbscScrollerBase_Factory(t) {\n    return new (t || MbscScrollerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscScrollerBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscScrollerBase,\n    selectors: [[\"\", \"mbsc-s-b\", \"\"]],\n    inputs: {\n      circular: \"circular\",\n      height: \"height\",\n      layout: \"layout\",\n      maxWidth: \"maxWidth\",\n      minWidth: \"minWidth\",\n      multiline: \"multiline\",\n      readonly: \"readonly\",\n      rows: \"rows\",\n      showLabel: \"showLabel\",\n      showScrollArrows: \"showScrollArrows\",\n      wheels: \"wheels\",\n      width: \"width\",\n      validate: \"validate\",\n      cancelText: \"cancelText\",\n      clearText: \"clearText\",\n      selectedText: \"selectedText\",\n      setText: \"setText\",\n      formatValue: \"formatValue\",\n      parseValue: \"parseValue\"\n    },\n    outputs: {\n      onWheelChange: \"onChange\",\n      onSet: \"onSet\",\n      onItemTap: \"onItemTap\",\n      onClear: \"onClear\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscScrollerBase;\n}(MbscFrameBase);\n\nvar MbscBaseModule = function () {\n  function MbscBaseModule() {}\n\n  MbscBaseModule.ɵfac = function MbscBaseModule_Factory(t) {\n    return new (t || MbscBaseModule)();\n  };\n\n  MbscBaseModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscBaseModule\n  });\n  MbscBaseModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscBaseModule, {\n      declarations: function () {\n        return [MbscBase, MbscValueBase, MbscCloneBase, MbscControlBase];\n      },\n      imports: function () {\n        return [CommonModule];\n      }\n    });\n  })();\n\n  return MbscBaseModule;\n}();\n\nvar MbscFrameBaseModule = function () {\n  function MbscFrameBaseModule() {}\n\n  MbscFrameBaseModule.ɵfac = function MbscFrameBaseModule_Factory(t) {\n    return new (t || MbscFrameBaseModule)();\n  };\n\n  MbscFrameBaseModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscFrameBaseModule\n  });\n  MbscFrameBaseModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscFrameBaseModule, {\n      declarations: function () {\n        return [MbscFrameBase];\n      },\n      imports: function () {\n        return [CommonModule, MbscBaseModule];\n      }\n    });\n  })();\n\n  return MbscFrameBaseModule;\n}();\n\nvar MbscScrollerBaseModule = function () {\n  function MbscScrollerBaseModule() {}\n\n  MbscScrollerBaseModule.ɵfac = function MbscScrollerBaseModule_Factory(t) {\n    return new (t || MbscScrollerBaseModule)();\n  };\n\n  MbscScrollerBaseModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscScrollerBaseModule\n  });\n  MbscScrollerBaseModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscFrameBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscScrollerBaseModule, {\n      declarations: function () {\n        return [MbscScrollerBase];\n      },\n      imports: function () {\n        return [CommonModule, MbscFrameBaseModule];\n      }\n    });\n  })();\n\n  return MbscScrollerBaseModule;\n}();\n\nfunction deepEqualsArray(a1, a2) {\n  if (a1 === a2) {\n    return true;\n  } else if (!a1 || !a2 || a1.length !== a2.length) {\n    return false;\n  } else {\n    for (var i = 0; i < a1.length; i++) {\n      if (a1[i] !== a2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nfunction isDateEqual(d1, d2) {\n  if (d1 && !d2 || d2 && !d1) {\n    return false;\n  } else if (!d1 && !d2) {\n    return true;\n  } else {\n    return d1 && d2 && d1.toString() === d2.toString();\n  }\n}\n\nfunction emptyOrTrue(val) {\n  return typeof val === 'string' && (val === 'true' || val === '') || !!val;\n}\n\nvar INPUT_TEMPLATE = \"<mbsc-input *ngIf=\\\"!inline || showInput\\\"\\n    [controlNg]=\\\"false\\\" [name]=\\\"name\\\" [theme]=\\\"theme\\\" [themeVariant]=\\\"themeVariant\\\" [label-style]=\\\"labelStyle\\\" [input-style]=\\\"inputStyle\\\" [disabled]=\\\"disabled\\\" [dropdown]=\\\"dropdown\\\" [placeholder]=\\\"placeholder\\\"\\n    [error]=\\\"error\\\" [errorMessage]=\\\"errorMessage\\\"\\n    [icon]=\\\"inputIcon\\\" [icon-align]=\\\"iconAlign\\\">\\n    <ng-content></ng-content>\\n</mbsc-input>\";\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar wrapClass = 'mbsc-input-wrap';\nvar events = ['touchend', 'touchcancel', 'mousedown', 'mousemove', 'mouseup', 'mouseleave'];\nvar defaults = {\n  tap: hasGhostClick\n};\nvar $active;\n\nfunction addIcon($control, ic) {\n  var icons = {},\n      control = $control[0],\n      $parent = $control.parent(),\n      errorMsg = $parent.find('.mbsc-err-msg'),\n      align = $control.attr('data-icon-align') || 'left',\n      icon = $control.attr('data-icon');\n\n  if ($parent.hasClass(wrapClass)) {\n    $parent = $parent.parent();\n  } else {\n    // Wrap input\n    $$1('<span class=\"' + wrapClass + '\"></span>').insertAfter($control).append($control);\n  }\n\n  if (errorMsg) {\n    $parent.find('.' + wrapClass).append(errorMsg);\n  }\n\n  if (icon) {\n    if (icon.indexOf('{') !== -1) {\n      icons = JSON.parse(icon);\n    } else {\n      icons[align] = icon;\n    }\n  }\n\n  if (control.type == 'file') {\n    // Set icon\n    icons.right = $control.attr('data-icon-upload') || 'upload';\n  }\n\n  if (icon || ic) {\n    extend$1(icons, ic);\n    $parent.addClass((icons.right ? 'mbsc-ic-right ' : '') + (icons.left ? ' mbsc-ic-left' : '')).find('.' + wrapClass).append('<span class=\"mbsc-input-fill\"></span>').append(icons.left ? '<span class=\"mbsc-input-ic mbsc-left-ic mbsc-ic mbsc-ic-' + icons.left + '\"></span>' : '').append(icons.right ? '<span class=\"mbsc-input-ic mbsc-right-ic mbsc-ic mbsc-ic-' + icons.right + '\"></span>' : '');\n  }\n}\n\nfunction addIconToggle(that, $parent, $control) {\n  var icons = {},\n      control = $control[0],\n      toggle = $control.attr('data-password-toggle'),\n      iconShow = $control.attr('data-icon-show') || 'eye',\n      iconHide = $control.attr('data-icon-hide') || 'eye-blocked';\n\n  if (toggle) {\n    icons.right = control.type == 'password' ? iconShow : iconHide;\n  }\n\n  addIcon($control, icons);\n\n  if (toggle) {\n    tap(that, $parent.find('.mbsc-right-ic').addClass('mbsc-input-toggle'), function () {\n      if (control.type == \"text\") {\n        control.type = \"password\";\n        $$1(this).addClass('mbsc-ic-' + iconShow).removeClass('mbsc-ic-' + iconHide);\n      } else {\n        control.type = \"text\";\n        $$1(this).removeClass('mbsc-ic-' + iconShow).addClass('mbsc-ic-' + iconHide);\n      }\n    });\n  }\n}\n\nfunction wrapLabel($parent, type, inputStyle, labelStyle, elm) {\n  // Wrap non-empty text nodes in span with mbsc-label class\n  if (type == 'segmented') {\n    $parent.closest('.mbsc-segmented').addClass(inputStyle == 'box' ? 'mbsc-input-box' : '').addClass(inputStyle == 'outline' ? 'mbsc-input-outline' : '');\n  } else if (type != 'button' && type != 'submit') {\n    $parent.addClass('mbsc-control-w').addClass(inputStyle == 'box' ? 'mbsc-input-box' : '').addClass(inputStyle == 'outline' ? 'mbsc-input-outline' : '').addClass(labelStyle == 'inline' ? 'mbsc-label-inline' : '').addClass(labelStyle == 'stacked' ? 'mbsc-label-stacked' : '').addClass(labelStyle == 'floating' ? 'mbsc-label-floating' : '').addClass(labelStyle == 'floating' && elm.value ? 'mbsc-label-floating-active' : '').find('label').addClass('mbsc-label').each(function (i, v) {\n      $$1(v).attr('title', $$1(v).text());\n    });\n    $parent.contents().filter(function () {\n      return this.nodeType == 3 && this.nodeValue && /\\S/.test(this.nodeValue);\n    }).each(function () {\n      $$1('<span class=\"mbsc-label\" title=\"' + this.textContent.trim() + '\"></span>').insertAfter(this).append(this);\n    });\n  }\n}\n\nfunction getRipple(theme) {\n  var ripple = mobiscroll.themes.form[theme];\n  return ripple && ripple.addRipple ? ripple : null;\n}\n\nfunction getAttr($elm, attr, def) {\n  var v = $elm.attr(attr);\n  return v === undefined || v === '' ? def : v;\n}\n\nfunction getCssClass(s) {\n  var theme = getThemeName(s);\n  var baseTheme = mobiscroll.themes.form[theme].baseTheme;\n  return 'mbsc-' + theme + (baseTheme ? ' mbsc-' + baseTheme : '') + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr');\n}\n\nvar FormControl = /*#__PURE__*/function () {\n  function FormControl(elm, settings) {\n    var _this = this;\n\n    var s = extend$1({}, defaults, mobiscroll.settings, settings);\n    var $elm = $$1(elm);\n    var $p = $elm.parent();\n    var $parent = $p.hasClass('mbsc-input-wrap') ? $p.parent() : $p; // Check for inline mobiscroll components\n\n    var $frame = $elm.next().hasClass('mbsc-fr') ? $elm.next() : null;\n    var type = getControlType($elm);\n    var inputStyle = getAttr($elm, 'data-input-style', s.inputStyle);\n    var labelStyle = getAttr($elm, 'data-label-style', s.labelStyle);\n\n    if (elm.mbscInst) {\n      elm.mbscInst.destroy();\n    }\n\n    if ($frame) {\n      $frame.insertAfter($parent);\n    }\n\n    s.theme = getThemeName(s);\n\n    if (s.rtl === undefined && s.lang && mobiscroll.i18n[s.lang]) {\n      s.rtl = mobiscroll.i18n[s.lang].rtl;\n    }\n\n    wrapLabel($parent, type, inputStyle, labelStyle, elm);\n    $elm.addClass('mbsc-control'); // Attach events\n\n    this._handle = this._handle.bind(this); // Prevent 300ms click latency\n\n    events.forEach(function (ev) {\n      $elm.on(ev, _this._handle);\n    }); // Touch events are added separately, needs to be passive listener\n\n    listen(elm, 'touchstart', this._handle, {\n      passive: true\n    });\n    listen(elm, 'touchmove', this._handle, {\n      passive: true\n    });\n    this.settings = s;\n    this._type = type;\n    this._elm = elm;\n    this._$elm = $elm;\n    this._$parent = $parent;\n    this._$frame = $frame;\n    this._ripple = getRipple(s.theme);\n    this._isFloating = labelStyle == 'floating' || $parent.hasClass('mbsc-label-floating');\n    this.cssClass = getCssClass(s);\n    this.getClassElm().addClass(this.cssClass);\n    elm.mbscInst = this;\n  }\n\n  var _proto = FormControl.prototype;\n\n  _proto.getClassElm = function getClassElm() {\n    return this._$parent;\n  };\n\n  _proto.destroy = function destroy() {\n    var _this2 = this;\n\n    var $elm = this._$elm;\n    var elm = this._elm;\n    $elm.removeClass('mbsc-control');\n    this.getClassElm().removeClass(this.cssClass);\n    events.forEach(function (ev) {\n      $elm.off(ev, _this2._handle);\n    });\n    unlisten(elm, 'touchstart', this._handle, {\n      passive: true\n    });\n    unlisten(elm, 'touchmove', this._handle, {\n      passive: true\n    });\n    delete elm.mbscInst;\n  };\n\n  _proto.option = function option(s) {\n    extend$1(this.settings, s);\n    var classElm = this.getClassElm();\n\n    if (this.cssClass) {\n      classElm.removeClass(this.cssClass);\n    }\n\n    this.cssClass = getCssClass(this.settings);\n    classElm.addClass(this.cssClass);\n    this._ripple = getRipple(this.settings.theme);\n  };\n\n  _proto._handle = function _handle(ev) {\n    switch (ev.type) {\n      case 'touchstart':\n      case 'mousedown':\n        this._onStart(ev);\n\n        break;\n\n      case 'touchmove':\n      case 'mousemove':\n        this._onMove(ev);\n\n        break;\n\n      case 'touchend':\n      case 'touchcancel':\n      case 'mouseup':\n      case 'mouseleave':\n        this._onEnd(ev);\n\n        break;\n    }\n  };\n\n  _proto._addRipple = function _addRipple(ev) {\n    if (this._ripple && this._$rippleElm) {\n      this._ripple.addRipple(this._$rippleElm, ev);\n    }\n  };\n\n  _proto._removeRipple = function _removeRipple() {\n    if (this._ripple && this._$rippleElm) {\n      this._ripple.removeRipple();\n    }\n  };\n\n  _proto._onStart = function _onStart(ev) {\n    var elm = this._elm;\n\n    if (testTouch(ev, elm)) {\n      this._startX = getCoord(ev, 'X');\n      this._startY = getCoord(ev, 'Y');\n\n      if ($active) {\n        $active.removeClass('mbsc-active');\n      }\n\n      if (!elm.disabled) {\n        this._isActive = true;\n        $active = this._$elm;\n        $active.addClass('mbsc-active');\n\n        this._addRipple(ev);\n      }\n    }\n\n    if (ev.type == 'touchstart') {\n      this._$elm.closest('.mbsc-no-touch').removeClass('mbsc-no-touch');\n    }\n  };\n\n  _proto._onMove = function _onMove(ev) {\n    // If movement is more than 9px, don't fire the click event handler\n    if (this._isActive && Math.abs(getCoord(ev, 'X') - this._startX) > 9 || Math.abs(getCoord(ev, 'Y') - this._startY) > 9) {\n      this._$elm.removeClass('mbsc-active');\n\n      this._removeRipple();\n\n      this._isActive = false;\n    }\n  };\n\n  _proto._onEnd = function _onEnd(ev) {\n    var _this3 = this;\n\n    var control = this._elm;\n    var type = this._type;\n\n    if (this._isActive && this.settings.tap && ev.type == 'touchend' && !control.readOnly) {\n      activateControl(control, type, ev);\n    }\n\n    if (this._isActive) {\n      setTimeout(function () {\n        _this3._$elm.removeClass('mbsc-active');\n\n        _this3._removeRipple();\n      }, 100);\n    }\n\n    this._isActive = false;\n    $active = null;\n  };\n\n  return FormControl;\n}();\n\nmobiscroll.themes.form.mobiscroll = {};\nvar events$1 = ['focus', 'change', 'blur', 'animationstart'];\n\nvar Input = /*#__PURE__*/function (_FormControl) {\n  _inheritsLoose(Input, _FormControl);\n\n  function Input(elm, settings) {\n    var _this;\n\n    _this = _FormControl.call(this, elm, settings) || this;\n    var $elm = _this._$elm;\n    var $parent = _this._$parent;\n    var $dummy = $parent.find('.mbsc-select-input, .mbsc-color-input');\n    addIconToggle(_assertThisInitialized(_this), $parent, $elm);\n    _this._checkLabel = _this._checkLabel.bind(_assertThisInitialized(_this));\n    _this._mouseDown = _this._mouseDown.bind(_assertThisInitialized(_this));\n    _this._setText = _this._setText.bind(_assertThisInitialized(_this));\n\n    if (elm.type == 'file') {\n      // Copy attributes and create dummy input\n      var $existing = $parent.find('.mbsc-file-input');\n      _this._$input = $existing.length ? $existing : $$1('<input type=\"text\" class=\"' + ($elm.attr('class') || '') + ' mbsc-file-input\" placeholder=\"' + ($elm.attr('placeholder') || '') + '\"/>').insertAfter($elm); // Copy value on file upload\n\n      $elm.on('change', _this._setText);\n    }\n\n    $parent.addClass('mbsc-input').on('mousedown', _this._mouseDown); // Attach events\n\n    events$1.forEach(function (ev) {\n      $elm.on(ev, _this._checkLabel);\n    }); // Move the dummy input after the element for correct styling\n\n    if ($dummy.length) {\n      $elm.after($dummy);\n\n      if ($dummy.hasClass('mbsc-select-input')) {\n        _this._delm = $dummy[0];\n\n        _this.refresh();\n      }\n    }\n\n    return _this;\n  }\n\n  var _proto = Input.prototype;\n\n  _proto._setText = function _setText(ev) {\n    var files = ev.target.files;\n    var names = [];\n\n    for (var i = 0; i < files.length; ++i) {\n      names.push(files[i].name);\n    }\n\n    this._$input.val(names);\n  };\n\n  _proto._checkLabel = function _checkLabel(ev) {\n    if (this._isFloating) {\n      // In case of select we need to check the dummy element\n      var elm = this._delm || this._elm; // In case of autofill in webkit browsers the animationstart event will fire \n      // due to the empty animation added in the css,\n      // because there's no other event in case of the initial autofill\n\n      if (elm.value || document.activeElement === elm || ev && (ev.type == 'focus' || ev.type == 'animationstart' && this._$elm.is('*:-webkit-autofill'))) {\n        this._$parent.addClass('mbsc-label-floating-active');\n      } else {\n        this._$parent.removeClass('mbsc-label-floating-active');\n      }\n    }\n  };\n\n  _proto._mouseDown = function _mouseDown(ev) {\n    // Will prevent floating label animation when loosing focus only for a brief moment\n    if (document.activeElement === this._elm && ev.target !== this._elm) {\n      ev.preventDefault();\n    }\n  };\n\n  _proto.refresh = function refresh() {\n    this._checkLabel();\n  };\n\n  _proto.destroy = function destroy() {\n    var _this2 = this;\n\n    _FormControl.prototype.destroy.call(this);\n\n    this._$parent.off('mousedown', this._mouseDown).removeClass('mbsc-ic-left mbsc-ic-right').find('.mbsc-input-ic').remove();\n\n    this._$parent.find('.mbsc-input-fill').remove();\n\n    events$1.forEach(function (ev) {\n      _this2._$elm.off(ev, _this2._checkLabel);\n    });\n\n    this._$elm.off('change', this._setText);\n  };\n\n  return Input;\n}(FormControl); // Init mbsc-input elements on page load\n\n\nautoInit('[mbsc-input]', Input);\n\nvar MbscFormBase = function (_super) {\n  __extends(MbscFormBase, _super);\n\n  function MbscFormBase(hostElem, _formService, zone) {\n    var _this = _super.call(this, hostElem, zone) || this;\n\n    _this._formService = _formService;\n    _this.disabled = false;\n    return _this;\n  }\n\n  MbscFormBase.prototype.ngOnInit = function () {\n    this._inheritedOptions = this._formService ? this._formService.options : {};\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscFormBase.prototype, \"color\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscFormBase.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscFormBase.prototype, \"disabled\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscFormBase.prototype, \"name\", void 0);\n\n  __decorate([ViewChild('initElement', {\n    static: false\n  }), __metadata(\"design:type\", ElementRef)], MbscFormBase.prototype, \"_initElem\", void 0);\n\n  MbscFormBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, NgZone])], MbscFormBase);\n\n  MbscFormBase.ɵfac = function MbscFormBase_Factory(t) {\n    return new (t || MbscFormBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscFormBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscFormBase,\n    selectors: [[\"\", \"mbsc-f-b\", \"\"]],\n    viewQuery: function MbscFormBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._initElem = _t.first);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      options: \"options\",\n      disabled: \"disabled\",\n      name: \"name\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscFormBase;\n}(MbscBase);\n\nvar MbscFormValueBase = function (_super) {\n  __extends(MbscFormValueBase, _super);\n\n  function MbscFormValueBase(hostElem, _formService, _inputService, _control, zone) {\n    var _this = _super.call(this, hostElem, _formService, zone) || this;\n\n    _this._control = _control;\n\n    _this.onChange = function () {};\n\n    _this.onTouch = function () {};\n\n    _this.errorMessage = '';\n    _this.valueChangeEmitter = new EventEmitter();\n\n    if (_control && (!_inputService || !_inputService.isControlSet)) {\n      if (_control.valueAccessor && _control.valueAccessor.oldAccessor !== undefined) {\n        _control.valueAccessor.oldAccessor = _this;\n      } else {\n        _control.valueAccessor = _this;\n      }\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(MbscFormValueBase.prototype, \"readonly\", {\n    set: function (val) {\n      this._readonly = emptyOrTrue(val);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscFormValueBase.prototype, \"innerValue\", {\n    get: function () {\n      return this._value;\n    },\n    set: function (v) {\n      this._value = v;\n      this.onChange(v);\n      this.valueChangeEmitter.emit(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscFormValueBase.prototype, \"value\", {\n    set: function (v) {\n      this._value = v;\n      this.refresh();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscFormValueBase.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  MbscFormValueBase.prototype.registerOnTouched = function (fn) {\n    this.onTouch = fn;\n  };\n\n  MbscFormValueBase.prototype.setDisabledState = function (isDisabled) {\n    this.disabled = isDisabled;\n  };\n\n  MbscFormValueBase.prototype.writeValue = function (v) {\n    this._value = v;\n    this.refresh();\n  };\n\n  MbscFormValueBase.prototype.refresh = function () {\n    var _this = this;\n\n    if (this.instance && this.instance.refresh) {\n      setTimeout(function () {\n        _this.instance.refresh();\n      });\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscFormValueBase.prototype, \"readonly\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscFormValueBase.prototype, \"value\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscFormValueBase.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscFormValueBase.prototype, \"errorMessage\", void 0);\n\n  __decorate([Output('valueChange'), __metadata(\"design:type\", EventEmitter)], MbscFormValueBase.prototype, \"valueChangeEmitter\", void 0);\n\n  MbscFormValueBase = __decorate([__param(1, Optional()), __param(2, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscInputService, NgControl, NgZone])], MbscFormValueBase);\n\n  MbscFormValueBase.ɵfac = function MbscFormValueBase_Factory(t) {\n    return new (t || MbscFormValueBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscFormValueBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscFormValueBase,\n    selectors: [[\"\", \"mbsc-fv-b\", \"\"]],\n    inputs: {\n      readonly: \"readonly\",\n      value: \"value\",\n      error: \"error\",\n      errorMessage: \"errorMessage\"\n    },\n    outputs: {\n      valueChangeEmitter: \"valueChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscFormValueBase;\n}(MbscFormBase);\n\nvar MbscInputBase = function (_super) {\n  __extends(MbscInputBase, _super);\n\n  function MbscInputBase(initialElem, _formService, _inputService, _control, zone) {\n    var _this = _super.call(this, initialElem, _formService, _inputService, _control, zone) || this;\n\n    _this.type = 'text';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"autocomplete\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"autocapitalize\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"autocorrect\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"spellcheck\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"autofocus\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscInputBase.prototype, \"minlength\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscInputBase.prototype, \"maxlength\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"required\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"icon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"type\", void 0);\n\n  __decorate([Input$1('password-toggle'), __metadata(\"design:type\", Boolean)], MbscInputBase.prototype, \"passwordToggle\", void 0);\n\n  __decorate([Input$1('icon-show'), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"iconShow\", void 0);\n\n  __decorate([Input$1('icon-hide'), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"iconHide\", void 0);\n\n  __decorate([Input$1('icon-upload'), __metadata(\"design:type\", Boolean)], MbscInputBase.prototype, \"iconUpload\", void 0);\n\n  __decorate([Input$1('input-style'), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"inputStyle\", void 0);\n\n  __decorate([Input$1('label-style'), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"labelStyle\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInputBase.prototype, \"placeholder\", void 0);\n\n  MbscInputBase = __decorate([__param(1, Optional()), __param(2, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscInputService, NgControl, NgZone])], MbscInputBase);\n\n  MbscInputBase.ɵfac = function MbscInputBase_Factory(t) {\n    return new (t || MbscInputBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscInputBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscInputBase,\n    selectors: [[\"\", \"mbsc-i-b\", \"\"]],\n    inputs: {\n      autocomplete: \"autocomplete\",\n      autocapitalize: \"autocapitalize\",\n      autocorrect: \"autocorrect\",\n      spellcheck: \"spellcheck\",\n      autofocus: \"autofocus\",\n      minlength: \"minlength\",\n      maxlength: \"maxlength\",\n      required: \"required\",\n      icon: \"icon\",\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      type: \"type\",\n      passwordToggle: [\"password-toggle\", \"passwordToggle\"],\n      iconShow: [\"icon-show\", \"iconShow\"],\n      iconHide: [\"icon-hide\", \"iconHide\"],\n      iconUpload: [\"icon-upload\", \"iconUpload\"],\n      inputStyle: [\"input-style\", \"inputStyle\"],\n      labelStyle: [\"label-style\", \"labelStyle\"],\n      placeholder: \"placeholder\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscInputBase;\n}(MbscFormValueBase);\n\nvar MbscInput = function (_super) {\n  __extends(MbscInput, _super);\n\n  function MbscInput(initialElem, _formService, _inputService, _control, zone) {\n    var _this = _super.call(this, initialElem, _formService, _inputService, _control, zone) || this;\n\n    _this._inputService = _inputService;\n    _this.controlNg = true;\n    _this.dropdown = false;\n    _inputService.input = _this;\n    return _this;\n  }\n\n  MbscInput.prototype.initControl = function () {\n    var _this = this;\n\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new Input(this._initElem.nativeElement, options);\n    setTimeout(function () {\n      _this.instance.refresh();\n    });\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscInput.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscInput.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscInput.prototype, \"step\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInput.prototype, \"pattern\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInput.prototype, \"accept\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscInput.prototype, \"multiple\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscInput.prototype, \"controlNg\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscInput.prototype, \"dropdown\", void 0);\n\n  MbscInput = __decorate([__param(1, Optional()), __param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscInputService, NgControl, NgZone])], MbscInput);\n\n  MbscInput.ɵfac = function MbscInput_Factory(t) {\n    return new (t || MbscInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscInput.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscInput,\n    selectors: [[\"mbsc-input\"]],\n    hostVars: 4,\n    hostBindings: function MbscInput_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mbsc-control-ng\", ctx.controlNg)(\"mbsc-err\", ctx.error);\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      step: \"step\",\n      pattern: \"pattern\",\n      accept: \"accept\",\n      multiple: \"multiple\",\n      controlNg: \"controlNg\",\n      dropdown: \"dropdown\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscInputService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 7,\n    vars: 42,\n    consts: [[1, \"mbsc-input-wrap\"], [3, \"type\", \"placeholder\", \"ngModel\", \"disabled\", \"readonly\", \"ngModelChange\", \"blur\"], [\"initElement\", \"\"], [\"class\", \"mbsc-select-ic mbsc-ic mbsc-ic-arrow-down5\", 4, \"ngIf\"], [\"class\", \"mbsc-err-msg\", 4, \"ngIf\"], [1, \"mbsc-select-ic\", \"mbsc-ic\", \"mbsc-ic-arrow-down5\"], [1, \"mbsc-err-msg\"]],\n    template: function MbscInput_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 0)(3, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function MbscInput_Template_input_ngModelChange_3_listener($event) {\n          return ctx.innerValue = $event;\n        })(\"blur\", function MbscInput_Template_input_blur_3_listener($event) {\n          return ctx.onTouch($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(5, MbscInput_span_5_Template, 1, 0, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(6, MbscInput_span_6_Template, 2, 1, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mbsc-err\", ctx.error)(\"mbsc-select\", ctx.dropdown)(\"mbsc-input-box\", ctx.inputStyle == \"box\")(\"mbsc-input-outline\", ctx.inputStyle == \"outline\")(\"mbsc-label-stacked\", ctx.labelStyle == \"stacked\")(\"mbsc-label-inline\", ctx.labelStyle == \"inline\")(\"mbsc-label-floating\", ctx.labelStyle == \"floating\");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"type\", ctx.type)(\"placeholder\", ctx.placeholder)(\"ngModel\", ctx.innerValue)(\"disabled\", ctx.disabled)(\"readonly\", ctx._readonly);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"data-icon\", ctx.icon ? ctx.icon : null)(\"data-icon-align\", ctx.iconAlign ? ctx.iconAlign : null)(\"data-password-toggle\", ctx.passwordToggle ? \"true\" : null)(\"data-icon-show\", ctx.iconShow ? ctx.iconShow : null)(\"data-icon-hide\", ctx.iconHide ? ctx.iconHide : null)(\"data-icon-upload\", ctx.iconUpload ? ctx.iconUpload : null)(\"min\", ctx.min)(\"max\", ctx.max)(\"minlength\", ctx.minlength)(\"maxlength\", ctx.maxlength)(\"autocomplete\", ctx.autocomplete)(\"autocapitalize\", ctx.autocapitalize)(\"autocorrect\", ctx.autocorrect)(\"spellcheck\", ctx.spellcheck)(\"autofocus\", ctx.autofocus)(\"step\", ctx.step)(\"pattern\", ctx.pattern)(\"required\", ctx.required)(\"accept\", ctx.accept)(\"multiple\", ctx.multiple);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.dropdown);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.error && ctx.errorMessage);\n      }\n    },\n    directives: [ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc1.MinLengthValidator, ɵngcc1.MaxLengthValidator, ɵngcc1.PatternValidator, ɵngcc1.RequiredValidator, ɵngcc2.NgIf],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscInput;\n}(MbscInputBase);\n\nvar MbscInputModule = function () {\n  function MbscInputModule() {}\n\n  MbscInputModule.ɵfac = function MbscInputModule_Factory(t) {\n    return new (t || MbscInputModule)();\n  };\n\n  MbscInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscInputModule\n  });\n  MbscInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[FormsModule, CommonModule, MbscBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscInputModule, {\n      declarations: function () {\n        return [MbscInput, MbscInputBase, MbscFormBase, MbscFormValueBase];\n      },\n      imports: function () {\n        return [FormsModule, CommonModule, MbscBaseModule];\n      },\n      exports: function () {\n        return [MbscInput];\n      }\n    });\n  })();\n\n  return MbscInputModule;\n}();\n\nfunction adjustedDate(y, m, d, h, i, s, u) {\n  var date = new Date(y, m, d, h || 0, i || 0, s || 0, u || 0);\n\n  if (date.getHours() == 23 && (h || 0) === 0) {\n    date.setHours(date.getHours() + 2);\n  }\n\n  return date;\n}\n/**\r\n * Format a date into a string value with a specified format.\r\n * @param {String} format Output format.\r\n * @param {Date} date Date to format.\r\n * @param {Object} [settings={}] Settings.\r\n * @return {String} Returns the formatted date string.\r\n */\n\n\nfunction formatDate(format, date, settings) {\n  if (!date) {\n    return null;\n  }\n\n  var s = extend$1({}, dateTimeDefaults, settings),\n      look = function look(m) {\n    // Check whether a format character is doubled\n    var n = 0;\n\n    while (i + 1 < format.length && format.charAt(i + 1) == m) {\n      n++;\n      i++;\n    }\n\n    return n;\n  },\n      f1 = function f1(m, val, len) {\n    // Format a number, with leading zero if necessary\n    var n = '' + val;\n\n    if (look(m)) {\n      while (n.length < len) {\n        n = '0' + n;\n      }\n    }\n\n    return n;\n  },\n      f2 = function f2(m, val, s, l) {\n    // Format a name, short or long as requested\n    return look(m) ? l[val] : s[val];\n  },\n      i,\n      year,\n      output = '',\n      literal = false;\n\n  for (i = 0; i < format.length; i++) {\n    if (literal) {\n      if (format.charAt(i) == \"'\" && !look(\"'\")) {\n        literal = false;\n      } else {\n        output += format.charAt(i);\n      }\n    } else {\n      switch (format.charAt(i)) {\n        case 'd':\n          output += f1('d', s.getDay(date), 2);\n          break;\n\n        case 'D':\n          output += f2('D', date.getDay(), s.dayNamesShort, s.dayNames);\n          break;\n\n        case 'o':\n          output += f1('o', (date.getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000, 3);\n          break;\n\n        case 'm':\n          output += f1('m', s.getMonth(date) + 1, 2);\n          break;\n\n        case 'M':\n          output += f2('M', s.getMonth(date), s.monthNamesShort, s.monthNames);\n          break;\n\n        case 'y':\n          year = s.getYear(date);\n          output += look('y') ? year : (year % 100 < 10 ? '0' : '') + year % 100; //output += (look('y') ? date.getFullYear() : (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);\n\n          break;\n\n        case 'h':\n          var h = date.getHours();\n          output += f1('h', h > 12 ? h - 12 : h === 0 ? 12 : h, 2);\n          break;\n\n        case 'H':\n          output += f1('H', date.getHours(), 2);\n          break;\n\n        case 'i':\n          output += f1('i', date.getMinutes(), 2);\n          break;\n\n        case 's':\n          output += f1('s', date.getSeconds(), 2);\n          break;\n\n        case 'a':\n          output += date.getHours() > 11 ? s.pmText : s.amText;\n          break;\n\n        case 'A':\n          output += date.getHours() > 11 ? s.pmText.toUpperCase() : s.amText.toUpperCase();\n          break;\n\n        case \"'\":\n          if (look(\"'\")) {\n            output += \"'\";\n          } else {\n            literal = true;\n          }\n\n          break;\n\n        default:\n          output += format.charAt(i);\n      }\n    }\n  }\n\n  return output;\n} // --- TRIAL SERVER CODE END ---\n\n/**\r\n * Extract a date from a string value with a specified format.\r\n * @param {String} format Input format.\r\n * @param {String} value String to parse.\r\n * @param {Object} [settings={}] Settings.\r\n * @return {Date} Returns the extracted date.\r\n */\n\n\nfunction parseDate(format, value, settings) {\n  var s = extend$1({}, dateTimeDefaults, settings),\n      def = makeDate(s.defaultValue || new Date());\n\n  if (!format || !value) {\n    return def;\n  } // If already a date object\n\n\n  if (value.getTime) {\n    return value;\n  }\n\n  value = typeof value == 'object' ? value.toString() : value + '';\n\n  var shortYearCutoff = s.shortYearCutoff,\n      year = s.getYear(def),\n      month = s.getMonth(def) + 1,\n      day = s.getDay(def),\n      doy = -1,\n      hours = def.getHours(),\n      minutes = def.getMinutes(),\n      seconds = 0,\n      //def.getSeconds(),\n  ampm = -1,\n      literal = false,\n      // Check whether a format character is doubled\n  lookAhead = function lookAhead(match) {\n    var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) == match;\n\n    if (matches) {\n      iFormat++;\n    }\n\n    return matches;\n  },\n      getNumber = function getNumber(match) {\n    // Extract a number from the string value\n    lookAhead(match);\n    var size = match == '@' ? 14 : match == '!' ? 20 : match == 'y' ? 4 : match == 'o' ? 3 : 2,\n        digits = new RegExp('^\\\\d{1,' + size + '}'),\n        num = value.substr(iValue).match(digits);\n\n    if (!num) {\n      return 0;\n    }\n\n    iValue += num[0].length;\n    return parseInt(num[0], 10);\n  },\n      getName = function getName(match, s, l) {\n    // Extract a name from the string value and convert to an index\n    var names = lookAhead(match) ? l : s,\n        i;\n\n    for (i = 0; i < names.length; i++) {\n      if (value.substr(iValue, names[i].length).toLowerCase() == names[i].toLowerCase()) {\n        iValue += names[i].length;\n        return i + 1;\n      }\n    }\n\n    return 0;\n  },\n      checkLiteral = function checkLiteral() {\n    iValue++;\n  },\n      iValue = 0,\n      iFormat;\n\n  for (iFormat = 0; iFormat < format.length; iFormat++) {\n    if (literal) {\n      if (format.charAt(iFormat) == \"'\" && !lookAhead(\"'\")) {\n        literal = false;\n      } else {\n        checkLiteral();\n      }\n    } else {\n      switch (format.charAt(iFormat)) {\n        case 'd':\n          day = getNumber('d');\n          break;\n\n        case 'D':\n          getName('D', s.dayNamesShort, s.dayNames);\n          break;\n\n        case 'o':\n          doy = getNumber('o');\n          break;\n\n        case 'm':\n          month = getNumber('m');\n          break;\n\n        case 'M':\n          month = getName('M', s.monthNamesShort, s.monthNames);\n          break;\n\n        case 'y':\n          year = getNumber('y');\n          break;\n\n        case 'H':\n          hours = getNumber('H');\n          break;\n\n        case 'h':\n          hours = getNumber('h');\n          break;\n\n        case 'i':\n          minutes = getNumber('i');\n          break;\n\n        case 's':\n          seconds = getNumber('s');\n          break;\n\n        case 'a':\n          ampm = getName('a', [s.amText, s.pmText], [s.amText, s.pmText]) - 1;\n          break;\n\n        case 'A':\n          ampm = getName('A', [s.amText, s.pmText], [s.amText, s.pmText]) - 1;\n          break;\n\n        case \"'\":\n          if (lookAhead(\"'\")) {\n            checkLiteral();\n          } else {\n            literal = true;\n          }\n\n          break;\n\n        default:\n          checkLiteral();\n      }\n    }\n  }\n\n  if (year < 100) {\n    year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= (typeof shortYearCutoff != 'string' ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10)) ? 0 : -100);\n  }\n\n  if (doy > -1) {\n    month = 1;\n    day = doy;\n\n    do {\n      var dim = 32 - new Date(year, month - 1, 32, 12).getDate();\n\n      if (day > dim) {\n        month++;\n        day -= dim;\n      }\n    } while (day > dim);\n  }\n\n  hours = ampm == -1 ? hours : ampm && hours < 12 ? hours + 12 : !ampm && hours == 12 ? 0 : hours;\n  var date = s.getDate(year, month - 1, day, hours, minutes, seconds);\n\n  if (s.getYear(date) != year || s.getMonth(date) + 1 != month || s.getDay(date) != day) {\n    return def; // Invalid date\n  }\n\n  return date;\n}\n\nfunction getDayDiff(d1, d2) {\n  return Math.round((d2 - d1) / (24 * 60 * 60 * 1000));\n}\n\nfunction getDateOnly(d) {\n  return adjustedDate(d.getFullYear(), d.getMonth(), d.getDate());\n}\n\nfunction getDateStr(d) {\n  return d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate();\n}\n\nfunction getISOString(d, parts) {\n  var ret = '',\n      time = '';\n\n  if (d) {\n    if (parts.h) {\n      time += pad(d.getHours()) + ':' + pad(d.getMinutes());\n\n      if (parts.s) {\n        time += ':' + pad(d.getSeconds());\n      }\n\n      if (parts.u) {\n        time += '.' + pad(d.getMilliseconds(), 3);\n      }\n\n      if (parts.tz) {\n        time += parts.tz; // Just put what we got\n      }\n    }\n\n    if (parts.y) {\n      ret += d.getFullYear();\n\n      if (parts.m) {\n        ret += '-' + pad(d.getMonth() + 1);\n\n        if (parts.d) {\n          ret += '-' + pad(d.getDate());\n        }\n\n        if (parts.h) {\n          ret += 'T' + time;\n        }\n      }\n    } else if (parts.h) {\n      ret = time;\n    }\n  }\n\n  return ret;\n}\n\nfunction setISOParts(parsed, offset, parts) {\n  var part,\n      v,\n      p = {\n    y: 1,\n    m: 2,\n    d: 3,\n    h: 4,\n    i: 5,\n    s: 6,\n    u: 7,\n    tz: 8\n  };\n\n  if (parts) {\n    for (part in p) {\n      v = parsed[p[part] - offset];\n\n      if (v) {\n        parts[part] = part == 'tz' ? v : 1;\n      }\n    }\n  }\n}\n\nfunction returnDate(d, s, displayFormat) {\n  var moment = window.moment || s.moment,\n      format = s.returnFormat;\n\n  if (d) {\n    if (format == 'moment' && moment) {\n      return moment(d);\n    }\n\n    if (format == 'locale') {\n      return formatDate(displayFormat, d, s);\n    }\n\n    if (format == 'iso8601') {\n      return getISOString(d, s.isoParts);\n    }\n  }\n\n  return d;\n}\n\nfunction makeDate(d, format, s, parts) {\n  var parse;\n\n  if (!d) {\n    return null;\n  } // If already date object\n\n\n  if (d.getTime) {\n    return d;\n  } // Moment object\n\n\n  if (d.toDate) {\n    return d.toDate();\n  }\n\n  if (typeof d == 'string') {\n    d = d.trim();\n  }\n\n  parse = ISO_8601_TIME.exec(d); // If ISO 8601 time string\n\n  if (parse) {\n    setISOParts(parse, 2, parts);\n    return new Date(1970, 0, 1, parse[2] ? +parse[2] : 0, parse[3] ? +parse[3] : 0, parse[4] ? +parse[4] : 0, parse[5] ? +parse[5] : 0);\n  }\n\n  if (!parse) {\n    parse = ISO_8601_FULL.exec(d);\n  } // If ISO 8601 date string\n\n\n  if (parse) {\n    setISOParts(parse, 0, parts);\n    return new Date(parse[1] ? +parse[1] : 1970, parse[2] ? parse[2] - 1 : 0, parse[3] ? +parse[3] : 1, parse[4] ? +parse[4] : 0, parse[5] ? +parse[5] : 0, parse[6] ? +parse[6] : 0, parse[7] ? +parse[7] : 0);\n  } // Parse date based on format\n\n\n  return parseDate(format, d, s);\n}\n\nfunction isSameDay(d1, d2) {\n  return d1.getFullYear() == d2.getFullYear() && d1.getMonth() == d2.getMonth() && d1.getDate() == d2.getDate();\n}\n\nvar ISO_8601_FULL = /^(\\d{4}|[+-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?((Z)|([+-])(\\d{2})(?::(\\d{2}))?)?)?$/;\nvar ISO_8601_TIME = /^((\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+-])(\\d{2})(?::(\\d{2}))?)?)?$/;\nvar DAY_OF_MONTH = /^\\d{1,2}(\\/\\d{1,2})?$/;\nvar DAY_OF_WEEK = /^w\\d$/i;\nvar dateTimeDefaults = {\n  shortYearCutoff: '+10',\n  monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  dayNamesMin: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  amText: 'am',\n  pmText: 'pm',\n  getYear: function getYear(d) {\n    return d.getFullYear();\n  },\n  getMonth: function getMonth(d) {\n    return d.getMonth();\n  },\n  getDay: function getDay(d) {\n    return d.getDate();\n  },\n  getDate: adjustedDate,\n  getMaxDayOfMonth: function getMaxDayOfMonth(y, m) {\n    return 32 - new Date(y, m, 32, 12).getDate();\n  },\n  getWeekNumber: function getWeekNumber(d) {\n    // Copy date so don't modify original\n    d = new Date(d);\n    d.setHours(0, 0, 0); // Set to nearest Thursday: current date + 4 - current day number\n    // Make Sunday's day number 7\n\n    d.setDate(d.getDate() + 4 - (d.getDay() || 7)); // Get first day of year\n\n    var yearStart = new Date(d.getFullYear(), 0, 1); // Calculate full weeks to nearest Thursday\n\n    return Math.ceil(((d - yearStart) / 86400000 + 1) / 7);\n  }\n};\nutil.datetime = {\n  formatDate: formatDate,\n  parseDate: parseDate\n};\n\nfunction createStepper($elm, action, delay, isReadOnly, stopProp, ripple) {\n  var $btn,\n      changed,\n      index,\n      running,\n      source,\n      startX,\n      startY,\n      step,\n      timer,\n      check = isReadOnly || noop;\n\n  function onBtnStart(ev) {\n    var proceed;\n    $btn = $$1(this);\n    step = +$btn.attr('data-step');\n    index = +$btn.attr('data-index');\n    changed = true;\n\n    if (stopProp) {\n      ev.stopPropagation();\n    }\n\n    if (ev.type == 'touchstart') {\n      $btn.closest('.mbsc-no-touch').removeClass('mbsc-no-touch');\n    }\n\n    if (ev.type == 'mousedown') {\n      // Prevent focus\n      ev.preventDefault();\n    }\n\n    if (ev.type != 'keydown') {\n      //e.preventDefault();\n      startX = getCoord(ev, 'X');\n      startY = getCoord(ev, 'Y');\n      proceed = testTouch(ev, this);\n    } else {\n      proceed = ev.keyCode === 32;\n    }\n\n    if (!running && proceed && !$btn.hasClass('mbsc-disabled')) {\n      if (start(index, step, ev)) {\n        $btn.addClass('mbsc-active');\n\n        if (ripple) {\n          ripple.addRipple($btn.find('.mbsc-segmented-content'), ev);\n        }\n      }\n\n      if (ev.type == 'mousedown') {\n        $$1(document).on('mousemove', onBtnMove).on('mouseup', onBtnEnd);\n      }\n    }\n  }\n\n  function onBtnMove(ev) {\n    if (Math.abs(startX - getCoord(ev, 'X')) > 7 || Math.abs(startY - getCoord(ev, 'Y')) > 7) {\n      changed = true;\n      stop();\n    }\n  }\n\n  function onBtnEnd(ev) {\n    if (ev.type == 'touchend') {\n      // Prevents iOS scroll on double tap\n      ev.preventDefault();\n    }\n\n    stop();\n\n    if (ev.type == 'mouseup') {\n      $$1(document).off('mousemove', onBtnMove).off('mouseup', onBtnEnd);\n    }\n  }\n\n  function stop() {\n    running = false;\n    clearInterval(timer);\n\n    if ($btn) {\n      $btn.removeClass('mbsc-active');\n\n      if (ripple) {\n        setTimeout(function () {\n          ripple.removeRipple();\n        }, 100);\n      }\n    }\n  }\n\n  function start(i, st, ev) {\n    if (!running && !check(i)) {\n      index = i;\n      step = st;\n      source = ev;\n      running = true;\n      changed = false;\n      setTimeout(tick, 100);\n    }\n\n    return running;\n  }\n\n  function tick() {\n    if ($btn && $btn.hasClass('mbsc-disabled')) {\n      stop();\n      return;\n    }\n\n    if (running || !changed) {\n      changed = true;\n      action(index, step, source, tick);\n    }\n\n    if (running && delay) {\n      clearInterval(timer);\n      timer = setInterval(function () {\n        action(index, step, source);\n      }, delay);\n    }\n  }\n\n  function destroy() {\n    $elm.each(function (i, el) {\n      unlisten(el, 'touchstart', onBtnStart, {\n        passive: true\n      });\n      unlisten(el, 'mousedown', onBtnStart);\n      unlisten(el, 'keydown', onBtnStart);\n      unlisten(el, 'touchmove', onBtnMove, {\n        passive: true\n      });\n      unlisten(el, 'touchend', onBtnEnd);\n      unlisten(el, 'touchcancel', onBtnEnd);\n      unlisten(el, 'keyup', onBtnEnd);\n    });\n  }\n\n  $elm.each(function (i, el) {\n    listen(el, 'touchstart', onBtnStart, {\n      passive: true\n    });\n    listen(el, 'mousedown', onBtnStart);\n    listen(el, 'keydown', onBtnStart);\n    listen(el, 'touchmove', onBtnMove, {\n      passive: true\n    });\n    listen(el, 'touchend', onBtnEnd);\n    listen(el, 'touchcancel', onBtnEnd);\n    listen(el, 'keyup', onBtnEnd);\n  });\n  return {\n    start: start,\n    stop: stop,\n    destroy: destroy\n  };\n}\n\nvar innerStyle = 'position:absolute;left:0;top:0;';\nvar style = innerStyle + 'right:0;bottom:0;overflow:hidden;z-index:-1;';\nvar markup = '<div style=\"' + style + '\"><div style=\"' + innerStyle + '\"></div></div>' + '<div style=\"' + style + '\"><div style=\"' + innerStyle + 'width:200%;height:200%;\"></div></div>';\nvar observer;\nvar count = 0;\n\nfunction resizeObserver(el, callback, zone) {\n  function reset() {\n    expandChild.style.width = '100000px';\n    expandChild.style.height = '100000px';\n    expand.scrollLeft = 100000;\n    expand.scrollTop = 100000;\n    shrink.scrollLeft = 100000;\n    shrink.scrollTop = 100000;\n  }\n\n  function checkHidden() {\n    var now = new Date();\n    hiddenRafId = 0;\n\n    if (!stopCheck) {\n      if (now - lastCheck > 200 && !expand.scrollTop && !expand.scrollLeft) {\n        lastCheck = now;\n        reset();\n      }\n\n      if (!hiddenRafId) {\n        hiddenRafId = raf(checkHidden);\n      }\n    }\n  }\n\n  function onScroll() {\n    if (!rafId) {\n      rafId = raf(onResize);\n    }\n  }\n\n  function onResize() {\n    rafId = 0;\n    reset();\n    callback();\n  }\n\n  var expand;\n  var expandChild;\n  var helper;\n  var hiddenRafId;\n  var rafId;\n  var shrink;\n  var stopCheck;\n  var lastCheck = 0; //let isHidden = true;\n\n  if (window.ResizeObserver) {\n    if (!observer) {\n      observer = new ResizeObserver(function (entries) {\n        for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var entry = _ref;\n\n          entry.target.__mbscResize();\n        }\n      });\n    }\n\n    count++;\n    el.__mbscResize = callback;\n    observer.observe(el);\n  } else {\n    helper = document.createElement('div');\n    helper.innerHTML = markup;\n    helper.dir = 'ltr'; // Need this to work in rtl as well;\n\n    shrink = helper.childNodes[1];\n    expand = helper.childNodes[0];\n    expandChild = expand.childNodes[0];\n    el.appendChild(helper);\n    expand.addEventListener('scroll', onScroll);\n    shrink.addEventListener('scroll', onScroll);\n\n    if (zone) {\n      zone.runOutsideAngular(function () {\n        raf(checkHidden);\n      });\n    } else {\n      raf(checkHidden);\n    }\n  }\n\n  return {\n    detach: function detach() {\n      if (observer) {\n        count--;\n        observer.unobserve(el);\n\n        if (!count) {\n          observer = null;\n        }\n      } else {\n        el.removeChild(helper);\n        stopCheck = true;\n      }\n    }\n  };\n}\n\nvar $activeElm,\n    preventShow,\n    themes = mobiscroll.themes,\n    needsFixed = /(iphone|ipod)/i.test(userAgent) && majorVersion >= 7,\n    isAndroid = os == 'android',\n    isIOS = os == 'ios',\n    isIOS8 = isIOS && majorVersion == 8,\n    halfBorder = isIOS && majorVersion > 7,\n    prevdef = function prevdef(ev) {\n  ev.preventDefault();\n};\n\nvar EDITABLE = 'input,select,textarea,button';\nvar ALLOW_ENTER = 'textarea,button,input[type=\"button\"],input[type=\"submit\"]';\nvar FOCUSABLE = EDITABLE + ',[tabindex=\"0\"]';\n\nvar Frame = function Frame(el, settings, inherit) {\n  var //$ariaDiv,\n  $ctx,\n      $header,\n      $lock,\n      $markup,\n      $overlay,\n      $persp,\n      $popup,\n      $wnd,\n      $wrapper,\n      buttons,\n      btn,\n      ctx,\n      doAnim,\n      hasContext,\n      isModal,\n      isInserted,\n      isPointer,\n      markup,\n      modalWidth,\n      modalHeight,\n      needsDimensions,\n      needsLock,\n      observer,\n      overlay,\n      popup,\n      posDebounce,\n      prevInst,\n      s,\n      scrollLock,\n      touched,\n      trigger,\n      wndWidth,\n      wndHeight,\n      that = this,\n      $elm = $$1(el),\n      elmList = [],\n      lastFocus = new Date();\n\n  function onBtnStart(ev) {\n    // Need this to prevent opening of sidemenus or similar\n    if (s.stopProp) {\n      ev.stopPropagation();\n    }\n\n    var b = closest(this, ev.target, '.mbsc-fr-btn-e');\n\n    if (!b) {\n      return;\n    } // Can't call preventDefault here, it kills page scroll\n\n\n    if (btn) {\n      btn.removeClass('mbsc-active');\n    }\n\n    btn = $$1(b); // Active button\n\n    if (!btn.hasClass('mbsc-disabled') && !btn.hasClass('mbsc-fr-btn-nhl')) {\n      btn.addClass('mbsc-active');\n    }\n\n    if (ev.type === 'mousedown') {\n      $$1(document).on('mouseup', onBtnEnd);\n    }\n  }\n\n  function onBtnEnd(ev) {\n    if (btn) {\n      btn.removeClass('mbsc-active');\n      btn = null;\n    }\n\n    if (ev.type === 'mouseup') {\n      $$1(document).off('mouseup', onBtnEnd);\n    }\n  }\n\n  function onScroll(ev) {\n    if (scrollLock && markup.contains(ev.target)) {\n      ev.preventDefault();\n    }\n  }\n\n  function onWndKeyDown(ev) {\n    if (mobiscroll.activeInstance == that) {\n      if (ev.keyCode == 13 && (!$$1(ev.target).is(ALLOW_ENTER) || ev.shiftKey)) {\n        that.select();\n      } else if (ev.keyCode == 27) {\n        that.cancel();\n      }\n    }\n  }\n\n  function onShow(prevFocus) {\n    if (!prevFocus && !isAndroid && that._activeElm) {\n      //overlay.focus();\n      lastFocus = new Date();\n\n      that._activeElm.focus();\n    } //that.ariaMessage(s.ariaMessage);\n\n  }\n\n  function onHide(prevAnim) {\n    var $activeEl = $activeElm,\n        focus = s.focusOnClose;\n\n    that._markupRemove();\n\n    $markup.remove();\n\n    if (isModal) {\n      ctx.mbscModals--;\n\n      if (s.scrollLock) {\n        ctx.mbscLock--;\n      }\n\n      if (!ctx.mbscLock) {\n        $lock.removeClass('mbsc-fr-lock');\n      }\n\n      if (needsLock) {\n        ctx.mbscIOSLock--;\n\n        if (!ctx.mbscIOSLock) {\n          $lock.removeClass('mbsc-fr-lock-ios');\n          $ctx.css({\n            top: '',\n            left: ''\n          });\n          $wnd.scrollLeft(ctx.mbscScrollLeft);\n          $wnd.scrollTop(ctx.mbscScrollTop);\n        }\n      } // The follwing should be done only if no other\n      // instance was opened during the hide animation\n\n\n      if (!ctx.mbscModals) {\n        $lock.removeClass('mbsc-fr-lock-ctx');\n      }\n\n      if (!ctx.mbscModals || prevInst) {\n        // Put focus back to the last active element\n        if (!prevAnim) {\n          if (!$activeEl) {\n            $activeEl = $elm;\n          }\n\n          setTimeout(function () {\n            if (focus === undefined || focus === true) {\n              preventShow = true;\n              $activeEl[0].focus();\n            } else if (focus) {\n              $$1(focus)[0].focus();\n            }\n          }, 200);\n        }\n      }\n    }\n\n    prevInst = undefined;\n    isInserted = false;\n    trigger('onHide');\n  }\n\n  function onPosition() {\n    clearTimeout(posDebounce);\n    posDebounce = setTimeout(function () {\n      if (that.position(true)) {\n        // Trigger reflow, needed on iOS safari, when orientation is changed\n        popup.style.visibility = 'hidden';\n        popup.offsetHeight;\n        popup.style.visibility = '';\n      }\n    }, 200);\n  }\n\n  function onFocus(ev) {\n    if (mobiscroll.activeInstance == that && ev.target.nodeType && !overlay.contains(ev.target) && new Date() - lastFocus > 100) {\n      lastFocus = new Date();\n\n      that._activeElm.focus();\n    }\n  }\n\n  function insertMarkup(prevAnim, prevFocus) {\n    function onAnimEnd() {\n      $markup.off(animEnd, onAnimEnd).removeClass('mbsc-anim-in mbsc-anim-trans mbsc-anim-trans-' + doAnim).find('.mbsc-fr-popup').removeClass('mbsc-anim-' + doAnim);\n      onShow(prevFocus);\n    }\n\n    function onOverlayStart(ev) {\n      if (!target && ev.target == overlay) {\n        target = true;\n        moved = false;\n        startX = getCoord(ev, 'X');\n        startY = getCoord(ev, 'Y');\n      }\n    }\n\n    function onOverlayMove(ev) {\n      if (target && !moved && (Math.abs(getCoord(ev, 'X') - startX) > 9 || Math.abs(getCoord(ev, 'Y') - startY) > 9)) {\n        moved = true;\n      }\n    } // Might be not visible if immediately hidden\n\n\n    if (!that._isVisible) {\n      return;\n    } // Show\n\n\n    if (isModal) {\n      $markup.appendTo($ctx);\n    } else if ($elm.is('div') && !that._hasContent) {\n      // Insert inside the element on which was initialized\n      $elm.empty().append($markup);\n    } else {\n      // Insert after the element\n      if ($elm.hasClass('mbsc-control')) {\n        var $wrap = $elm.closest('.mbsc-control-w');\n        $markup.insertAfter($wrap);\n\n        if ($wrap.hasClass('mbsc-select')) {\n          $wrap.addClass('mbsc-select-inline');\n        }\n      } else {\n        $markup.insertAfter($elm);\n      }\n    }\n\n    isInserted = true;\n\n    that._markupInserted($markup);\n\n    trigger('onMarkupInserted', {\n      target: markup\n    });\n\n    if (isModal && s.closeOnOverlayTap) {\n      var moved, target, startX, startY;\n      listen(overlay, 'touchstart', onOverlayStart, {\n        passive: true\n      });\n      listen(overlay, 'touchmove', onOverlayMove, {\n        passive: true\n      });\n      $overlay.on('mousedown', onOverlayStart).on('mousemove', onOverlayMove).on('touchcancel', function () {\n        target = false;\n      }).on('touchend click', function (ev) {\n        if (target && !moved) {\n          that.cancel();\n\n          if (ev.type == 'touchend') {\n            preventClick();\n          }\n        }\n\n        target = false;\n      });\n    }\n\n    $markup.on('mousedown', '.mbsc-btn-e,.mbsc-fr-btn-e', prevdef).on('keydown', '.mbsc-fr-btn-e', function (ev) {\n      if (ev.keyCode == 32) {\n        // Space\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.click();\n      }\n    }).on('keydown', function (ev) {\n      // Trap focus inside modal\n      if (ev.keyCode == 32 && !$$1(ev.target).is(EDITABLE)) {\n        // Prevent page scroll on space press\n        ev.preventDefault();\n      } else if (ev.keyCode == 9 && isModal && s.focusTrap) {\n        // Tab\n        var $focusable = $markup.find(FOCUSABLE).filter(function () {\n          return this.offsetWidth > 0 || this.offsetHeight > 0;\n        }),\n            index = $focusable.index($$1(':focus', $markup)),\n            i = $focusable.length - 1,\n            target = 0;\n\n        if (ev.shiftKey) {\n          i = 0;\n          target = -1;\n        }\n\n        if (index === i) {\n          $focusable.eq(target)[0].focus();\n          ev.preventDefault();\n        }\n      }\n    }).on('touchend', '.mbsc-fr-btn-e', onBtnEnd);\n    listen(markup, 'touchstart', onBtnStart, {\n      passive: true\n    });\n    listen(markup, 'mousedown', onBtnStart); // Need event capture for this\n\n    listen(markup, 'touchstart', function () {\n      if (!touched) {\n        touched = true;\n        $ctx.find('.mbsc-no-touch').removeClass('mbsc-no-touch');\n      }\n    }, {\n      passive: true,\n      capture: true\n    }); // Init buttons\n\n    $$1.each(buttons, function (i, b) {\n      that.tap($$1('.mbsc-fr-btn' + i, $markup), function (ev) {\n        b = isString(b) ? that.buttons[b] : b;\n        (isString(b.handler) ? that.handlers[b.handler] : b.handler).call(this, ev, that);\n      }, true);\n    });\n\n    that._attachEvents($markup); // Set position\n\n\n    if (that.position() === false) {\n      return;\n    }\n\n    if (isModal || that._checkSize) {\n      observer = resizeObserver(markup, onPosition, s.zone);\n    }\n\n    if (isModal) {\n      $markup.removeClass('mbsc-fr-pos');\n\n      if (doAnim && !prevAnim) {\n        $markup.addClass('mbsc-anim-in mbsc-anim-trans mbsc-anim-trans-' + doAnim).on(animEnd, onAnimEnd).find('.mbsc-fr-popup').addClass('mbsc-anim-' + doAnim);\n      } else {\n        onShow(prevFocus);\n      }\n    }\n\n    trigger('onShow', {\n      target: markup,\n      valueText: that._tempValue\n    });\n  }\n\n  function show(beforeShow, $elm) {\n    if (that._isVisible) {\n      return;\n    }\n\n    if (beforeShow) {\n      beforeShow();\n    }\n\n    if (that.show() !== false) {\n      $activeElm = $elm;\n    }\n  }\n\n  function set() {\n    that._fillValue();\n\n    trigger('onSet', {\n      valueText: that._value\n    });\n  }\n\n  function cancel() {\n    trigger('onCancel', {\n      valueText: that._value\n    });\n  }\n\n  function clear() {\n    that.setVal(null, true);\n  } // Call the parent constructor\n\n\n  Base.call(this, el, settings, true);\n  /**\r\n   * Positions the scroller on the screen.\r\n   */\n\n  that.position = function (check) {\n    var anchor,\n        anchorWidth,\n        anchorHeight,\n        anchorPos,\n        anchorTop,\n        anchorLeft,\n        arrow,\n        arrowWidth,\n        arrowHeight,\n        docHeight,\n        docWidth,\n        isWrapped,\n        newHeight,\n        newWidth,\n        oldHeight,\n        oldWidth,\n        width,\n        top,\n        left,\n        css = {},\n        scrollLeft = 0,\n        scrollTop = 0,\n        minWidth = 0,\n        totalWidth = 0;\n\n    if (!isInserted) {\n      return false;\n    }\n\n    oldWidth = wndWidth;\n    oldHeight = wndHeight;\n    newHeight = Math.min(markup.offsetHeight, hasContext ? Infinity : window.innerHeight);\n    newWidth = Math.min(markup.offsetWidth, hasContext ? Infinity : window.innerWidth);\n\n    if (!newWidth || !newHeight || wndWidth === newWidth && wndHeight === newHeight && check) {\n      return;\n    }\n\n    if (that._checkResp(newWidth)) {\n      return false;\n    }\n\n    wndWidth = newWidth;\n    wndHeight = newHeight;\n\n    if (that._isFullScreen || /top|bottom/.test(s.display)) {\n      // Set width, if document is larger than viewport, needs to be set before onPosition (for calendar)\n      $popup.width(newWidth);\n    } else if (isModal) {\n      // Reset width\n      $wrapper.width('');\n    }\n\n    that._position($markup); // Call position for nested mobiscroll components\n    // $('.mbsc-comp', $markup).each(function () {\n    //     var inst = instances[this.id];\n    //     if (inst && inst !== that && inst.position) {\n    //         inst.position();\n    //     }\n    // });\n\n\n    if (!that._isFullScreen && /center|bubble/.test(s.display)) {\n      $$1('.mbsc-w-p', $markup).each(function () {\n        // Need fractional values here, so offsetWidth is not ok\n        width = this.getBoundingClientRect().width;\n        totalWidth += width;\n        minWidth = width > minWidth ? width : minWidth;\n      });\n      isWrapped = totalWidth > newWidth - 16 || s.tabs === true;\n      $wrapper.css({\n        'width': that._isLiquid ? Math.min(s.maxPopupWidth, newWidth - 16) : Math.ceil(isWrapped ? minWidth : totalWidth),\n        'white-space': isWrapped ? '' : 'nowrap'\n      });\n    }\n\n    if (trigger('onPosition', {\n      target: markup,\n      popup: popup,\n      hasTabs: isWrapped,\n      oldWidth: oldWidth,\n      oldHeight: oldHeight,\n      windowWidth: newWidth,\n      windowHeight: newHeight\n    }) === false || !isModal) {\n      return;\n    }\n\n    if (needsDimensions) {\n      scrollLeft = $wnd.scrollLeft();\n      scrollTop = $wnd.scrollTop();\n\n      if (wndWidth) {\n        $persp.css({\n          width: '',\n          height: ''\n        });\n      }\n    }\n\n    modalWidth = popup.offsetWidth;\n    modalHeight = popup.offsetHeight;\n    scrollLock = modalHeight <= newHeight && modalWidth <= newWidth;\n\n    if (s.display == 'center') {\n      left = Math.max(0, scrollLeft + (newWidth - modalWidth) / 2);\n      top = Math.max(0, scrollTop + (newHeight - modalHeight) / 2);\n    } else if (s.display == 'bubble') {\n      anchor = s.anchor === undefined ? $elm : $$1(s.anchor);\n      arrow = $$1('.mbsc-fr-arr-i', $markup)[0];\n      anchorPos = anchor.offset();\n      anchorTop = anchorPos.top + (hasContext ? scrollTop - $ctx.offset().top : 0);\n      anchorLeft = anchorPos.left + (hasContext ? scrollLeft - $ctx.offset().left : 0);\n      anchorWidth = anchor[0].offsetWidth;\n      anchorHeight = anchor[0].offsetHeight;\n      arrowWidth = arrow.offsetWidth;\n      arrowHeight = arrow.offsetHeight; // Horizontal positioning\n\n      left = constrain(anchorLeft - (modalWidth - anchorWidth) / 2, scrollLeft + 3, scrollLeft + newWidth - modalWidth - 3); // Vertical positioning\n      // Below the input\n\n      top = anchorTop + anchorHeight + arrowHeight / 2;\n\n      if (top + modalHeight + 8 > scrollTop + newHeight && anchorTop - modalHeight - arrowHeight / 2 > scrollTop) {\n        $popup.removeClass('mbsc-fr-bubble-bottom').addClass('mbsc-fr-bubble-top'); // Above the input\n\n        top = anchorTop - modalHeight - arrowHeight / 2;\n      } else {\n        $popup.removeClass('mbsc-fr-bubble-top').addClass('mbsc-fr-bubble-bottom');\n      } // Set arrow position\n\n\n      $$1('.mbsc-fr-arr', $markup).css({\n        left: constrain(anchorLeft + anchorWidth / 2 - (left + (modalWidth - arrowWidth) / 2), 0, arrowWidth)\n      }); // Lock scroll only if popup is entirely in the viewport\n\n      scrollLock = top > scrollTop && left > scrollLeft && top + modalHeight <= scrollTop + newHeight && left + modalWidth <= scrollLeft + newWidth;\n    } else {\n      left = scrollLeft;\n      top = s.display == 'top' ? scrollTop : Math.max(0, scrollTop + newHeight - modalHeight);\n    }\n\n    if (needsDimensions) {\n      // If top + modal height > doc height, increase doc height\n      docHeight = Math.max(top + modalHeight, hasContext ? ctx.scrollHeight : $$1(document).height());\n      docWidth = Math.max(left + modalWidth, hasContext ? ctx.scrollWidth : $$1(document).width());\n      $persp.css({\n        width: docWidth,\n        height: docHeight\n      }); // Check if scroll needed\n\n      if (s.scroll && s.display == 'bubble' && (top + modalHeight + 8 > scrollTop + newHeight || anchorTop > scrollTop + newHeight || anchorTop + anchorHeight < scrollTop)) {\n        $wnd.scrollTop(Math.min(anchorTop, top + modalHeight - newHeight + 8, docHeight - newHeight));\n      }\n    }\n\n    css.top = Math.floor(top);\n    css.left = Math.floor(left);\n    $popup.css(css);\n    return true;\n  };\n  /**\r\n   * Show mobiscroll on focus and click event of the parameter.\r\n   * @param {HTMLElement} elm - Events will be attached to this element.\r\n   * @param {Function} [beforeShow=undefined] - Optional function to execute before showing mobiscroll.\r\n   */\n\n\n  that.attachShow = function (elm, beforeShow) {\n    var $label,\n        $elm = $$1(elm).off('.mbsc'),\n        readOnly = $elm.prop('readonly');\n    tapOff($elm);\n\n    if (s.display !== 'inline') {\n      if ((s.showOnFocus || s.showOnTap) && $elm.is('input,select')) {\n        $elm.prop('readonly', true).on('mousedown.mbsc', function (ev) {\n          // Prevent input to get focus on tap (virtual keyboard pops up on some devices)\n          ev.preventDefault();\n        }).on('focus.mbsc', function () {\n          if (that._isVisible) {\n            // Don't allow input focus if mobiscroll is being opened\n            this.blur();\n          }\n        });\n        $label = $$1('label[for=\"' + $elm.attr('id') + '\"]');\n\n        if (!$label.length) {\n          $label = $elm.closest('label');\n        }\n      }\n\n      if (!$elm.is('select')) {\n        if (s.showOnFocus) {\n          $elm.on('focus.mbsc', function () {\n            if (!preventShow) {\n              show(beforeShow, $elm);\n            } else {\n              preventShow = false;\n            }\n          });\n        }\n\n        if (s.showOnTap) {\n          $elm.on('keydown.mbsc', function (ev) {\n            if (ev.keyCode == 32 || ev.keyCode == 13) {\n              // Space or Enter\n              ev.preventDefault();\n              ev.stopPropagation();\n              show(beforeShow, $elm);\n            }\n          });\n          that.tap($elm, function (ev) {\n            if (ev.isMbscTap) {\n              touched = true;\n            }\n\n            show(beforeShow, $elm);\n          });\n\n          if ($label && $label.length) {\n            that.tap($label, function (ev) {\n              ev.preventDefault();\n\n              if (ev.target !== $elm[0]) {\n                show(beforeShow, $elm);\n              }\n            });\n          }\n        }\n      }\n\n      elmList.push({\n        readOnly: readOnly,\n        el: $elm,\n        lbl: $label\n      });\n    }\n  };\n  /**\r\n   * Set button handler.\r\n   */\n\n\n  that.select = function () {\n    if (isModal) {\n      that.hide(false, 'set', false, set);\n    } else {\n      set();\n    }\n  };\n  /**\r\n   * Cancel and hide the scroller instance.\r\n   */\n\n\n  that.cancel = function () {\n    if (isModal) {\n      that.hide(false, 'cancel', false, cancel);\n    } else {\n      cancel();\n    }\n  };\n  /**\r\n   * Clear button handler.\r\n   */\n\n\n  that.clear = function () {\n    that._clearValue();\n\n    trigger('onClear');\n\n    if (isModal && that._isVisible && !that.live) {\n      that.hide(false, 'clear', false, clear);\n    } else {\n      clear();\n    }\n  };\n  /**\r\n   * Enables the scroller and the associated input.\r\n   */\n\n\n  that.enable = function () {\n    s.disabled = false;\n    $$1.each(elmList, function (i, v) {\n      if (v.el.is('input,select')) {\n        v.el[0].disabled = false;\n      }\n    });\n  };\n  /**\r\n   * Disables the scroller and the associated input.\r\n   */\n\n\n  that.disable = function () {\n    s.disabled = true;\n    $$1.each(elmList, function (i, v) {\n      if (v.el.is('input,select')) {\n        v.el[0].disabled = true;\n      }\n    });\n  };\n  /**\r\n   * Shows the scroller instance.\r\n   * @param {Boolean} prevAnim - Prevent animation if true\r\n   * @param {Boolean} prevFocus - Prevent focusing if true\r\n   */\n\n\n  that.show = function (prevAnim, prevFocus) {\n    var hasButtons, html, scrollLeft, scrollTop;\n\n    if (s.disabled || that._isVisible) {\n      return;\n    } // Parse value from input\n\n\n    that._readValue();\n\n    if (trigger('onBeforeShow') === false) {\n      return false;\n    }\n\n    $activeElm = null;\n    doAnim = s.animate;\n    buttons = s.buttons || [];\n    needsDimensions = hasContext || s.display == 'bubble';\n    needsLock = needsFixed && !needsDimensions && s.scrollLock;\n    hasButtons = buttons.length > 0; //touched = false;\n\n    if (doAnim !== false) {\n      if (s.display == 'top') {\n        doAnim = doAnim || 'slidedown';\n      } else if (s.display == 'bottom') {\n        doAnim = doAnim || 'slideup';\n      } else if (s.display == 'center' || s.display == 'bubble') {\n        doAnim = doAnim || 'pop';\n      }\n    }\n\n    if (isModal) {\n      wndWidth = 0;\n      wndHeight = 0;\n\n      if (needsLock && !$lock.hasClass('mbsc-fr-lock-ios')) {\n        //$lock.scrollTop(0);\n        ctx.mbscScrollTop = scrollTop = Math.max(0, $wnd.scrollTop());\n        ctx.mbscScrollLeft = scrollLeft = Math.max(0, $wnd.scrollLeft());\n        $ctx.css({\n          top: -scrollTop + 'px',\n          left: -scrollLeft + 'px'\n        });\n      }\n\n      $lock.addClass((s.scrollLock ? 'mbsc-fr-lock' : '') + (needsLock ? ' mbsc-fr-lock-ios' : '') + (hasContext ? ' mbsc-fr-lock-ctx' : '')); // Hide virtual keyboard\n\n      if ($$1(document.activeElement).is('input,textarea')) {\n        document.activeElement.blur();\n      } // Save active instance to previous\n\n\n      prevInst = mobiscroll.activeInstance; // Set active instance\n\n      mobiscroll.activeInstance = that; // Keep track of modals opened per context\n\n      ctx.mbscModals = (ctx.mbscModals || 0) + 1;\n\n      if (needsLock) {\n        ctx.mbscIOSLock = (ctx.mbscIOSLock || 0) + 1;\n      }\n\n      if (s.scrollLock) {\n        ctx.mbscLock = (ctx.mbscLock || 0) + 1;\n      }\n    } // Create wheels containers\n\n\n    html = '<div lang=\"' + s.lang + '\" class=\"mbsc-fr mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : '') + ' mbsc-fr-' + s.display + ' ' + (s.cssClass || '') + ' ' + (s.compClass || '') + (that._isLiquid ? ' mbsc-fr-liq' : '') + (isModal ? ' mbsc-fr-pos' + (s.showOverlay ? '' : ' mbsc-fr-no-overlay') : '') + (isPointer ? ' mbsc-fr-pointer' : '') + (halfBorder ? ' mbsc-fr-hb' : '') + (touched ? '' : ' mbsc-no-touch') + (needsLock ? ' mbsc-platform-ios' : '') + (hasButtons ? buttons.length >= 3 ? ' mbsc-fr-btn-block ' : '' : ' mbsc-fr-nobtn') + '\">' + (isModal ? '<div class=\"mbsc-fr-persp\">' + (s.showOverlay ? '<div class=\"mbsc-fr-overlay\"></div>' : '') + // Overlay\n    '<div role=\"dialog\" class=\"mbsc-fr-scroll\">' : '') + '<div class=\"mbsc-fr-popup' + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr') + (s.headerText ? ' mbsc-fr-has-hdr' : '') + '\">' + ( // Popup\n    s.display === 'bubble' ? '<div class=\"mbsc-fr-arr-w\"><div class=\"mbsc-fr-arr-i\"><div class=\"mbsc-fr-arr\"></div></div></div>' : '') + ( // Bubble arrow\n    isModal ? '<div class=\"mbsc-fr-focus\" tabindex=\"-1\"></div>' : '') + '<div class=\"mbsc-fr-w\">' + ( // Popup content\n    //'<div aria-live=\"assertive\" class=\"mbsc-fr-aria mbsc-fr-hdn\"></div>' +\n    s.headerText ? '<div class=\"mbsc-fr-hdr\">' + (isString(s.headerText) ? s.headerText : '') + '</div>' : '') + // Header\n    '<div class=\"mbsc-fr-c\">'; // Wheel group container\n\n    html += that._generateContent();\n    html += '</div>';\n\n    if (hasButtons) {\n      var b,\n          i,\n          j,\n          l = buttons.length;\n      html += '<div class=\"mbsc-fr-btn-cont\">';\n\n      for (i = 0; i < buttons.length; i++) {\n        j = s.btnReverse ? l - i - 1 : i;\n        b = buttons[j];\n        b = isString(b) ? that.buttons[b] : b;\n\n        if (b.handler === 'set') {\n          b.parentClass = 'mbsc-fr-btn-s';\n        }\n\n        if (b.handler === 'cancel') {\n          b.parentClass = 'mbsc-fr-btn-c';\n        }\n\n        html += '<div' + (s.btnWidth ? ' style=\"width:' + 100 / buttons.length + '%\"' : '') + ' class=\"mbsc-fr-btn-w ' + (b.parentClass || '') + '\">' + '<div tabindex=\"0\" role=\"button\" class=\"mbsc-fr-btn' + j + ' mbsc-fr-btn-e ' + (b.cssClass === undefined ? s.btnClass : b.cssClass) + (b.icon ? ' mbsc-ic mbsc-ic-' + b.icon : '') + '\">' + (b.text || '') + '</div></div>';\n      }\n\n      html += '</div>';\n    }\n\n    html += '</div></div></div></div>' + (isModal ? '</div></div>' : '');\n    $markup = $$1(html);\n    $persp = $$1('.mbsc-fr-persp', $markup);\n    $overlay = $$1('.mbsc-fr-scroll', $markup);\n    $wrapper = $$1('.mbsc-fr-w', $markup);\n    $popup = $$1('.mbsc-fr-popup', $markup);\n    $header = $$1('.mbsc-fr-hdr', $markup); //$ariaDiv = $('.mbsc-fr-aria', $markup);\n\n    markup = $markup[0];\n    overlay = $overlay[0];\n    popup = $popup[0];\n    that._activeElm = $$1('.mbsc-fr-focus', $markup)[0];\n    that._markup = $markup;\n    that._isVisible = true;\n    that.markup = markup;\n\n    that._markupReady($markup);\n\n    trigger('onMarkupReady', {\n      target: markup\n    }); // Attach events\n\n    if (isModal) {\n      // Enter / ESC\n      $$1(window).on('keydown', onWndKeyDown); // Prevent scroll if not specified otherwise\n\n      if (s.scrollLock) {\n        listen(document, 'touchmove', onScroll, {\n          passive: false\n        });\n        listen(document, 'mousewheel', onScroll, {\n          passive: false\n        });\n        listen(document, 'wheel', onScroll, {\n          passive: false\n        });\n      }\n\n      if (s.focusTrap) {\n        $wnd.on('focusin', onFocus);\n      }\n    }\n\n    if (isModal) {\n      // Wait for the toolbar and addressbar to appear on iOS\n      setTimeout(function () {\n        insertMarkup(prevAnim, prevFocus);\n      }, needsLock ? 100 : 0);\n    } else {\n      insertMarkup(prevAnim, prevFocus);\n    }\n  };\n  /**\r\n   * Hides the scroller instance.\r\n   */\n\n\n  that.hide = function (prevAnim, btn, force, callback) {\n    function onAnimEnd() {\n      $markup.off(animEnd, onAnimEnd);\n      onHide(prevAnim);\n    } // If onClose handler returns false, prevent hide\n\n\n    if (!that._isVisible || !force && !that._isValid && btn == 'set' || !force && trigger('onBeforeClose', {\n      valueText: that._tempValue,\n      button: btn\n    }) === false) {\n      return false;\n    }\n\n    that._isVisible = false;\n\n    if (observer) {\n      observer.detach();\n      observer = null;\n    }\n\n    if (isModal) {\n      if ($$1(document.activeElement).is('input,textarea') && popup.contains(document.activeElement)) {\n        document.activeElement.blur();\n      }\n\n      if (mobiscroll.activeInstance == that) {\n        mobiscroll.activeInstance = prevInst;\n      }\n\n      $$1(window).off('keydown', onWndKeyDown);\n      $wnd.off('focusin', onFocus);\n      unlisten(document, 'touchmove', onScroll, {\n        passive: false\n      });\n      unlisten(document, 'mousewheel', onScroll, {\n        passive: false\n      });\n      unlisten(document, 'wheel', onScroll, {\n        passive: false\n      });\n    } // Hide wheels and overlay\n\n\n    if ($markup) {\n      if (isModal && doAnim && !prevAnim) {\n        $markup.addClass('mbsc-anim-out mbsc-anim-trans mbsc-anim-trans-' + doAnim).on(animEnd, onAnimEnd).find('.mbsc-fr-popup').addClass('mbsc-anim-' + doAnim);\n      } else {\n        onHide(prevAnim);\n      }\n\n      that._detachEvents($markup);\n    }\n\n    if (callback) {\n      callback();\n    } // For validation\n\n\n    $elm.trigger('blur');\n    trigger('onClose', {\n      valueText: that._value\n    });\n  }; // that.ariaMessage = function (txt) {\n  //     $ariaDiv.html('');\n  //     setTimeout(function () {\n  //         $ariaDiv.html(txt);\n  //     }, 100);\n  // };\n\n  /**\r\n   * Return true if the scroller is currently visible.\r\n   */\n\n\n  that.isVisible = function () {\n    return that._isVisible;\n  }; // Protected functions to override\n\n\n  that.setVal = noop;\n  that.getVal = noop;\n  that._generateContent = noop;\n  that._attachEvents = noop;\n  that._detachEvents = noop;\n  that._readValue = noop;\n  that._clearValue = noop;\n  that._fillValue = noop;\n  that._markupReady = noop;\n  that._markupInserted = noop;\n  that._markupRemove = noop;\n  that._position = noop;\n  that.__processSettings = noop;\n  that.__init = noop;\n  that.__destroy = noop; // Generic frame functions\n\n  /**\r\n   * Destroys the mobiscroll instance.\r\n   */\n\n  that._destroy = function () {\n    // Force hide without animation\n    that.hide(true, false, true);\n    $elm.off('.mbsc');\n    tapOff($elm); // Remove all events from elements\n\n    $$1.each(elmList, function (i, v) {\n      v.el.off('.mbsc').prop('readonly', v.readOnly);\n      tapOff(v.el);\n\n      if (v.lbl) {\n        v.lbl.off('.mbsc');\n        tapOff(v.lbl);\n      }\n    });\n\n    that.__destroy();\n  };\n\n  that._updateHeader = function () {\n    var t = s.headerText,\n        txt = t ? typeof t === 'function' ? t.call(el, that._tempValue) : t.replace(/\\{value\\}/i, that._tempValue) : '';\n    $header.html(txt || '&nbsp;');\n  };\n\n  that._getRespCont = function () {\n    hasContext = s.context != 'body';\n    $wnd = $$1(hasContext ? s.context : window);\n    return s.display == 'inline' ? $elm.is('div') ? $elm : $elm.parent() : $wnd;\n  };\n\n  that._processSettings = function (resp) {\n    var b, i;\n\n    that.__processSettings(resp);\n\n    isPointer = !s.touchUi;\n\n    if (isPointer) {\n      s.display = resp.display || settings.display || 'bubble';\n      s.buttons = resp.buttons || settings.buttons || [];\n      s.showOverlay = resp.showOverlay || settings.showOverlay || false;\n    } // Add default buttons\n\n\n    s.buttons = s.buttons || (s.display !== 'inline' ? ['cancel', 'set'] : []); // Hide header text in inline mode by default\n\n    s.headerText = s.headerText === undefined ? s.display !== 'inline' ? '{value}' : false : s.headerText;\n    buttons = s.buttons || [];\n    isModal = s.display !== 'inline';\n    $ctx = $$1(s.context);\n    $lock = hasContext ? $ctx : $$1('body,html');\n    ctx = $ctx[0];\n    that.live = true; // If no set button is found, live mode is activated\n\n    for (i = 0; i < buttons.length; i++) {\n      b = buttons[i];\n\n      if (b == 'ok' || b == 'set' || b.handler == 'set') {\n        that.live = false;\n      }\n    }\n\n    that.buttons.set = {\n      text: s.setText,\n      icon: s.setIcon,\n      handler: 'set'\n    };\n    that.buttons.cancel = {\n      text: s.cancelText,\n      icon: s.cancelIcon,\n      handler: 'cancel'\n    };\n    that.buttons.close = {\n      text: s.closeText,\n      icon: s.closeIcon,\n      handler: 'cancel'\n    };\n    that.buttons.clear = {\n      text: s.clearText,\n      icon: s.clearIcon,\n      handler: 'clear'\n    };\n    that._isInput = $elm.is('input');\n  };\n  /**\r\n   * Scroller initialization.\r\n   */\n\n\n  that._init = function (newSettings) {\n    var wasVisible = that._isVisible,\n        wasReady = wasVisible && !$markup.hasClass('mbsc-fr-pos');\n\n    if (wasVisible) {\n      that.hide(true, false, true);\n    } // Unbind all events (if re-init)\n\n\n    $elm.off('.mbsc');\n    tapOff($elm);\n\n    that.__init(newSettings);\n\n    that._isLiquid = s.layout == 'liquid';\n\n    if (isModal) {\n      that._readValue();\n\n      if (!that._hasContent && !s.skipShow) {\n        that.attachShow($elm);\n      }\n\n      if (wasVisible) {\n        that.show(wasReady);\n      }\n    } else {\n      that.show();\n    }\n\n    $elm.removeClass('mbsc-cloak').filter('input, select, textarea').on('change.mbsc', function () {\n      if (!that._preventChange) {\n        that.setVal($elm.val(), true, false);\n      }\n\n      that._preventChange = false;\n    });\n  };\n\n  that.buttons = {};\n  that.handlers = {\n    set: that.select,\n    cancel: that.cancel,\n    clear: that.clear\n  };\n  that._value = null;\n  that._isValid = true;\n  that._isVisible = false; // Constructor\n\n  s = that.settings;\n  trigger = that.trigger;\n\n  if (!inherit) {\n    that.init();\n  }\n};\n\nFrame.prototype._defaults = {\n  // Localization\n  lang: 'en',\n  setText: 'Set',\n  selectedText: '{count} selected',\n  closeText: 'Close',\n  cancelText: 'Cancel',\n  clearText: 'Clear',\n  // Options\n  context: 'body',\n  maxPopupWidth: 600,\n  disabled: false,\n  closeOnOverlayTap: true,\n  showOnFocus: isAndroid || isIOS,\n  // Needed for ion-input\n  showOnTap: true,\n  display: 'center',\n  scroll: true,\n  scrollLock: true,\n  showOverlay: true,\n  tap: true,\n  touchUi: true,\n  btnClass: 'mbsc-fr-btn',\n  btnWidth: true,\n  focusTrap: true,\n  focusOnClose: !isIOS8 // Temporary for iOS8\n\n};\nclasses.Frame = Frame;\nthemes.frame.mobiscroll = {\n  headerText: false,\n  btnWidth: false\n};\nthemes.scroller.mobiscroll = extend$1({}, themes.frame.mobiscroll, {\n  rows: 5,\n  showLabel: false,\n  selectedLineBorder: 1,\n  weekDays: 'min',\n  checkIcon: 'ion-ios7-checkmark-empty',\n  btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down5',\n  btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up5',\n  btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left5',\n  btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right5'\n});\n\nif (isBrowser) {\n  // Prevent re-show on window focus\n  $$1(window).on('focus', function () {\n    if ($activeElm) {\n      preventShow = true;\n    }\n  });\n} // eslint-disable-next-line no-unused-vars\n\n\nvar isIOS$1 = os == 'ios';\n\nvar ScrollViewBase = function ScrollViewBase(el, settings, inherit) {\n  var $btn,\n      $scrollbar,\n      $scrollbarTrack,\n      btnTimer,\n      contSize,\n      diffX,\n      diffY,\n      diff,\n      dir,\n      easing,\n      elastic,\n      endX,\n      endY,\n      eventObj,\n      isBtn,\n      isInfinite,\n      maxScroll,\n      maxSnapScroll,\n      minScroll,\n      move,\n      moving,\n      nativeScroll,\n      rafID,\n      //rafMoveID,\n  rafRunning,\n      scrollbar,\n      scrollbarHeight,\n      scrollbarOffset,\n      scrollbarTrack,\n      scrolled,\n      scrollDebounce,\n      scrollSnap,\n      scrollTimer,\n      snap,\n      snapPoints,\n      startPos,\n      startTime,\n      startX,\n      startY,\n      style,\n      target,\n      transTimer,\n      threshold,\n      trigger,\n      vertical,\n      that = this,\n      currPos,\n      currSnap = 0,\n      currSnapDir = 1,\n      s = settings,\n      $elm = $$1(el);\n\n  function onStart(ev) {\n    trigger('onStart', {\n      domEvent: ev\n    }); // Better performance if there are tap events on document\n\n    if (s.stopProp) {\n      ev.stopPropagation();\n    } //if (s.prevDef || ev.type == 'mousedown') {\n\n\n    if (s.prevDef && ev.type == 'mousedown') {\n      // Prevent touch highlight and focus\n      ev.preventDefault();\n    }\n\n    if (s.readonly || s.lock && moving) {\n      return;\n    }\n\n    if (testTouch(ev, this) && !move) {\n      if ($btn) {\n        $btn.removeClass('mbsc-active');\n      } // Highlight button\n\n\n      isBtn = false;\n\n      if (!moving) {\n        $btn = $$1(ev.target).closest('.mbsc-btn-e', this);\n\n        if ($btn.length && !$btn.hasClass('mbsc-disabled')) {\n          isBtn = true;\n          btnTimer = setTimeout(function () {\n            $btn.addClass('mbsc-active');\n          }, 100);\n        }\n      }\n\n      move = true;\n      scrolled = false;\n      nativeScroll = false;\n      that.scrolled = moving;\n      startX = getCoord(ev, 'X');\n      startY = getCoord(ev, 'Y');\n      endX = startX;\n      diffX = 0;\n      diffY = 0;\n      diff = 0;\n      startTime = new Date();\n      startPos = +getPosition(target, vertical) || 0; // Stop scrolling animation, 1ms is needed for Android 4.0\n\n      if (moving) {\n        scroll(startPos, isIOS$1 ? 0 : 1);\n      }\n\n      if (ev.type === 'mousedown') {\n        $$1(document).on('mousemove', onMove).on('mouseup', onEnd);\n      }\n    }\n  }\n\n  function onMove(ev) {\n    if (move) {\n      if (s.stopProp) {\n        ev.stopPropagation();\n      }\n\n      endX = getCoord(ev, 'X');\n      endY = getCoord(ev, 'Y');\n      diffX = endX - startX;\n      diffY = endY - startY;\n      diff = vertical ? diffY : diffX;\n\n      if (isBtn && (Math.abs(diffY) > s.thresholdY || Math.abs(diffX) > s.thresholdX)) {\n        clearTimeout(btnTimer);\n        $btn.removeClass('mbsc-active');\n        isBtn = false;\n      }\n\n      if (that.scrolled || !nativeScroll && Math.abs(diff) > threshold) {\n        if (!scrolled) {\n          trigger('onGestureStart', eventObj);\n        }\n\n        that.scrolled = scrolled = true;\n\n        if (!rafRunning) {\n          rafRunning = true;\n          rafID = raf(onMoving);\n        }\n      }\n\n      if (vertical || s.scrollLock) {\n        // Always prevent native scroll, if vertical\n        ev.preventDefault();\n      } else {\n        if (that.scrolled) {\n          // Prevent native scroll\n          ev.preventDefault();\n        } else if (Math.abs(diffY) > 7) {\n          nativeScroll = true;\n          that.scrolled = true;\n          onEnd();\n        }\n      }\n    }\n  }\n\n  function onMoving() {\n    //var time = new Date();\n    if (maxSnapScroll) {\n      diff = constrain(diff, -snap * maxSnapScroll, snap * maxSnapScroll);\n    }\n\n    scroll(constrain(startPos + diff, minScroll - elastic, maxScroll + elastic)); //if (s.momentum) {\n    //    startTime = time;\n    //    lastX = endX;\n    //}\n\n    rafRunning = false;\n  }\n\n  function onEnd(ev) {\n    if (move) {\n      var speed,\n          time = new Date() - startTime; // Better performance if there are tap events on document\n\n      if (s.stopProp && ev) {\n        ev.stopPropagation();\n      }\n\n      rafc(rafID);\n      rafRunning = false;\n\n      if (!nativeScroll && that.scrolled) {\n        // Calculate momentum distance\n        if (s.momentum && time < 300) {\n          speed = diff / time; //speed = Math.abs(lastX - endX) / time;\n\n          diff = Math.max(Math.abs(diff), speed * speed / s.speedUnit) * (diff < 0 ? -1 : 1);\n        }\n\n        finalize(diff);\n      }\n\n      if (isBtn) {\n        clearTimeout(btnTimer);\n        $btn.addClass('mbsc-active');\n        setTimeout(function () {\n          $btn.removeClass('mbsc-active');\n        }, 100);\n\n        if (!nativeScroll && !that.scrolled) {\n          trigger('onBtnTap', {\n            target: $btn[0],\n            domEvent: ev\n          });\n        }\n      } // Detach document events\n\n\n      if (ev && ev.type == 'mouseup') {\n        $$1(document).off('mousemove', onMove).off('mouseup', onEnd);\n      }\n\n      move = false;\n    }\n  }\n\n  function onClick(ev) {\n    if (that.scrolled) {\n      that.scrolled = false;\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  function onScroll(ev) {\n    if (!el.contains(ev.target)) {\n      return;\n    }\n\n    ev = ev.originalEvent || ev;\n    diff = vertical ? ev.deltaY == undefined ? ev.wheelDelta || ev.detail : ev.deltaY : ev.deltaX;\n    trigger('onStart', {\n      domEvent: ev\n    });\n\n    if (s.stopProp) {\n      ev.stopPropagation();\n    }\n\n    if (diff) {\n      ev.preventDefault(); //diff = diff < 0 ? 20 : -20;\n\n      if (ev.deltaMode && ev.deltaMode == 1) {\n        diff *= 15;\n      }\n\n      diff = constrain(-diff, -scrollSnap, scrollSnap);\n      startPos = currPos;\n\n      if (s.readonly) {\n        return;\n      }\n\n      if (!scrolled) {\n        gestureStart();\n      }\n\n      if (startPos + diff < minScroll) {\n        startPos = minScroll;\n        diff = 0;\n      }\n\n      if (startPos + diff > maxScroll) {\n        startPos = maxScroll;\n        diff = 0;\n      }\n\n      if (!rafRunning) {\n        rafRunning = true;\n        rafID = raf(onMoving);\n      }\n\n      if (!diff && scrolled) {\n        return;\n      }\n\n      scrolled = true;\n      clearTimeout(scrollDebounce);\n      scrollDebounce = setTimeout(function () {\n        rafc(rafID);\n        rafRunning = false;\n        scrolled = false;\n        finalize(diff);\n      }, 200);\n    }\n  }\n\n  function onScrollBarStart(ev) {\n    trigger('onStart', {\n      domEvent: ev\n    });\n\n    if (s.readonly) {\n      return;\n    }\n\n    ev.stopPropagation();\n    startPos = currPos;\n    scrolled = false;\n\n    if (ev.target == scrollbar) {\n      startY = getCoord(ev, 'Y', true);\n      $$1(document).on('mousemove', onScrollBarMove).on('mouseup', onScrollBarEnd);\n    } else {\n      startY = $scrollbar.offset().top;\n      onScrollBarMove(ev);\n      onScrollBarEnd();\n    }\n  }\n\n  function onScrollBarMove(ev) {\n    var percent = (getCoord(ev, 'Y', true) - startY) / contSize;\n\n    if (isInfinite) {\n      diff = -(maxSnapScroll * snap * 2 + contSize) * percent;\n      diff = constrain(diff, -snap * maxSnapScroll, snap * maxSnapScroll);\n    } else {\n      diff = (minScroll - maxScroll - contSize) * percent;\n    }\n\n    if (!scrolled) {\n      gestureStart();\n    }\n\n    scrolled = true;\n    scroll(constrain(startPos + diff, minScroll - elastic, maxScroll + elastic));\n  }\n\n  function onScrollBarEnd() {\n    startPos = currPos;\n    finalize(0);\n    $$1(document).off('mousemove', onScrollBarMove).off('mouseup', onScrollBarEnd);\n  }\n\n  function onScrollBarClick(ev) {\n    ev.stopPropagation();\n  }\n\n  function gestureStart() {\n    eventObj = {\n      posX: vertical ? 0 : currPos,\n      posY: vertical ? currPos : 0,\n      originX: vertical ? 0 : startPos,\n      originY: vertical ? startPos : 0,\n      direction: diff > 0 ? vertical ? 270 : 360 : vertical ? 90 : 180\n    };\n    trigger('onGestureStart', eventObj);\n  }\n\n  function finalize(diff) {\n    var i, time, newPos; // Limit scroll to snap size\n\n    if (maxSnapScroll) {\n      diff = constrain(diff, -snap * maxSnapScroll, snap * maxSnapScroll);\n    } // Calculate snap and limit between min and max\n\n\n    newPos = constrain(Math.round((startPos + diff) / snap) * snap, minScroll, maxScroll); // Snap to nearest element\n\n    if (snapPoints) {\n      if (diff < 0) {\n        for (i = snapPoints.length - 1; i >= 0; i--) {\n          if (Math.abs(newPos) + contSize >= snapPoints[i].breakpoint) {\n            currSnap = i;\n            currSnapDir = 2;\n            newPos = snapPoints[i].snap2;\n            break;\n          }\n        }\n      } else if (diff >= 0) {\n        for (i = 0; i < snapPoints.length; i++) {\n          if (Math.abs(newPos) <= snapPoints[i].breakpoint) {\n            currSnap = i;\n            currSnapDir = 1;\n            newPos = snapPoints[i].snap1;\n            break;\n          }\n        }\n      }\n\n      newPos = constrain(newPos, minScroll, maxScroll);\n    }\n\n    time = s.time || (currPos < minScroll || currPos > maxScroll ? 1000 : Math.max(1000, Math.abs(newPos - currPos) * s.timeUnit));\n    eventObj.destinationX = vertical ? 0 : newPos;\n    eventObj.destinationY = vertical ? newPos : 0;\n    eventObj.duration = time;\n    eventObj.transitionTiming = easing;\n    trigger('onGestureEnd', eventObj); // Scroll to the calculated position\n\n    that.scroll(newPos, time);\n  }\n\n  function scroll(pos, time, tap, callback) {\n    var percent,\n        changed = pos != currPos,\n        anim = time > 1,\n        timing = time ? cssPrefix + 'transform ' + Math.round(time) + 'ms ' + easing : '',\n        done = function done() {\n      clearInterval(scrollTimer);\n      clearTimeout(transTimer); //rafc(rafMoveID);\n\n      moving = false;\n      currPos = pos;\n      eventObj.posX = vertical ? 0 : pos;\n      eventObj.posY = vertical ? pos : 0;\n\n      if (changed) {\n        trigger('onMove', eventObj);\n      }\n\n      if (anim) {\n        //that.scrolled = false;\n        trigger('onAnimationEnd', eventObj);\n      }\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    eventObj = {\n      posX: vertical ? 0 : currPos,\n      posY: vertical ? currPos : 0,\n      originX: vertical ? 0 : startPos,\n      originY: vertical ? startPos : 0,\n      direction: pos - currPos > 0 ? vertical ? 270 : 360 : vertical ? 90 : 180\n    };\n    currPos = pos;\n\n    if (anim) {\n      eventObj.destinationX = vertical ? 0 : pos;\n      eventObj.destinationY = vertical ? pos : 0;\n      eventObj.duration = time;\n      eventObj.transitionTiming = easing;\n      trigger('onAnimationStart', eventObj);\n    }\n\n    style[jsPrefix + 'Transition'] = timing;\n    style[jsPrefix + 'Transform'] = 'translate3d(' + (vertical ? '0,' + pos + 'px,' : pos + 'px,' + '0,') + '0)';\n\n    if (scrollbar && scrollbarHeight) {\n      percent = isInfinite ? (scrollbarOffset - pos) / (maxSnapScroll * snap * 2) : (pos - maxScroll) / (minScroll - maxScroll);\n      scrollbar.style[jsPrefix + 'Transition'] = timing;\n      scrollbar.style[jsPrefix + 'Transform'] = 'translate3d(0,' + Math.max(0, Math.min((contSize - scrollbarHeight) * percent, contSize - scrollbarHeight)) + 'px,0)';\n    }\n\n    if (!changed && !moving || !time || time <= 1) {\n      done();\n    } else if (time) {\n      moving = !tap;\n      clearInterval(scrollTimer);\n      scrollTimer = setInterval(function () {\n        //rafMoveID = raf(function () {\n        var p = +getPosition(target, vertical) || 0;\n        eventObj.posX = vertical ? 0 : p;\n        eventObj.posY = vertical ? p : 0;\n        trigger('onMove', eventObj); // Trigger done if close to the end\n\n        if (Math.abs(p - pos) < 2) {\n          done();\n        } //});\n\n      }, 100);\n      clearTimeout(transTimer);\n      transTimer = setTimeout(function () {\n        done(); //style[pr + 'Transition'] = '';\n      }, time); // target.off(transEnd).on(transEnd, function (e) {\n      //     if (e.target === target[0]) {\n      //         target.off(transEnd);\n      //         style[pr + 'Transition'] = '';\n      //         done();\n      //     }\n      // });\n    }\n\n    if (s.sync) {\n      s.sync(pos, time, easing);\n    }\n  } // Call the parent constructor\n\n\n  Base.call(this, el, settings, true);\n  that.scrolled = false;\n  /**\r\n   * Scroll to the given position or element\r\n   */\n\n  that.scroll = function (pos, time, tap, callback) {\n    // If position is not numeric, scroll to element\n    if (!isNumeric(pos)) {\n      pos = Math.ceil(($$1(pos, el).length ? Math.round(target.offset()[dir] - $$1(pos, el).offset()[dir]) : currPos) / snap) * snap;\n    } else {\n      pos = Math.round(pos / snap) * snap;\n    }\n\n    pos = constrain(pos, minScroll, maxScroll);\n    currSnap = Math.round(pos / snap);\n    startPos = currPos;\n    scrollbarOffset = maxSnapScroll * snap + pos;\n    scroll(pos, time, tap, callback);\n  };\n\n  that.refresh = function (noScroll) {\n    var tempScroll;\n    contSize = (s.contSize === undefined ? vertical ? $elm.height() : $elm.width() : s.contSize) || 0;\n    maxScroll = (s.maxScroll === undefined ? 0 : s.maxScroll) || 0;\n    minScroll = Math.min(maxScroll, s.minScroll === undefined ? Math.min(0, vertical ? contSize - target.height() : contSize - target.width()) : s.minScroll) || 0;\n    snapPoints = null;\n\n    if (!vertical && s.rtl) {\n      tempScroll = maxScroll;\n      maxScroll = -minScroll;\n      minScroll = -tempScroll;\n    }\n\n    if (isString(s.snap)) {\n      snapPoints = [];\n      target.find(s.snap).each(function () {\n        var offset = vertical ? this.offsetTop : this.offsetLeft,\n            size = vertical ? this.offsetHeight : this.offsetWidth;\n        snapPoints.push({\n          breakpoint: offset + size / 2,\n          snap1: -offset,\n          snap2: contSize - offset - size\n        });\n      });\n    }\n\n    snap = isNumeric(s.snap) ? s.snap : 1;\n    maxSnapScroll = s.snap ? s.maxSnapScroll : 0;\n    easing = s.easing;\n    elastic = s.elastic ? isNumeric(s.snap) ? snap : isNumeric(s.elastic) ? s.elastic : 0 : 0; // && s.snap ? snap : 0;\n\n    scrollSnap = snap;\n\n    while (scrollSnap > 44) {\n      scrollSnap /= 2;\n    }\n\n    scrollSnap = Math.round(44 / scrollSnap) * scrollSnap;\n\n    if (scrollbar) {\n      isInfinite = minScroll == -Infinity || maxScroll == Infinity;\n      scrollbarHeight = minScroll < maxScroll ? Math.max(20, contSize * contSize / (maxScroll - minScroll + contSize)) : 0;\n      scrollbar.style.height = scrollbarHeight + 'px';\n      scrollbarTrack.style.height = scrollbarHeight ? '' : 0;\n    }\n\n    if (currPos === undefined) {\n      currPos = s.initialPos;\n      currSnap = Math.round(currPos / snap);\n    }\n\n    if (!noScroll) {\n      that.scroll(s.snap ? snapPoints && snapPoints[currSnap] ? snapPoints[currSnap]['snap' + currSnapDir] : currSnap * snap : currPos);\n    }\n  };\n\n  that._processSettings = function () {\n    vertical = s.axis == 'Y';\n    dir = vertical ? 'top' : 'left';\n    target = s.moveElement || $elm.children().eq(0);\n    style = target[0].style;\n    threshold = vertical ? s.thresholdY : s.thresholdX;\n\n    if (s.scrollbar) {\n      $scrollbarTrack = s.scrollbar;\n      $scrollbar = $scrollbarTrack.find('.mbsc-sc-bar');\n      scrollbar = $scrollbar[0];\n      scrollbarTrack = $scrollbarTrack[0];\n    }\n  };\n\n  that._init = function () {\n    that.refresh();\n    listen(el, 'mousedown', onStart);\n    listen(el, 'touchstart', onStart, {\n      passive: true\n    });\n    listen(el, 'touchend', onEnd);\n    listen(el, 'touchcancel', onEnd);\n    listen(el, 'click', onClick, true);\n    listen(document, 'touchmove', onMove, {\n      passive: false\n    });\n\n    if (s.mousewheel) {\n      listen(document, 'wheel', onScroll, {\n        passive: false,\n        capture: true\n      });\n      listen(document, 'mousewheel', onScroll, {\n        passive: false,\n        capture: true\n      });\n    }\n\n    if (scrollbar) {\n      $scrollbarTrack.on('mousedown', onScrollBarStart).on('click', onScrollBarClick);\n    } //el.addEventListener('touchend', function (ev) {\n    //    if (scrolled) {\n    //        ev.stopPropagation();\n    //    }\n    //}, true);\n\n  };\n  /**\r\n   * Destroy\r\n   */\n\n\n  that._destroy = function () {\n    clearInterval(scrollTimer);\n    unlisten(el, 'mousedown', onStart);\n    unlisten(el, 'touchstart', onStart, {\n      passive: true\n    });\n    unlisten(el, 'touchend', onEnd);\n    unlisten(el, 'touchcancel', onEnd);\n    unlisten(el, 'click', onClick, true);\n    unlisten(document, 'touchmove', onMove, {\n      passive: false\n    });\n    unlisten(document, 'wheel', onScroll, {\n      passive: false,\n      capture: true\n    });\n    unlisten(document, 'mousewheel', onScroll, {\n      passive: false,\n      capture: true\n    });\n\n    if (scrollbar) {\n      $scrollbarTrack.off('mousedown', onScrollBarStart).off('click', onScrollBarClick);\n    }\n  }; // Constructor\n\n\n  s = that.settings;\n  trigger = that.trigger;\n\n  if (!inherit) {\n    that.init();\n  }\n};\n\nScrollViewBase.prototype = {\n  _defaults: {\n    speedUnit: 0.0022,\n    //timeUnit: 0.8,\n    timeUnit: 3,\n    initialPos: 0,\n    axis: 'Y',\n    thresholdX: 10,\n    thresholdY: 5,\n    //easing: 'ease-out',\n    easing: 'cubic-bezier(0.190, 1.000, 0.220, 1.000)',\n    stopProp: true,\n    momentum: true,\n    mousewheel: true,\n    elastic: true\n  }\n}; // eslint-disable-next-line no-unused-vars\n\nvar presets = {},\n    css = isBrowser ? window.CSS : null,\n    has3d = css && css.supports && css.supports(\"(transform-style: preserve-3d)\");\n\nfunction sanitize(str) {\n  return (str + '').replace('\"', '___');\n}\n\nvar Scroller = function Scroller(el, settings, inherit) {\n  var $markup,\n      batchSize3d,\n      batchSize = 40,\n      animTime = 1000,\n      scroll3dAngle,\n      scroll3d,\n      selectedClass,\n      showScrollArrows,\n      stepper,\n      tempWheelArray,\n      itemHeight,\n      itemHeight3d,\n      isPointer,\n      isValidating,\n      s,\n      trigger,\n      lines,\n      wheels,\n      wheelsMap,\n      that = this,\n      $elm = $$1(el); // Event handlers\n\n  function onKeyDown(ev) {\n    var i = +$$1(this).attr('data-index'),\n        handle,\n        direction;\n\n    if (ev.keyCode == 38) {\n      // Up\n      handle = true;\n      direction = -1;\n    } else if (ev.keyCode == 40) {\n      // Down\n      handle = true;\n      direction = 1;\n    } else if (ev.keyCode == 32) {\n      // Space\n      handle = true;\n      onItemTap(i, $$1(ev.target));\n    }\n\n    if (handle) {\n      ev.stopPropagation();\n      ev.preventDefault();\n\n      if (direction) {\n        stepper.start(i, direction, ev);\n      }\n    }\n  }\n\n  function onKeyUp() {\n    stepper.stop();\n  }\n\n  function onItemTap(i, $item) {\n    var wheel = wheels[i],\n        idx = +$item.attr('data-index'),\n        val = getValue(wheel, idx),\n        selected = that._tempSelected[i],\n        maxSelect = isNumeric(wheel.multiple) ? wheel.multiple : Infinity;\n\n    if (trigger('onItemTap', {\n      target: $item[0],\n      index: i,\n      value: val,\n      selected: $item.hasClass('mbsc-sc-itm-sel')\n    }) !== false && !that._prevItemTap) {\n      // Select item on tap\n      if (wheel.multiple && !wheel._disabled[val]) {\n        if (selected[val] !== undefined) {\n          $item.removeClass(selectedClass).removeAttr('aria-selected');\n          delete selected[val];\n        } else {\n          if (maxSelect == 1) {\n            that._tempSelected[i] = selected = {};\n\n            wheel._$markup.find('.mbsc-sc-itm-sel').removeClass(selectedClass).removeAttr('aria-selected');\n          }\n\n          if (objectToArray(selected).length < maxSelect) {\n            $item.addClass(selectedClass).attr('aria-selected', 'true');\n            selected[val] = val;\n          }\n        }\n      }\n\n      setWheelValue(wheel, i, idx, animTime, wheel._index < idx ? 1 : 2, true, wheel.multiple);\n\n      if (that.live && (!wheel.multiple || wheel.multiple === 1 && s.tapSelect) && (s.setOnTap === true || s.setOnTap[i])) {\n        setTimeout(function () {\n          that.select();\n        }, s.tapSelect ? 0 : 200);\n      }\n    }\n\n    that._prevItemTap = false;\n  } // Private functions\n\n\n  function shouldSet(i, noscroll) {\n    var wheel = wheels[i];\n    return wheel && (!wheel.multiple || wheel.multiple !== 1 && noscroll && (s.setOnTap === true || s.setOnTap[i]));\n  }\n\n  function getMin(wheel) {\n    return -(wheel.max - wheel._offset - (wheel.multiple && !scroll3d ? Math.floor(s.rows / 2) : 0)) * itemHeight;\n  }\n\n  function getMax(wheel) {\n    return -(wheel.min - wheel._offset + (wheel.multiple && !scroll3d ? Math.floor(s.rows / 2) : 0)) * itemHeight;\n  }\n\n  function getIndex(wheel, val) {\n    return (wheel._array ? wheel._map[val] : +wheel.getIndex(val, that)) || 0;\n  }\n\n  function getItem(wheel, i) {\n    var data = wheel.data;\n\n    if (i >= wheel.min && i <= wheel.max) {\n      return wheel._array ? wheel.circular ? $$1(data).get(i % wheel._length) : data[i] : $$1.isFunction(data) ? data(i, that) : '';\n    }\n  }\n\n  function getItemValue(item) {\n    return $$1.isPlainObject(item) ? item.value !== undefined ? item.value : item.display : item;\n  }\n\n  function getItemText(item) {\n    var text = $$1.isPlainObject(item) ? item.display : item;\n    return text === undefined ? '' : text;\n  }\n\n  function getValue(wheel, i) {\n    return getItemValue(getItem(wheel, i));\n  }\n\n  function step(index, direction, ev) {\n    var wheel = wheels[index];\n    setWheelValue(wheel, index, wheel._index + direction, s.delay + 100, direction == 1 ? 1 : 2, false, false, ev.type == 'keydown');\n  }\n\n  function isReadOnly(i) {\n    return $$1.isArray(s.readonly) ? s.readonly[i] : s.readonly;\n  }\n\n  function initWheel(ww, l, keep) {\n    // Create a copy of the wheel, in case if same option object is used for multiple scroller instances\n    var w = extend$1(wheels[l] || {}, ww);\n    var index = w._index - w._batch;\n    w.data = w.data || [];\n    w.key = w.key !== undefined ? w.key : l;\n    w.label = w.label !== undefined ? w.label : l;\n    w._map = {};\n    w._array = $$1.isArray(w.data); // Map keys to index\n\n    if (w._array) {\n      w._length = w.data.length;\n      $$1.each(w.data, function (i, v) {\n        w._map[getItemValue(v)] = i;\n      });\n    }\n\n    w.circular = s.circular === undefined ? w.circular === undefined ? w._array && w._length > s.rows : w.circular : $$1.isArray(s.circular) ? s.circular[l] : s.circular;\n    w.min = w._array ? w.circular ? -Infinity : 0 : w.min === undefined ? -Infinity : w.min;\n    w.max = w._array ? w.circular ? Infinity : w._length - 1 : w.max === undefined ? Infinity : w.max;\n    w._nr = l;\n    w._index = getIndex(w, tempWheelArray[l]);\n    w._disabled = {};\n    w._batch = 0;\n    w._current = w._index;\n    w._first = w._index - batchSize; //Math.max(w.min, w._current - batchSize);\n\n    w._last = w._index + batchSize; //Math.min(w.max, w._first + 2 * batchSize);\n\n    w._offset = w._first;\n\n    if (keep) {\n      w._offset -= w._margin / itemHeight + (w._index - index);\n      w._margin += (w._index - index) * itemHeight;\n    } else {\n      w._margin = 0; //w._first * itemHeight;\n    }\n\n    w._refresh = function (noScroll) {\n      extend$1(w._scroller.settings, {\n        minScroll: getMin(w),\n        maxScroll: getMax(w)\n      });\n\n      w._scroller.refresh(noScroll);\n    };\n\n    wheelsMap[w.key] = w;\n    return w;\n  }\n\n  function generateItems(wheel, index, start, end, is3d) {\n    var i,\n        css,\n        item,\n        value,\n        text,\n        lbl,\n        invalid,\n        selected,\n        html = '',\n        checked = that._tempSelected[index],\n        disabled = wheel._disabled || {};\n\n    for (i = start; i <= end; i++) {\n      item = getItem(wheel, i);\n      text = getItemText(item);\n      value = getItemValue(item);\n      css = item && item.cssClass !== undefined ? item.cssClass : '';\n      lbl = item && item.label !== undefined ? item.label : '';\n      invalid = item && item.invalid;\n      selected = value !== undefined && value == tempWheelArray[index] && !wheel.multiple; // TODO: don't generate items with no value (use margin or placeholder instead)\n\n      html += '<div role=\"option\" tabindex=\"-1\" aria-selected=\"' + (checked[value] ? true : false) + '\" class=\"mbsc-sc-itm ' + (is3d ? 'mbsc-sc-itm-3d ' : '') + css + ' ' + (selected ? 'mbsc-sc-itm-sel ' : '') + (checked[value] ? selectedClass : '') + (value === undefined ? ' mbsc-sc-itm-ph' : ' mbsc-btn-e') + (invalid ? ' mbsc-sc-itm-inv-h mbsc-disabled' : '') + (disabled[value] ? ' mbsc-sc-itm-inv mbsc-disabled' : '') + '\" data-index=\"' + i + '\" data-val=\"' + sanitize(value) + '\"' + (lbl ? ' aria-label=\"' + lbl + '\"' : '') + (selected ? ' aria-selected=\"true\"' : '') + ' style=\"height:' + itemHeight + 'px;line-height:' + itemHeight + 'px;' + (is3d ? cssPrefix + 'transform:rotateX(' + (wheel._offset - i) * scroll3dAngle % 360 + 'deg) translateZ(' + itemHeight * s.rows / 2 + 'px);' : '') + '\">' + (lines > 1 ? '<div class=\"mbsc-sc-itm-ml\" style=\"line-height:' + Math.round(itemHeight / lines) + 'px;font-size:' + Math.round(itemHeight / lines * 0.8) + 'px;\">' : '') + text + (lines > 1 ? '</div>' : '') + '</div>';\n    }\n\n    return html;\n  }\n\n  function infinite(wheel, i, pos) {\n    var index = Math.round(-pos / itemHeight) + wheel._offset,\n        diff = index - wheel._current,\n        first = wheel._first,\n        last = wheel._last,\n        first3d = first + batchSize - batchSize3d + 1,\n        last3d = last - batchSize + batchSize3d;\n\n    if (diff) {\n      wheel._first += diff;\n      wheel._last += diff;\n      wheel._current = index; // Generate items\n      //setTimeout(function () {\n\n      if (diff > 0) {\n        wheel._$scroller.append(generateItems(wheel, i, Math.max(last + 1, first + diff), last + diff));\n\n        $$1('.mbsc-sc-itm', wheel._$scroller).slice(0, Math.min(diff, last - first + 1)).remove(); // 3D\n\n        if (scroll3d) {\n          wheel._$3d.append(generateItems(wheel, i, Math.max(last3d + 1, first3d + diff), last3d + diff, true));\n\n          $$1('.mbsc-sc-itm', wheel._$3d).slice(0, Math.min(diff, last3d - first3d + 1)).attr('class', 'mbsc-sc-itm-del');\n        }\n      } else if (diff < 0) {\n        wheel._$scroller.prepend(generateItems(wheel, i, first + diff, Math.min(first - 1, last + diff)));\n\n        $$1('.mbsc-sc-itm', wheel._$scroller).slice(Math.max(diff, first - last - 1)).remove(); // 3D\n\n        if (scroll3d) {\n          wheel._$3d.prepend(generateItems(wheel, i, first3d + diff, Math.min(first3d - 1, last3d + diff), true));\n\n          $$1('.mbsc-sc-itm', wheel._$3d).slice(Math.max(diff, first3d - last3d - 1)).attr('class', 'mbsc-sc-itm-del');\n        }\n      }\n\n      wheel._margin += diff * itemHeight;\n\n      wheel._$scroller.css('margin-top', wheel._margin + 'px'); //}, 10);\n\n    }\n  }\n\n  function getValid(index, v, dir, dis) {\n    var counter,\n        wheel = wheels[index],\n        disabled = dis || wheel._disabled,\n        idx = getIndex(wheel, v),\n        val = getValue(wheel, idx),\n        v1 = val,\n        v2 = val,\n        dist1 = 0,\n        dist2 = 0; // TODO: what if all items are invalid\n\n    if (disabled[val] === true) {\n      counter = 0;\n\n      while (idx - dist1 >= wheel.min && disabled[v1] && counter < 100) {\n        counter++;\n        dist1++;\n        v1 = getValue(wheel, idx - dist1);\n      }\n\n      counter = 0;\n\n      while (idx + dist2 < wheel.max && disabled[v2] && counter < 100) {\n        counter++;\n        dist2++;\n        v2 = getValue(wheel, idx + dist2);\n      } // If we have direction (+/- or mouse wheel), the distance does not count\n\n\n      if ((dist2 < dist1 && dist2 && dir !== 2 || !dist1 || idx - dist1 < 0 || dir == 1) && !disabled[v2]) {\n        val = v2;\n      } else {\n        val = v1;\n      }\n    }\n\n    return val;\n  }\n\n  function scrollToPos(time, index, dir, manual, tap, noscroll, shouldFocus) {\n    var diff,\n        idx,\n        offset,\n        ret,\n        isVisible = that._isVisible;\n    isValidating = true;\n    ret = s.validate.call(el, {\n      values: tempWheelArray.slice(0),\n      index: index,\n      direction: dir\n    }, that) || {};\n    isValidating = false;\n\n    if (ret.valid) {\n      that._tempWheelArray = tempWheelArray = ret.valid.slice(0);\n    }\n\n    if (!noscroll) {\n      $$1.each(wheels, function (i, wheel) {\n        if (isVisible) {\n          // Enable all items\n          wheel._$markup.find('.mbsc-sc-itm-inv').removeClass('mbsc-sc-itm-inv mbsc-disabled');\n        }\n\n        wheel._disabled = {}; // Disable invalid items\n\n        if (ret.disabled && ret.disabled[i]) {\n          $$1.each(ret.disabled[i], function (j, v) {\n            wheel._disabled[v] = true;\n\n            if (isVisible) {\n              wheel._$markup.find('.mbsc-sc-itm[data-val=\"' + sanitize(v) + '\"]').addClass('mbsc-sc-itm-inv mbsc-disabled');\n            }\n          });\n        } // Get closest valid value\n\n\n        tempWheelArray[i] = wheel.multiple ? tempWheelArray[i] : getValid(i, tempWheelArray[i], dir);\n\n        if (isVisible) {\n          if (!wheel.multiple || index === undefined) {\n            wheel._$markup.find('.mbsc-sc-itm-sel').removeClass(selectedClass).removeAttr('aria-selected');\n          } // Get index of valid value\n\n\n          idx = getIndex(wheel, tempWheelArray[i]);\n          diff = idx - wheel._index + wheel._batch;\n\n          if (Math.abs(diff) > 2 * batchSize + 1) {\n            offset = diff + (2 * batchSize + 1) * (diff > 0 ? -1 : 1);\n            wheel._offset += offset;\n            wheel._margin -= offset * itemHeight;\n\n            wheel._refresh();\n          }\n\n          wheel._index = idx + wheel._batch;\n\n          if (wheel.multiple) {\n            // Add selected styling to selected elements in case of multiselect\n            if (index === undefined) {\n              for (var v in that._tempSelected[i]) {\n                wheel._$markup.find('.mbsc-sc-itm[data-val=\"' + sanitize(v) + '\"]').addClass(selectedClass).attr('aria-selected', 'true');\n              }\n            }\n          } else {\n            // Mark element as aria selected\n            wheel._$markup.find('.mbsc-sc-itm[data-val=\"' + sanitize(tempWheelArray[i]) + '\"]').addClass('mbsc-sc-itm-sel').attr('aria-selected', 'true');\n          }\n\n          if (wheel._$active) {\n            wheel._$active.attr('tabindex', -1);\n          }\n\n          wheel._$active = wheel._$markup.find('.mbsc-sc-itm[data-index=\"' + wheel._index + '\"]').eq(scroll3d && wheel.multiple ? 1 : 0).attr('tabindex', 0);\n\n          if (shouldFocus && index === i && wheel._$active.length) {\n            wheel._$active[0].focus();\n\n            wheel._$scroller.parent().scrollTop(0);\n          } // Scroll to valid value\n\n\n          wheel._scroller.scroll(-(idx - wheel._offset + wheel._batch) * itemHeight, index === i || index === undefined ? time : animTime, tap);\n        }\n      });\n    }\n\n    trigger('onValidated', {\n      index: index,\n      time: time\n    }); // Get formatted value\n\n    that._tempValue = s.formatValue.call(el, tempWheelArray, that);\n\n    if (isVisible) {\n      that._updateHeader();\n    } // If in live mode, set and fill value on every move\n\n\n    if (that.live && shouldSet(index, noscroll)) {\n      that._hasValue = manual || that._hasValue;\n      setValue(manual, manual, 0, true);\n\n      if (manual) {\n        trigger('onSet', {\n          valueText: that._value\n        });\n      }\n    }\n\n    if (manual) {\n      trigger('onChange', {\n        index: index,\n        valueText: that._tempValue\n      });\n    }\n  }\n\n  function setWheelValue(wheel, i, idx, time, dir, tap, noscroll, shouldFocus) {\n    // Get the value at the given index\n    var value = getValue(wheel, idx);\n\n    if (value !== undefined) {\n      tempWheelArray[i] = value; // In case of circular wheels calculate the offset of the current batch\n\n      wheel._batch = wheel._array ? Math.floor(idx / wheel._length) * wheel._length : 0;\n      wheel._index = idx;\n      setTimeout(function () {\n        scrollToPos(time, i, dir, true, tap, noscroll, shouldFocus);\n      }, 10);\n    }\n  }\n\n  function setValue(fill, change, time, noscroll, temp) {\n    if (!noscroll) {\n      scrollToPos(time);\n    } else {\n      that._tempValue = s.formatValue.call(el, that._tempWheelArray, that);\n    }\n\n    if (!temp) {\n      that._wheelArray = [];\n\n      for (var i = 0; i < tempWheelArray.length; i++) {\n        // In case of multiple select wheel take the first selected value,\n        that._wheelArray[i] = wheels[i] && wheels[i].multiple ? Object.keys(that._tempSelected[i] || {})[0] : tempWheelArray[i];\n      }\n\n      that._value = that._hasValue ? that._tempValue : null;\n      that._selected = extend$1(true, {}, that._tempSelected);\n    }\n\n    if (fill) {\n      if (that._isInput) {\n        $elm.val(that._hasValue ? that._tempValue : '');\n      }\n\n      trigger('onFill', {\n        valueText: that._hasValue ? that._tempValue : '',\n        change: change\n      });\n\n      if (change) {\n        that._preventChange = true;\n        $elm.trigger('change');\n      }\n    }\n  } // Call the parent constructor\n\n\n  Frame.call(this, el, settings, true); // Public functions\n\n  /**\r\n   * Sets the value of the scroller.\r\n   * @param {Array} val - New value.\r\n   * @param {Boolean} [fill=false] - Set the value of the associated input element.\r\n   * @param {Boolean} [change=false] - Trigger change on the input element.\r\n   * @param {Boolean} [temp=false] - If true, then only set the temporary value (only scroll there but not set the value).\r\n   * @param {Number} [time=0] - Animation time in milliseconds.\r\n   */\n\n  that.setVal = that._setVal = function (val, fill, change, temp, time) {\n    that._hasValue = val !== null && val !== undefined;\n    that._tempWheelArray = tempWheelArray = $$1.isArray(val) ? val.slice(0) : s.parseValue.call(el, val, that) || [];\n    setValue(fill, change === undefined ? fill : change, time, false, temp);\n  };\n  /**\r\n   * Returns the selected value.\r\n   */\n\n\n  that.getVal = that._getVal = function (temp) {\n    var val = that._hasValue || temp ? that[temp ? '_tempValue' : '_value'] : null;\n    return isNumeric(val) ? +val : val;\n  };\n  /*\r\n   * Sets the wheel values (passed as an array).\r\n   */\n\n\n  that.setArrayVal = that.setVal;\n  /*\r\n   * Returns the selected wheel values as an array.\r\n   */\n\n  that.getArrayVal = function (temp) {\n    return temp ? that._tempWheelArray : that._wheelArray;\n  };\n\n  that.changeWheel = function (whls, time, manual) {\n    var i, w, ww;\n    $$1.each(whls, function (key, wheel) {\n      ww = wheelsMap[key]; // Check if wheel exists\n\n      if (ww) {\n        i = ww._nr;\n        w = initWheel(wheel, i, true);\n\n        if (that._isVisible) {\n          if (scroll3d) {\n            w._$3d.html(generateItems(w, i, w._first + batchSize - batchSize3d + 1, w._last - batchSize + batchSize3d, true));\n          }\n\n          w._$scroller.html(generateItems(w, i, w._first, w._last)).css('margin-top', w._margin + 'px');\n\n          w._refresh(isValidating);\n        }\n      }\n    });\n\n    if (that._isVisible && !that._isLiquid && !isValidating) {\n      that.position();\n    }\n\n    if (!isValidating) {\n      scrollToPos(time, undefined, undefined, manual);\n    }\n  };\n  /**\r\n   * Returns the closest valid value.\r\n   */\n\n\n  that.getValidValue = getValid; // Protected overrides\n\n  that._generateContent = function () {\n    var lbl,\n        maxPopupWidth = 0,\n        html = '',\n        style = scroll3d ? cssPrefix + 'transform: translateZ(' + (itemHeight * s.rows / 2 + 3) + 'px);' : '',\n        highlight = '<div class=\"mbsc-sc-whl-l\" style=\"' + style + 'height:' + itemHeight + 'px;margin-top:-' + (itemHeight / 2 + (s.selectedLineBorder || 0)) + 'px;\"></div>',\n        l = 0;\n    $$1.each(s.wheels, function (i, wg) {\n      html += '<div class=\"mbsc-w-p mbsc-sc-whl-gr-c' + (scroll3d ? ' mbsc-sc-whl-gr-3d-c' : '') + (s.showLabel ? ' mbsc-sc-lbl-v' : '') + '\">' + highlight + '<div class=\"mbsc-sc-whl-gr' + (scroll3d ? ' mbsc-sc-whl-gr-3d' : '') + (showScrollArrows ? ' mbsc-sc-cp' : '') + (s.width || s.maxWidth ? '\"' : '\" style=\"max-width:' + s.maxPopupWidth + 'px;\"') + '>';\n      $$1.each(wg, function (j, ww) {\n        // Wheels\n        that._tempSelected[l] = extend$1({}, that._selected[l]); // TODO: this should be done on initialization, not on show\n\n        var w = initWheel(ww, l);\n        wheels[l] = w;\n        maxPopupWidth += s.maxWidth ? s.maxWidth[l] || s.maxWidth : s.width ? s.width[l] || s.width : 0;\n        lbl = w.label !== undefined ? w.label : j;\n        html += '<div class=\"mbsc-sc-whl-w ' + (w.cssClass || '') + (w.multiple ? ' mbsc-sc-whl-multi' : '') + '\" style=\"' + (s.width ? 'width:' + (s.width[l] || s.width) + 'px;' : (s.minWidth ? 'min-width:' + (s.minWidth[l] || s.minWidth) + 'px;' : '') + (s.maxWidth ? 'max-width:' + (s.maxWidth[l] || s.maxWidth) + 'px;' : '')) + '\">' + (isPointer ? '<div class=\"mbsc-sc-bar-c\"><div class=\"mbsc-sc-bar\"></div></div>' : '') + // Scrollbar\n        '<div class=\"mbsc-sc-whl-o\" style=\"' + style + '\"></div>' + highlight + '<div aria-live=\"off\" aria-label=\"' + lbl + '\"' + (w.multiple ? ' aria-multiselectable=\"true\"' : '') + ' role=\"listbox\" data-index=\"' + l + '\" class=\"mbsc-sc-whl\"' + ' style=\"' + 'height:' + s.rows * itemHeight * (scroll3d ? 1.1 : 1) + 'px;\">' + (showScrollArrows ? '<div data-index=\"' + l + '\" data-step=\"1\" class=\"mbsc-sc-btn mbsc-sc-btn-plus ' + (s.btnPlusClass || '') + '\"></div>' + // + button\n        '<div data-index=\"' + l + '\" data-step=\"-1\" class=\"mbsc-sc-btn mbsc-sc-btn-minus ' + (s.btnMinusClass || '') + '\"></div>' : '') + // - button\n        '<div class=\"mbsc-sc-lbl\">' + lbl + '</div>' + // Wheel label\n        '<div class=\"mbsc-sc-whl-c\"' + ' style=\"height:' + itemHeight3d + 'px;margin-top:-' + (itemHeight3d / 2 + 1) + 'px;' + style + '\">' + '<div class=\"mbsc-sc-whl-sc\" style=\"top:' + (itemHeight3d - itemHeight) / 2 + 'px;\">'; // Create wheel values\n\n        html += generateItems(w, l, w._first, w._last) + '</div></div>';\n\n        if (scroll3d) {\n          html += '<div class=\"mbsc-sc-whl-3d\" style=\"height:' + itemHeight + 'px;margin-top:-' + itemHeight / 2 + 'px;\">';\n          html += generateItems(w, l, w._first + batchSize - batchSize3d + 1, w._last - batchSize + batchSize3d, true);\n          html += '</div>';\n        }\n\n        html += '</div></div>';\n        l++;\n      });\n      html += '</div></div>';\n    });\n\n    if (maxPopupWidth) {\n      s.maxPopupWidth = maxPopupWidth;\n    }\n\n    return html;\n  };\n\n  that._attachEvents = function ($markup) {\n    stepper = createStepper($$1('.mbsc-sc-btn', $markup), step, s.delay, isReadOnly, true);\n    $$1('.mbsc-sc-whl', $markup).on('keydown', onKeyDown).on('keyup', onKeyUp);\n  };\n\n  that._detachEvents = function () {\n    stepper.stop();\n\n    for (var i = 0; i < wheels.length; i++) {\n      wheels[i]._scroller.destroy();\n    }\n  };\n\n  that._markupReady = function ($m) {\n    $markup = $m;\n    $$1('.mbsc-sc-whl-w', $markup).each(function (i) {\n      var idx,\n          $wh = $$1(this),\n          wheel = wheels[i];\n      wheel._$markup = $wh;\n      wheel._$scroller = $$1('.mbsc-sc-whl-sc', this);\n      wheel._$3d = $$1('.mbsc-sc-whl-3d', this);\n      wheel._scroller = new ScrollViewBase(this, {\n        mousewheel: s.mousewheel,\n        moveElement: wheel._$scroller,\n        scrollbar: $$1('.mbsc-sc-bar-c', this),\n        initialPos: (wheel._first - wheel._index) * itemHeight,\n        contSize: s.rows * itemHeight,\n        snap: itemHeight,\n        minScroll: getMin(wheel),\n        maxScroll: getMax(wheel),\n        maxSnapScroll: batchSize,\n        prevDef: true,\n        stopProp: true,\n        timeUnit: 3,\n        easing: 'cubic-bezier(0.190, 1.000, 0.220, 1.000)',\n        sync: function sync(pos, time, easing) {\n          var timing = time ? cssPrefix + 'transform ' + Math.round(time) + 'ms ' + easing : '';\n\n          if (scroll3d) {\n            wheel._$3d[0].style[jsPrefix + 'Transition'] = timing;\n            wheel._$3d[0].style[jsPrefix + 'Transform'] = 'rotateX(' + -pos / itemHeight * scroll3dAngle + 'deg)';\n          }\n        },\n        onStart: function onStart(ev, inst) {\n          inst.settings.readonly = isReadOnly(i);\n        },\n        onGestureStart: function onGestureStart() {\n          $wh.addClass('mbsc-sc-whl-a mbsc-sc-whl-anim');\n          trigger('onWheelGestureStart', {\n            index: i\n          });\n        },\n        onGestureEnd: function onGestureEnd(ev) {\n          var dir = ev.direction == 90 ? 1 : 2,\n              time = ev.duration,\n              pos = ev.destinationY;\n          idx = Math.round(-pos / itemHeight) + wheel._offset;\n          setWheelValue(wheel, i, idx, time, dir);\n        },\n        onAnimationStart: function onAnimationStart() {\n          $wh.addClass('mbsc-sc-whl-anim');\n        },\n        onAnimationEnd: function onAnimationEnd() {\n          $wh.removeClass('mbsc-sc-whl-a mbsc-sc-whl-anim');\n          trigger('onWheelAnimationEnd', {\n            index: i\n          });\n\n          wheel._$3d.find('.mbsc-sc-itm-del').remove();\n        },\n        onMove: function onMove(ev) {\n          infinite(wheel, i, ev.posY);\n        },\n        onBtnTap: function onBtnTap(ev) {\n          onItemTap(i, $$1(ev.target));\n        }\n      });\n    });\n    scrollToPos();\n  };\n\n  that._fillValue = function () {\n    that._hasValue = true;\n    setValue(true, true, 0, true);\n  };\n\n  that._clearValue = function () {\n    $$1('.mbsc-sc-whl-multi .mbsc-sc-itm-sel', $markup).removeClass(selectedClass).removeAttr('aria-selected');\n  };\n\n  that._readValue = function () {\n    var v = $elm.val() || '',\n        l = 0;\n\n    if (v !== '') {\n      that._hasValue = true;\n    }\n\n    that._tempWheelArray = tempWheelArray = that._hasValue && that._wheelArray ? that._wheelArray.slice(0) : s.parseValue.call(el, v, that) || [];\n    that._tempSelected = extend$1(true, {}, that._selected);\n    $$1.each(s.wheels, function (i, wg) {\n      $$1.each(wg, function (j, w) {\n        // Wheels\n        wheels[l] = initWheel(w, l);\n        l++;\n      });\n    });\n    setValue(false, false, 0, true);\n    trigger('onRead');\n  };\n\n  that.__processSettings = function (resp) {\n    s = that.settings;\n    trigger = that.trigger;\n    lines = s.multiline;\n    selectedClass = 'mbsc-sc-itm-sel mbsc-ic mbsc-ic-' + s.checkIcon;\n    isPointer = !s.touchUi;\n\n    if (isPointer) {\n      // Settings that might be needed by the scroller preset as well\n      s.tapSelect = true;\n      s.circular = false;\n      s.rows = resp.rows || settings.rows || 7;\n    }\n  };\n\n  that.__init = function (newSettings) {\n    if (newSettings) {\n      // Reset wheel array in case of setting change,\n      // since it might affect the number of wheels\n      that._wheelArray = null;\n    }\n\n    wheels = [];\n    wheelsMap = {};\n    showScrollArrows = s.showScrollArrows;\n    scroll3d = s.scroll3d && has3d && !showScrollArrows && !isPointer && (s.theme == 'ios' || s.baseTheme == 'ios');\n    itemHeight = s.height;\n    itemHeight3d = scroll3d ? Math.round((itemHeight - (itemHeight * s.rows / 2 + 3) * 0.03) / 2) * 2 : itemHeight;\n    batchSize3d = Math.round(s.rows * 1.8);\n    scroll3dAngle = 360 / (batchSize3d * 2); // Ensure a minimum number of 3 items if clickpick buttons present\n\n    if (showScrollArrows) {\n      s.rows = Math.max(3, s.rows);\n    }\n  };\n\n  that._getItemValue = getItemValue; // Properties\n\n  that._tempSelected = {};\n  that._selected = {}; // Constructor\n\n  if (!inherit) {\n    that.init();\n  }\n}; // Extend defaults\n\n\nScroller.prototype = {\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _responsive: true,\n  _class: 'scroller',\n  _presets: presets,\n  _defaults: extend$1({}, Frame.prototype._defaults, {\n    // Options\n    minWidth: 80,\n    height: 40,\n    rows: 3,\n    multiline: 1,\n    delay: 200,\n    readonly: false,\n    showLabel: true,\n    setOnTap: false,\n    wheels: [],\n    preset: '',\n    speedUnit: 0.0012,\n    timeUnit: 0.08,\n    checkIcon: 'checkmark',\n    compClass: 'mbsc-sc',\n    validate: function validate() {},\n    formatValue: function formatValue(d) {\n      return d.join(' ');\n    },\n    parseValue: function parseValue(value, inst) {\n      var val = [],\n          ret = [],\n          i = 0,\n          found,\n          data;\n\n      if (value !== null && value !== undefined) {\n        val = (value + '').split(' ');\n      }\n\n      $$1.each(inst.settings.wheels, function (j, wg) {\n        $$1.each(wg, function (k, w) {\n          data = w.data; // Default to first wheel value if not found\n\n          found = inst._getItemValue(data[0]);\n          $$1.each(data, function (l, item) {\n            // Don't do strict comparison\n            if (val[i] == inst._getItemValue(item)) {\n              found = inst._getItemValue(item);\n              return false;\n            }\n          });\n          ret.push(found);\n          i++;\n        });\n      });\n      return ret;\n    }\n  })\n};\nclasses.Scroller = Scroller;\nvar defaults$1 = {\n  separator: ' ',\n  // Localization\n  dateFormat: 'mm/dd/yy',\n  dateDisplay: 'MMddyy',\n  timeFormat: 'h:ii A',\n  dayText: 'Day',\n  monthText: 'Month',\n  yearText: 'Year',\n  hourText: 'Hours',\n  minuteText: 'Minutes',\n  ampmText: '&nbsp;',\n  secText: 'Seconds',\n  nowText: 'Now',\n  todayText: 'Today'\n}; // --- TRIAL SERVER CODE END ---\n\nvar DateTime = function DateTime(inst) {\n  function convertRanges(arr) {\n    var i,\n        v,\n        start,\n        end,\n        ret = [];\n\n    if (arr) {\n      for (i = 0; i < arr.length; i++) {\n        v = arr[i]; // Check if it's a range, but skip time-only ranges\n\n        if (v.start && v.end && !ISO_8601_TIME.test(v.start)) {\n          start = new Date(makeDate(v.start, format, s));\n          end = new Date(makeDate(v.end, format, s));\n\n          while (start <= end) {\n            ret.push(adjustedDate(start.getFullYear(), start.getMonth(), start.getDate()));\n            start.setDate(start.getDate() + 1);\n          }\n        } else {\n          ret.push(v);\n        }\n      }\n\n      return ret;\n    }\n\n    return arr;\n  }\n\n  function step(v, st, min, max) {\n    return Math.min(max, Math.floor(v / st) * st + min);\n  }\n\n  function getMax(step, min, max) {\n    return Math.floor((max - min) / step) * step + min;\n  }\n\n  function getYear(d) {\n    return s.getYear(d);\n  }\n\n  function getMonth(d) {\n    return s.getMonth(d);\n  }\n\n  function getDay(d) {\n    return s.getDay(d);\n  }\n\n  function getHours(d) {\n    var hour = d.getHours();\n    hour = hasAmPm && hour >= 12 ? hour - 12 : hour;\n    return step(hour, stepHour, minHour, maxHour);\n  }\n\n  function getMinutes(d) {\n    return step(d.getMinutes(), stepMinute, minMinute, maxMinute);\n  }\n\n  function getSeconds(d) {\n    return step(d.getSeconds(), stepSecond, minSecond, maxSecond);\n  }\n\n  function getMilliseconds(d) {\n    return d.getMilliseconds();\n  }\n\n  function getAmPm(d) {\n    return d.getHours() > 11 ? 1 : 0;\n  } // --- TRIAL SERVER CODE START ---\n\n\n  function getFullDate(d) {\n    return d.getFullYear() + '-' + pad(d.getMonth() + 1) + '-' + pad(d.getDate());\n  } // --- TRIAL SERVER CODE END ---\n\n\n  function getFullTime(d) {\n    return step(Math.round((d.getTime() - new Date(d).setHours(0, 0, 0, 0)) / 1000), timeStep || 1, 0, 86400);\n  }\n\n  function getArrayPart(data, part, d, def) {\n    var ret;\n\n    if (wheelOrder[part] !== undefined) {\n      ret = +data[wheelOrder[part]];\n\n      if (!isNaN(ret)) {\n        return ret;\n      }\n    }\n\n    if (d) {\n      return getDatePart[part](d);\n    }\n\n    if (innerValues[part] !== undefined) {\n      return innerValues[part];\n    }\n\n    return getDatePart[part](def);\n  }\n\n  function getDate(data) {\n    var d,\n        def = new Date(new Date().setHours(0, 0, 0, 0));\n\n    if (data === null) {\n      return data;\n    }\n\n    if (wheelOrder.dd !== undefined) {\n      d = data[wheelOrder.dd].split('-');\n      d = new Date(d[0], d[1] - 1, d[2]);\n    }\n\n    if (wheelOrder.tt !== undefined) {\n      d = d || def;\n      d = new Date(d.getTime() + data[wheelOrder.tt] % 86400 * 1000);\n    }\n\n    var year = getArrayPart(data, 'y', d, def),\n        month = getArrayPart(data, 'm', d, def),\n        day = Math.min(getArrayPart(data, 'd', d, def), s.getMaxDayOfMonth(year, month)),\n        hour = getArrayPart(data, 'h', d, def);\n    return s.getDate(year, month, day, hasAmPm && getArrayPart(data, 'a', d, def) ? hour + 12 : hour, getArrayPart(data, 'i', d, def), getArrayPart(data, 's', d, def), getArrayPart(data, 'u', d, def));\n  }\n\n  function getArray(d, fillInner) {\n    var i,\n        part,\n        parts = ['y', 'm', 'd', 'a', 'h', 'i', 's', 'u', 'dd', 'tt'],\n        ret = [];\n\n    if (d === null || d === undefined) {\n      return d;\n    }\n\n    for (i = 0; i < parts.length; i++) {\n      part = parts[i];\n\n      if (wheelOrder[part] !== undefined) {\n        ret[wheelOrder[part]] = getDatePart[part](d);\n      }\n\n      if (fillInner) {\n        innerValues[part] = getDatePart[part](d);\n      }\n    }\n\n    return ret;\n  } // --- TRIAL SERVER CODE START ---\n\n\n  function getDateIndex(d, hasDay) {\n    return hasDay ? // Number of days since 1970-01-01\n    Math.floor(new Date(d) / 8.64e7) : // Number of month since 1970-01-01\n    d.getMonth() + 12 * (d.getFullYear() - 1970);\n  }\n\n  function getYearValue(i) {\n    return {\n      value: i,\n      display: (/yy/i.test(dateDisplay) ? i : (i + '').substr(2, 2)) + (s.yearSuffix || '')\n    };\n  }\n\n  function getYearIndex(v) {\n    return v;\n  }\n\n  function getDateWheel(template) {\n    var hasDay = /d/i.test(template);\n    return {\n      label: '',\n      cssClass: 'mbsc-dt-whl-date',\n      min: minDate ? getDateIndex(getFullDate(minDate), hasDay) : undefined,\n      max: maxDate ? getDateIndex(getFullDate(maxDate), hasDay) : undefined,\n      data: function data(i) {\n        var today = new Date(new Date().setHours(0, 0, 0, 0)),\n            d = hasDay ? new Date(i * 8.64e7) : new Date(1970, i, 1);\n\n        if (hasDay) {\n          d = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n        }\n\n        return {\n          invalid: hasDay && !isValid(d, true),\n          value: getFullDate(d),\n          display: today.getTime() == d.getTime() ? s.todayText : formatDate(template, d, s)\n        };\n      },\n      getIndex: function getIndex(v) {\n        return getDateIndex(v, hasDay);\n      }\n    };\n  }\n\n  function getTimeWheel(template) {\n    var i,\n        step,\n        time,\n        values = [];\n\n    if (/s/i.test(template)) {\n      step = stepSecond;\n    } else if (/i/i.test(template)) {\n      step = stepMinute * 60;\n    } else if (/h/i.test(template)) {\n      step = stepHour * 3600;\n    }\n\n    timeStep = steps.tt = step;\n\n    for (i = 0; i < 86400; i += step) {\n      time = new Date(new Date().setHours(0, 0, 0, 0) + i * 1000);\n      values.push({\n        value: i,\n        display: formatDate(template, time, s)\n      });\n    }\n\n    return {\n      label: '',\n      cssClass: 'mbsc-dt-whl-time',\n      data: values\n    };\n  }\n\n  function getWheels() {\n    var dateParts,\n        timeParts,\n        template,\n        i,\n        j,\n        types,\n        values,\n        monthStr,\n        nr = 0,\n        wheels = [],\n        dateGroup = [],\n        timeGroup = [];\n\n    if (/date/i.test(preset)) {\n      dateParts = dateWheels.split(/\\|/.test(dateWheels) ? '|' : '');\n\n      for (i = 0; i < dateParts.length; i++) {\n        template = dateParts[i];\n        types = 0;\n\n        if (template.length) {\n          // If contains different characters\n          if (/y/i.test(template)) {\n            isoParts.y = 1;\n            types++;\n          }\n\n          if (/m/i.test(template)) {\n            isoParts.y = 1;\n            isoParts.m = 1;\n            types++;\n          }\n\n          if (/d/i.test(template)) {\n            isoParts.y = 1;\n            isoParts.m = 1;\n            isoParts.d = 1;\n            types++;\n          }\n\n          if (types > 1 && wheelOrder.dd === undefined) {\n            wheelOrder.dd = nr;\n            nr++;\n            dateGroup.push(getDateWheel(template));\n            timeGroup = dateGroup; // TODO ???\n\n            oneDateWheel = true;\n          } else if (/y/i.test(template) && wheelOrder.y === undefined) {\n            wheelOrder.y = nr;\n            nr++; // Year wheel\n\n            dateGroup.push({\n              cssClass: 'mbsc-dt-whl-y',\n              label: s.yearText,\n              min: minDate ? s.getYear(minDate) : undefined,\n              max: maxDate ? s.getYear(maxDate) : undefined,\n              data: getYearValue,\n              getIndex: getYearIndex\n            });\n          } else if (/m/i.test(template) && wheelOrder.m === undefined) {\n            // Month wheel\n            wheelOrder.m = nr;\n            values = [];\n            nr++;\n\n            for (j = 0; j < 12; j++) {\n              monthStr = dateDisplay.replace(/[dy|]/gi, '').replace(/mm/, pad(j + 1) + (s.monthSuffix || '')).replace(/m/, j + 1 + (s.monthSuffix || ''));\n              values.push({\n                value: j,\n                display: /MM/.test(monthStr) ? monthStr.replace(/MM/, '<span class=\"mbsc-dt-month\">' + s.monthNames[j] + '</span>') : monthStr.replace(/M/, '<span class=\"mbsc-dt-month\">' + s.monthNamesShort[j] + '</span>')\n              });\n            }\n\n            dateGroup.push({\n              cssClass: 'mbsc-dt-whl-m',\n              label: s.monthText,\n              data: values\n            });\n          } else if (/d/i.test(template) && wheelOrder.d === undefined) {\n            // Day wheel\n            wheelOrder.d = nr;\n            values = [];\n            nr++;\n\n            for (j = 1; j < 32; j++) {\n              values.push({\n                value: j,\n                display: (/dd/i.test(dateDisplay) ? pad(j) : j) + (s.daySuffix || '')\n              });\n            }\n\n            dateGroup.push({\n              cssClass: 'mbsc-dt-whl-d',\n              label: s.dayText,\n              data: values\n            });\n          }\n        }\n      }\n\n      wheels.push(dateGroup);\n    }\n\n    if (/time/i.test(preset)) {\n      timeParts = timeWheels.split(/\\|/.test(timeWheels) ? '|' : '');\n\n      for (i = 0; i < timeParts.length; i++) {\n        template = timeParts[i];\n        types = 0;\n\n        if (template.length) {\n          // If contains different characters\n          if (/h/i.test(template)) {\n            isoParts.h = 1;\n            types++;\n          }\n\n          if (/i/i.test(template)) {\n            isoParts.i = 1;\n            types++;\n          }\n\n          if (/s/i.test(template)) {\n            isoParts.s = 1;\n            types++;\n          }\n\n          if (/a/i.test(template)) {\n            types++;\n          }\n        }\n\n        if (types > 1 && wheelOrder.tt === undefined) {\n          wheelOrder.tt = nr;\n          nr++;\n          timeGroup.push(getTimeWheel(template));\n        } else if (/h/i.test(template) && wheelOrder.h === undefined) {\n          // Hours wheel\n          values = [];\n          wheelOrder.h = nr;\n          isoParts.h = 1;\n          nr++;\n\n          for (j = minHour; j < (hasAmPm ? 12 : 24); j += stepHour) {\n            values.push({\n              value: j,\n              display: hasAmPm && j === 0 ? 12 : /hh/i.test(timeDisplay) ? pad(j) : j\n            });\n          }\n\n          timeGroup.push({\n            cssClass: 'mbsc-dt-whl-h',\n            label: s.hourText,\n            data: values\n          });\n        } else if (/i/i.test(template) && wheelOrder.i === undefined) {\n          // Minutes wheel\n          values = [];\n          wheelOrder.i = nr;\n          isoParts.i = 1;\n          nr++;\n\n          for (j = minMinute; j < 60; j += stepMinute) {\n            values.push({\n              value: j,\n              display: /ii/i.test(timeDisplay) ? pad(j) : j\n            });\n          }\n\n          timeGroup.push({\n            cssClass: 'mbsc-dt-whl-i',\n            label: s.minuteText,\n            data: values\n          });\n        } else if (/s/i.test(template) && wheelOrder.s === undefined) {\n          // Seconds wheel\n          values = [];\n          wheelOrder.s = nr;\n          isoParts.s = 1;\n          nr++;\n\n          for (j = minSecond; j < 60; j += stepSecond) {\n            values.push({\n              value: j,\n              display: /ss/i.test(timeDisplay) ? pad(j) : j\n            });\n          }\n\n          timeGroup.push({\n            cssClass: 'mbsc-dt-whl-s',\n            label: s.secText,\n            data: values\n          });\n        } else if (/a/i.test(template) && wheelOrder.a === undefined) {\n          wheelOrder.a = nr;\n          nr++;\n          timeGroup.push({\n            cssClass: 'mbsc-dt-whl-a',\n            label: s.ampmText,\n            data: /A/.test(template) ? [{\n              value: 0,\n              display: s.amText.toUpperCase()\n            }, {\n              value: 1,\n              display: s.pmText.toUpperCase()\n            }] : [{\n              value: 0,\n              display: s.amText\n            }, {\n              value: 1,\n              display: s.pmText\n            }]\n          });\n        }\n      }\n\n      if (timeGroup != dateGroup) {\n        wheels.push(timeGroup);\n      }\n    }\n\n    return wheels;\n  } // --- TRIAL SERVER CODE END ---\n\n\n  function getHtml5Options($elm) {\n    var format,\n        min,\n        max,\n        ret = {}; // Force format for html5 date inputs (experimental)\n\n    if ($elm.is('input')) {\n      switch ($elm.attr('type')) {\n        case 'date':\n          format = 'yy-mm-dd';\n          break;\n\n        case 'datetime':\n          format = 'yy-mm-ddTHH:ii:ssZ';\n          break;\n\n        case 'datetime-local':\n          format = 'yy-mm-ddTHH:ii:ss';\n          break;\n\n        case 'month':\n          format = 'yy-mm';\n          ret.dateOrder = 'mmyy';\n          break;\n\n        case 'time':\n          format = 'HH:ii:ss';\n          break;\n      }\n\n      ret.format = format; // Check for min/max attributes\n\n      min = $elm.attr('min');\n      max = $elm.attr('max');\n\n      if (min && min != 'undefined') {\n        ret.min = parseDate(format, min);\n      }\n\n      if (max && max != 'undefined') {\n        ret.max = parseDate(format, max);\n      }\n    }\n\n    return ret;\n  }\n\n  function getClosestValidDate(d, dir) {\n    var next,\n        prev,\n        nextValid = false,\n        prevValid = false,\n        up = 0,\n        down = 0,\n        // Normalize min and max dates for comparing later (set default values where there are no values from wheels)\n    mind = minDate ? getDate(getArray(minDate)) : -Infinity,\n        maxd = maxDate ? getDate(getArray(maxDate)) : Infinity;\n\n    if (isValid(d)) {\n      return d;\n    }\n\n    if (d < mind) {\n      d = mind;\n    }\n\n    if (d > maxd) {\n      d = maxd;\n    }\n\n    next = d;\n    prev = d;\n\n    if (dir !== 2) {\n      nextValid = isValid(next, true);\n\n      while (!nextValid && next < maxd && up < 100) {\n        next = new Date(next.getTime() + 1000 * 60 * 60 * 24);\n        nextValid = isValid(next, true);\n        up++;\n      }\n    }\n\n    if (dir !== 1) {\n      prevValid = isValid(prev, true);\n\n      while (!prevValid && prev > mind && down < 100) {\n        prev = new Date(prev.getTime() - 1000 * 60 * 60 * 24);\n        prevValid = isValid(prev, true);\n        down++;\n      }\n    }\n\n    if (dir === 1 && nextValid) {\n      return next;\n    }\n\n    if (dir === 2 && prevValid) {\n      return prev;\n    }\n\n    if (isSameMonth(d, next)) {\n      return next;\n    }\n\n    if (isSameMonth(d, prev)) {\n      return prev;\n    }\n\n    return down <= up && prevValid ? prev : next;\n  }\n\n  function isSameMonth(d1, d2) {\n    return s.getYear(d1) === s.getYear(d2) && s.getMonth(d1) === s.getMonth(d2);\n  }\n\n  function isValid(d, skip) {\n    if (!skip && d < minDate) {\n      return false;\n    }\n\n    if (!skip && d > maxDate) {\n      return false;\n    }\n\n    if (isInObj(d, valid)) {\n      return true;\n    }\n\n    if (isInObj(d, invalid)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function isInObj(d, obj) {\n    var curr, j, v, val;\n\n    if (obj) {\n      for (j = 0; j < obj.length; j++) {\n        curr = obj[j];\n        val = curr.d || curr;\n        v = val + '';\n\n        if (!curr.start) {\n          if (DAY_OF_WEEK.test(v)) {\n            // Day of week\n            v = +v.replace('w', '');\n\n            if (v == d.getDay()) {\n              return true;\n            }\n          } else if (DAY_OF_MONTH.test(v)) {\n            // Day of month: '2' or '12/24'\n            v = v.split('/');\n\n            if (v[1]) {\n              if (v[0] - 1 == d.getMonth() && v[1] == d.getDate()) {\n                return true;\n              }\n            } else if (v[0] == d.getDate()) {\n              return true;\n            }\n          } else {\n            // Exact date\n            curr = makeDate(val, format, s);\n\n            if (d.getFullYear() == curr.getFullYear() && d.getMonth() == curr.getMonth() && d.getDate() == curr.getDate()) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function validateDates(obj, y, m, first, maxdays, invalids, val) {\n    var d, dd, j, k, v;\n\n    if (obj) {\n      for (j = 0; j < obj.length; j++) {\n        d = obj[j];\n        dd = d.d || d;\n        v = dd + '';\n\n        if (!d.start) {\n          if (DAY_OF_WEEK.test(v)) {\n            // Day of week\n            v = +v.replace('w', '');\n\n            for (k = v - first; k < maxdays; k += 7) {\n              if (k >= 0) {\n                invalids[k + 1] = val;\n              }\n            }\n          } else if (DAY_OF_MONTH.test(v)) {\n            // Day of month: '2' or '12/24'\n            v = v.split('/');\n\n            if (v[1]) {\n              if (v[0] - 1 == m) {\n                invalids[v[1]] = val;\n              }\n            } else {\n              invalids[v[0]] = val;\n            }\n          } else {\n            // Exact date\n            d = makeDate(dd, format, s);\n\n            if (s.getYear(d) == y && s.getMonth(d) == m) {\n              invalids[s.getDay(d)] = val;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function validateTimes(vobj, index, v, y, m, d, invalids, valid) {\n    var add,\n        all,\n        dd,\n        hours1,\n        hours2,\n        hours3,\n        i,\n        i1,\n        i2,\n        j,\n        obj,\n        parts1,\n        parts2,\n        prop1,\n        prop2,\n        remove,\n        ss,\n        str,\n        v1,\n        v2,\n        spec = {},\n        day = s.getDate(y, m, d),\n        w = ['a', 'h', 'i', 's'];\n\n    if (vobj) {\n      // Check if rules apply to the selected date\n      for (i = 0; i < vobj.length; i++) {\n        obj = vobj[i];\n\n        if (obj.start) {\n          obj.apply = false;\n          dd = obj.d;\n          ss = dd + '';\n          str = ss.split('/');\n\n          if (dd && (dd.getTime && y == s.getYear(dd) && m == s.getMonth(dd) && d == s.getDay(dd) || // Exact date\n          !DAY_OF_WEEK.test(ss) && (str[1] && d == str[1] && m == str[0] - 1 || !str[1] && d == str[0]) || // Day of month\n          DAY_OF_WEEK.test(ss) && day.getDay() == +ss.replace('w', '') // Day of week\n          )) {\n            obj.apply = true;\n            spec[day] = true; // Prevent applying generic rule on day, if specific exists\n          }\n        }\n      } // Apply rules\n\n\n      for (i = 0; i < vobj.length; i++) {\n        obj = vobj[i];\n        add = 0;\n        remove = 0;\n        i1 = mins[v];\n        i2 = maxs[v];\n        prop1 = true;\n        prop2 = true;\n        all = false;\n\n        if (obj.start && (obj.apply || !obj.d && !spec[day])) {\n          // Define time parts\n          parts1 = obj.start.split(':');\n          parts2 = obj.end.split(':');\n\n          for (j = 0; j < 3; j++) {\n            if (parts1[j] === undefined) {\n              parts1[j] = 0;\n            }\n\n            if (parts2[j] === undefined) {\n              parts2[j] = 59;\n            }\n\n            parts1[j] = +parts1[j];\n            parts2[j] = +parts2[j];\n          }\n\n          if (v == 'tt') {\n            // Wheel containing full time\n            i1 = step(Math.round((new Date(day).setHours(parts1[0], parts1[1], parts1[2]) - new Date(day).setHours(0, 0, 0, 0)) / 1000), timeStep, 0, 86400);\n            i2 = step(Math.round((new Date(day).setHours(parts2[0], parts2[1], parts2[2]) - new Date(day).setHours(0, 0, 0, 0)) / 1000), timeStep, 0, 86400);\n          } else {\n            parts1.unshift(parts1[0] > 11 ? 1 : 0);\n            parts2.unshift(parts2[0] > 11 ? 1 : 0);\n\n            if (hasAmPm) {\n              if (parts1[1] >= 12) {\n                parts1[1] = parts1[1] - 12;\n              }\n\n              if (parts2[1] >= 12) {\n                parts2[1] = parts2[1] - 12;\n              }\n            } // Look behind\n\n\n            for (j = 0; j < index; j++) {\n              if (validValues[j] !== undefined) {\n                v1 = step(parts1[j], steps[w[j]], mins[w[j]], maxs[w[j]]);\n                v2 = step(parts2[j], steps[w[j]], mins[w[j]], maxs[w[j]]);\n                hours1 = 0;\n                hours2 = 0;\n                hours3 = 0;\n\n                if (hasAmPm && j == 1) {\n                  hours1 = parts1[0] ? 12 : 0;\n                  hours2 = parts2[0] ? 12 : 0;\n                  hours3 = validValues[0] ? 12 : 0;\n                }\n\n                if (!prop1) {\n                  v1 = 0;\n                }\n\n                if (!prop2) {\n                  v2 = maxs[w[j]];\n                }\n\n                if ((prop1 || prop2) && v1 + hours1 < validValues[j] + hours3 && validValues[j] + hours3 < v2 + hours2) {\n                  all = true;\n                }\n\n                if (validValues[j] != v1) {\n                  prop1 = false;\n                }\n\n                if (validValues[j] != v2) {\n                  prop2 = false;\n                }\n              }\n            } // Look ahead\n\n\n            if (!valid) {\n              for (j = index + 1; j < 4; j++) {\n                if (parts1[j] > 0) {\n                  add = steps[v];\n                }\n\n                if (parts2[j] < maxs[w[j]]) {\n                  remove = steps[v];\n                }\n              }\n            }\n\n            if (!all) {\n              // Calculate min and max values\n              v1 = step(parts1[index], steps[v], mins[v], maxs[v]) + add;\n              v2 = step(parts2[index], steps[v], mins[v], maxs[v]) - remove;\n\n              if (prop1) {\n                i1 = v1;\n              }\n\n              if (prop2) {\n                i2 = v2;\n              }\n            }\n          } // Disable values\n\n\n          if (prop1 || prop2 || all) {\n            for (j = i1; j <= i2; j += steps[v]) {\n              invalids[j] = !valid;\n            }\n          }\n        }\n      }\n    }\n  } // --- TRIAL SERVER CODE START ---\n\n\n  var timeStep,\n      oneDateWheel,\n      wheels,\n      wheelOrder = {},\n      innerValues = {},\n      isoParts = {},\n      validValues = [],\n      html5def = getHtml5Options($$1(this)),\n      orig = extend$1({}, inst.settings),\n      calendarSystem = calendars[orig.calendarSystem],\n      s = extend$1(inst.settings, dateTimeDefaults, calendarSystem, defaults$1, html5def, orig),\n      preset = s.preset,\n      displayFormat = preset == 'datetime' ? s.dateFormat + s.separator + s.timeFormat : preset == 'time' ? s.timeFormat : s.dateFormat,\n      format = html5def.format || displayFormat,\n      dateWheels = s.dateWheels || s.dateFormat,\n      timeWheels = s.timeWheels || s.timeFormat,\n      //dateWheels = '|D M d|', // TODO settings\n  //timeWheels = '|h|ii|A|',\n  dateDisplay = s.dateWheels || s.dateDisplay,\n      timeDisplay = timeWheels,\n      baseTheme = s.baseTheme || s.theme,\n      invalid = convertRanges(s.invalid),\n      valid = convertRanges(s.valid),\n      minDate = makeDate(s.min, format, s),\n      maxDate = makeDate(s.max, format, s),\n      hasTime = /time/i.test(preset),\n      hasAmPm = /h/.test(timeDisplay),\n      genDayNames = /D/.test(dateDisplay),\n      stepParts = s.steps || {},\n      stepHour = stepParts.hour || s.stepHour || 1,\n      stepMinute = stepParts.minute || s.stepMinute || 1,\n      stepSecond = stepParts.second || s.stepSecond || 1,\n      zeroBased = stepParts.zeroBased,\n      minHour = zeroBased || !minDate ? 0 : minDate.getHours() % stepHour,\n      minMinute = zeroBased || !minDate ? 0 : minDate.getMinutes() % stepMinute,\n      minSecond = zeroBased || !minDate ? 0 : minDate.getSeconds() % stepSecond,\n      maxHour = getMax(stepHour, minHour, hasAmPm ? 11 : 23),\n      maxMinute = getMax(stepMinute, minMinute, 59),\n      maxSecond = getMax(stepMinute, minMinute, 59),\n      mins = {\n    y: minDate ? minDate.getFullYear() : -Infinity,\n    m: 0,\n    d: 1,\n    h: minHour,\n    i: minMinute,\n    s: minSecond,\n    a: 0,\n    tt: 0\n  },\n      maxs = {\n    y: maxDate ? maxDate.getFullYear() : Infinity,\n    m: 11,\n    d: 31,\n    h: maxHour,\n    i: maxMinute,\n    s: maxSecond,\n    a: 1,\n    tt: 86400\n  },\n      steps = {\n    y: 1,\n    m: 1,\n    d: 1,\n    h: stepHour,\n    i: stepMinute,\n    s: stepSecond,\n    a: 1,\n    tt: 1\n  },\n      widths = {\n    bootstrap: 46,\n    ios: 50,\n    material: 46,\n    mobiscroll: 46,\n    windows: 50\n  },\n      getDatePart = {\n    y: getYear,\n    m: getMonth,\n    d: getDay,\n    h: getHours,\n    i: getMinutes,\n    s: getSeconds,\n    u: getMilliseconds,\n    a: getAmPm,\n    dd: getFullDate,\n    tt: getFullTime\n  }; // --- TRIAL SERVER CODE END ---\n  // Extended methods\n  // ---\n\n  inst.getVal = function (temp) {\n    return inst._hasValue || temp ? returnDate(getDate(inst.getArrayVal(temp)), s, format) : null;\n  };\n  /**\r\n   * Returns the selected date.\r\n   *\r\n   * @param {Boolean} [temp=false] If true, return the currently shown date on the picker, otherwise the last selected one.\r\n   * @return {Date}\r\n   */\n\n\n  inst.getDate = function (temp) {\n    return inst._hasValue || temp ? getDate(inst.getArrayVal(temp)) : null;\n  };\n  /**\r\n   * Sets the selected date\r\n   *\r\n   * @param {Date} d Date to select.\r\n   * @param {Boolean} [fill=false] Also set the value of the associated input element. Default is true.\r\n   * @param {Number} [time=0] Animation time to scroll to the selected date.\r\n   * @param {Boolean} [temp=false] Set temporary value only.\r\n   * @param {Boolean} [change=fill] Trigger change on input element.\r\n   */\n\n\n  inst.setDate = function (d, fill, time, temp, change) {\n    inst.setArrayVal(getArray(d, true), fill, change, temp, time);\n  }; // ---\n  // Initializations\n  // ---\n\n\n  wheels = getWheels();\n  s.isoParts = isoParts;\n  inst._format = displayFormat;\n  inst._order = wheelOrder;\n\n  inst.handlers.now = function () {\n    inst.setDate(new Date(), inst.live, 1000, true, true);\n  };\n\n  inst.buttons.now = {\n    text: s.nowText,\n    icon: s.nowIcon,\n    handler: 'now'\n  }; // ---\n\n  return {\n    minWidth: oneDateWheel && hasTime ? widths[baseTheme] : undefined,\n    compClass: 'mbsc-dt mbsc-sc',\n    wheels: wheels,\n    headerText: s.headerText ? function () {\n      return formatDate(displayFormat, getDate(inst.getArrayVal(true)), s);\n    } : false,\n    formatValue: function formatValue(d) {\n      return formatDate(format, getDate(d), s);\n    },\n    parseValue: function parseValue(val) {\n      if (!val) {\n        innerValues = {};\n        inst._hasValue = false;\n      }\n\n      return getArray(makeDate(val || s.defaultValue || new Date(), format, s, isoParts), !!val);\n    },\n    validate: function validate(data) {\n      var i,\n          j,\n          dayStr,\n          weekDay,\n          values = data.values,\n          index = data.index,\n          dir = data.direction,\n          dayWheel = s.wheels[0][wheelOrder.d],\n          validated = getClosestValidDate(getDate(values), dir),\n          temp = getArray(validated),\n          disabled = [],\n          wheels = {},\n          y = getDatePart.y(validated),\n          //get(temp, 'y'),\n      m = getDatePart.m(validated),\n          //get(temp, 'm'),\n      maxdays = s.getMaxDayOfMonth(y, m),\n          minprop = true,\n          maxprop = true;\n      $$1.each(['dd', 'y', 'm', 'd', 'tt', 'a', 'h', 'i', 's'], function (x, i) {\n        var min = mins[i],\n            max = maxs[i],\n            val = getDatePart[i](validated);\n        disabled[wheelOrder[i]] = [];\n\n        if (minprop && minDate) {\n          min = getDatePart[i](minDate);\n        }\n\n        if (maxprop && maxDate) {\n          max = getDatePart[i](maxDate);\n        }\n\n        if (val < min) {\n          val = min;\n        }\n\n        if (val > max) {\n          val = max;\n        }\n\n        if (i !== 'dd' && i !== 'tt') {\n          if (minprop) {\n            minprop = val == min;\n          }\n\n          if (maxprop) {\n            maxprop = val == max;\n          }\n        }\n\n        if (wheelOrder[i] !== undefined) {\n          if (i != 'y' && i != 'dd') {\n            for (j = mins[i]; j <= maxs[i]; j += steps[i]) {\n              if (j < min || j > max) {\n                disabled[wheelOrder[i]].push(j);\n              }\n            }\n          } // Disable some days\n\n\n          if (i == 'd') {\n            var first = s.getDate(y, m, 1).getDay(),\n                invalids = {}; // Set invalid indexes\n\n            validateDates(invalid, y, m, first, maxdays, invalids, 1); // Delete indexes which are valid\n\n            validateDates(valid, y, m, first, maxdays, invalids, 0);\n            $$1.each(invalids, function (j, v) {\n              if (v) {\n                disabled[wheelOrder[i]].push(j);\n              }\n            });\n          }\n        }\n      }); // Invalid times\n\n      if (hasTime) {\n        $$1.each(['a', 'h', 'i', 's', 'tt'], function (i, v) {\n          var val = getDatePart[v](validated),\n              d = getDatePart.d(validated),\n              invalids = {};\n\n          if (wheelOrder[v] !== undefined) {\n            validateTimes(invalid, i, v, y, m, d, invalids, 0);\n            validateTimes(valid, i, v, y, m, d, invalids, 1);\n            $$1.each(invalids, function (j, x) {\n              if (x) {\n                disabled[wheelOrder[v]].push(j);\n              }\n            }); // Get valid value\n\n            validValues[i] = inst.getValidValue(wheelOrder[v], val, dir, invalids);\n          }\n        });\n      } // Regenerate day wheel if number of days in month changes\n      // or if day names needs to be regenerated\n\n\n      if (dayWheel && (dayWheel.data.length !== maxdays || genDayNames && (index === undefined || index === wheelOrder.y || index === wheelOrder.m))) {\n        wheels[wheelOrder.d] = dayWheel;\n        dayWheel.data = [];\n\n        for (i = 1; i <= maxdays; i++) {\n          weekDay = s.getDate(y, m, i).getDay();\n          dayStr = dateDisplay.replace(/[my|]/gi, '').replace(/dd/, (i < 10 ? '0' + i : i) + (s.daySuffix || '')).replace(/d/, i + (s.daySuffix || ''));\n          dayWheel.data.push({\n            value: i,\n            display: /DD/.test(dayStr) ? dayStr.replace(/DD/, '<span class=\"mbsc-dt-day\">' + s.dayNames[weekDay] + '</span>') : dayStr.replace(/D/, '<span class=\"mbsc-dt-day\">' + s.dayNamesShort[weekDay] + '</span>')\n          });\n        } // Need to update day value, if out of month\n\n\n        inst._tempWheelArray[wheelOrder.d] = temp[wheelOrder.d];\n        inst.changeWheel(wheels);\n      }\n\n      return {\n        disabled: disabled,\n        valid: temp\n      };\n    }\n  };\n};\n\nvar id$1 = 0;\n\nfunction jsonp(url, callback) {\n  var script = document.createElement('script'),\n      unique = 'mbscjsonp' + ++id$1;\n\n  window[unique] = function (data) {\n    script.parentNode.removeChild(script);\n    delete window[unique];\n\n    if (!data) {\n      return;\n    }\n\n    callback(data);\n  };\n\n  script.src = url + (url.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + unique;\n  document.body.appendChild(script);\n}\n\nfunction ajaxGet(url, callback) {\n  var request = new XMLHttpRequest();\n  request.open('GET', url, true);\n\n  request.onload = function () {\n    if (this.status >= 200 && this.status < 400) {\n      // Success!\n      callback(JSON.parse(this.response));\n    } //else {\n    // We reached our target server, but it returned an error\n    //}\n\n  };\n\n  request.onerror = function () {// There was a connection error of some sort\n  };\n\n  request.send();\n}\n\nfunction getJson(url, callback, type) {\n  if (type == 'jsonp') {\n    jsonp(url, callback);\n  } else {\n    ajaxGet(url, callback);\n  }\n}\n\nutil.getJson = getJson; // eslint-disable-next-line no-unused-vars\n\nvar defaults$2 = {\n  controls: ['calendar'],\n  firstDay: 0,\n  weekDays: 'short',\n  maxMonthWidth: 170,\n  breakPointMd: 768,\n  months: 1,\n  pageBuffer: 1,\n  weeks: 6,\n  highlight: true,\n  outerMonthChange: true,\n  quickNav: true,\n  yearChange: true,\n  tabs: 'auto',\n  // CSS classes\n  todayClass: 'mbsc-cal-today',\n  btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left6',\n  btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right6',\n  // Localization\n  dateText: 'Date',\n  timeText: 'Time',\n  todayText: 'Today',\n  fromText: 'Start',\n  toText: 'End',\n  moreEventsText: '{count} more',\n  prevMonthText: 'Previous Month',\n  nextMonthText: 'Next Month',\n  prevYearText: 'Previous Year',\n  nextYearText: 'Next Year'\n}; // --- TRIAL SERVER CODE END ---\n\nvar CalendarBase = function CalendarBase(inst) {\n  var $calendar,\n      $markup,\n      $monthHdr,\n      $monthPicker,\n      $tabPaneCont,\n      $tabPanes,\n      $yearHdr,\n      $yearPicker,\n      activeDate,\n      base,\n      calRows,\n      calSize,\n      calWidth,\n      context,\n      controls,\n      controlsArray,\n      cssDisabled,\n      cssSelected,\n      cssSelectedTab,\n      currFirstDay,\n      dayLabels,\n      dayProps,\n      dayScroll,\n      displayFormat,\n      firstWeekDay,\n      hasCal,\n      hasLabels,\n      hasMarks,\n      hasTabs,\n      // hasText,\n  hasQuickNav,\n      hoverTimer,\n      invalidObj,\n      isCellHover,\n      isDayClick,\n      isLiquid,\n      isMonthView,\n      isPageMove,\n      isRTL,\n      isVertical,\n      labelsObj,\n      markedObj,\n      colorsObj,\n      maxDate,\n      maxFirstYear,\n      maxLabels,\n      maxMonth,\n      maxYear,\n      minDate,\n      minFirstYear,\n      minMonth,\n      minYear,\n      monthIndex,\n      monthNames,\n      monthScroll,\n      needsSlide,\n      needsRefresh,\n      pageBuffer,\n      pageNr,\n      pageOffset,\n      pageTotal,\n      rtl,\n      s,\n      selectedDate,\n      showOuterDays,\n      trigger,\n      validObj,\n      visibleTab,\n      wasTouched,\n      weekCounter,\n      weekDays,\n      yearChange,\n      yearIndex,\n      yearScroll,\n      yearSuffix,\n      labelIdx = 1,\n      elm = this;\n\n  function showCont($cont) {\n    if ($cont.hasClass('mbsc-cal-h')) {\n      $cont.removeClass('mbsc-cal-h');\n    }\n  }\n\n  function hideCont($cont) {\n    if (!$cont.hasClass('mbsc-cal-h')) {\n      $cont.addClass('mbsc-cal-h');\n    }\n  }\n\n  function toggleCont($cont) {\n    if ($cont.hasClass('mbsc-cal-h')) {\n      showCont($cont);\n    } else {\n      hideCont($cont);\n    }\n  }\n\n  function preProcessSettings() {\n    var ctrls, layout, orig;\n    controls = {};\n    controlsArray = [];\n    dayLabels = {};\n    trigger = inst.trigger;\n    orig = extend$1({}, inst.settings);\n    s = extend$1(inst.settings, defaults$2, orig);\n    ctrls = s.controls.join(',');\n    firstWeekDay = s.firstDay;\n    isRTL = s.rtl;\n    pageBuffer = s.pageBuffer;\n    weekCounter = s.weekCounter;\n    calRows = s.weeks;\n    isMonthView = calRows == 6;\n    isVertical = s.calendarScroll == 'vertical';\n    context = inst._getRespCont();\n    weekDays = s.weekDays == 'full' ? '' : s.weekDays == 'min' ? 'Min' : 'Short';\n    layout = s.layout || (s.display == 'inline' || /top|bottom/.test(s.display) && s.touchUi ? 'liquid' : '');\n    isLiquid = layout == 'liquid'; // && s.display !== 'bubble';\n\n    calWidth = isLiquid ? null : s.calendarWidth;\n    rtl = isRTL && !isVertical ? -1 : 1;\n    cssDisabled = 'mbsc-disabled ' + (s.disabledClass || '');\n    cssSelectedTab = 'mbsc-selected ' + (s.selectedTabClass || '');\n    cssSelected = 'mbsc-selected ' + (s.selectedClass || '');\n    maxLabels = Math.max(1, Math.floor(((s.calendarHeight || 0) / calRows - 45) / 18));\n\n    if (ctrls.match(/calendar/)) {\n      controls.calendar = 1;\n      hasCal = true;\n    } // Allow date scroller only if calendar not present\n\n\n    if (ctrls.match(/date/) && !hasCal) {\n      controls.date = 1;\n    }\n\n    if (ctrls.match(/time/)) {\n      controls.time = 1;\n    }\n\n    s.controls.forEach(function (v) {\n      if (controls[v]) {\n        controlsArray.push(v);\n      }\n    }); // Disable quick nav for week view\n\n    hasQuickNav = s.quickNav && hasCal && isMonthView; // Disable year change for week view\n\n    yearChange = s.yearChange && isMonthView; // Fullscreen mode\n\n    if (isLiquid && hasCal && s.display == 'center') {\n      inst._isFullScreen = true;\n    }\n\n    s.layout = layout; // Pass back to core if set to liquid\n\n    s.preset = (controls.date || hasCal ? 'date' : '') + (controls.time ? 'time' : '');\n  }\n\n  function postProcessSettings() {\n    monthNames = yearChange ? s.monthNamesShort : s.monthNames;\n    yearSuffix = s.yearSuffix || '';\n    monthIndex = (s.dateWheels || s.dateFormat).search(/m/i);\n    yearIndex = (s.dateWheels || s.dateFormat).search(/y/i);\n    displayFormat = inst._format;\n\n    if (s.min) {\n      minDate = getDateOnly(makeDate(s.min, displayFormat, s));\n      minYear = s.getYear(minDate);\n      minMonth = s.getMonth(minDate);\n      minFirstYear = s.getDate(Math.floor(minYear / 12) * 12, 0, 1);\n    }\n\n    if (s.max) {\n      maxDate = getDateOnly(makeDate(s.max, displayFormat, s));\n      maxYear = s.getYear(maxDate);\n      maxMonth = s.getMonth(maxDate);\n      maxFirstYear = s.getDate(Math.floor(maxYear / 12) * 12, 0, 1);\n    }\n\n    inst._minDate = minDate;\n    inst._maxDate = maxDate;\n  }\n\n  function addToList(obj, d, ev) {\n    obj[d] = obj[d] || [];\n    obj[d].push(ev);\n  }\n\n  function prepareObj(list, start, end) {\n    var d,\n        v,\n        year,\n        month,\n        day,\n        maxDays,\n        endTime,\n        startTime,\n        getDate = s.getDate,\n        getYear = s.getYear,\n        getMonth = s.getMonth,\n        getDay = s.getDay,\n        getMaxDayOfMonth = s.getMaxDayOfMonth,\n        startYear = getYear(start),\n        startMonth = getMonth(start),\n        obj = {};\n\n    if (list) {\n      $$1.each(list, function (i, ev) {\n        d = ev.d || ev.start || ev;\n        v = d + '';\n\n        if (ev.start && ev.end) {\n          startTime = getDateOnly(makeDate(ev.start, displayFormat, s));\n          endTime = getDateOnly(makeDate(ev.end, displayFormat, s));\n\n          while (startTime <= endTime) {\n            addToList(obj, startTime, ev);\n            startTime = getDate(getYear(startTime), getMonth(startTime), getDay(startTime) + 1);\n          }\n        } else if (DAY_OF_WEEK.test(v)) {\n          // Day of week\n          startTime = getFirstDay(start, false, +v.replace('w', ''));\n\n          while (startTime <= end) {\n            addToList(obj, startTime, ev);\n            startTime = getDate(getYear(startTime), getMonth(startTime), getDay(startTime) + 7);\n          }\n        } else if (DAY_OF_MONTH.test(v)) {\n          // Day of month: '2' or '12/24'\n          v = v.split('/');\n          var hasMonth = !!v[1],\n              yearInc = hasMonth ? 1 : 0,\n              monthInc = hasMonth ? 0 : 1,\n              vMonth = hasMonth ? v[0] - 1 : startMonth,\n              vDay = hasMonth ? +v[1] : +v[0];\n          maxDays = getMaxDayOfMonth(startYear, vMonth);\n          startTime = getDate(startYear, vMonth, Math.min(vDay, maxDays));\n\n          while (startTime <= end) {\n            year = getYear(startTime);\n            month = getMonth(startTime);\n            day = getDay(startTime);\n\n            if (day === vDay) {\n              addToList(obj, startTime, ev);\n            }\n\n            maxDays = getMaxDayOfMonth(year + yearInc, month + monthInc);\n            startTime = getDate(year + yearInc, month + monthInc, Math.min(vDay, maxDays));\n          }\n        } else {\n          // Exact date\n          addToList(obj, getDateOnly(makeDate(d, displayFormat, s)), ev);\n        }\n      });\n    }\n\n    return obj;\n  }\n\n  function isValidDate(d) {\n    if (d < minDate) {\n      return false;\n    }\n\n    if (d > maxDate) {\n      return false;\n    }\n\n    return invalidObj[d] === undefined || validObj[d] !== undefined;\n  }\n\n  function getDayProps(d) {\n    var i,\n        mark,\n        markedMarkup,\n        props,\n        marked = markedObj[d] ? markedObj[d] : false,\n        colors = colorsObj[d] ? colorsObj[d] : false,\n        background = colors && colors[0].background ? colors[0].background : marked && marked[0].background,\n        cssClass = '';\n\n    if (colors) {\n      for (i = 0; i < colors.length; i++) {\n        cssClass += (colors[i].cssClass || '') + ' ';\n      }\n    }\n\n    if (marked) {\n      // Marks\n      markedMarkup = '<div class=\"mbsc-cal-marks\">';\n\n      for (i = 0; i < marked.length; i++) {\n        mark = marked[i];\n        cssClass += (mark.cssClass || '') + ' ';\n        markedMarkup += '<div class=\"mbsc-cal-mark\"' + (mark.color ? ' style=\"background:' + mark.color + ';\"' : '') + '></div>';\n      }\n\n      markedMarkup += '</div>';\n    }\n\n    props = {\n      marked: marked,\n      background: background,\n      cssClass: cssClass,\n      // ariaLabel: hasText ? txt : '',\n      markup: dayLabels[d] ? dayLabels[d].join('') : hasMarks ? markedMarkup : ''\n    };\n    return extend$1(props, inst._getDayProps(d, props));\n  }\n\n  function getOffsetStyle(offset) {\n    return ' style=\"' + (isVertical ? 'transform: translateY(' + offset * 100 + '%)' : 'left:' + offset * 100 * rtl + '%') + '\"';\n  }\n\n  function calcMonthNr() {\n    // Calculate pageNr\n    pageNr = s.months == 'auto' ? // Exact month number from setting\n    Math.max(1, // Min 1 month\n    Math.min(3, // Max 3 months\n    Math.floor((calWidth || getWidth(context)) / 280))) : +s.months;\n    pageTotal = pageNr + 2 * pageBuffer;\n    pageOffset = 0; //Math.round(pageNr / 2) - 1;\n    // Don't allow vertical scroll with multiple months\n\n    isVertical = isVertical && pageNr < 2; // Don't show outer days by default for multiple months or vertical scroll\n\n    showOuterDays = s.showOuterDays === undefined ? pageNr < 2 && !isVertical || !isMonthView : s.showOuterDays;\n  }\n\n  function constrain(d) {\n    if (getPageDay(d, pageNr - 1) > maxDate) {\n      d = getPageDay(maxDate, 1 - pageNr);\n    }\n\n    if (d < minDate) {\n      d = minDate;\n    }\n\n    return d;\n  }\n\n  function getLabelMarkup(event, i, showText) {\n    var noBg = event.background === 'none';\n    var color = noBg ? 'none' : event.color;\n    var txtColor = noBg ? event.color : getTextColor(color);\n    var txt = event.text;\n    return '<div data-id=\"' + event._id + '\" data-index=\"' + i + '\" class=\"mbsc-cal-txt' + (noBg ? ' mbsc-cal-txt-only' : '') + '\" title=\"' + $$1('<div>' + txt + '</div>').text() + '\"' + (color ? ' style=\"background:' + color + (showText && txtColor ? ';color:' + txtColor : '') + ';\"' : '') + '>' + (showText ? txt : '') + '</div>';\n  }\n\n  function onGenMonth(d) {\n    var start = getFirstDay(getPageDay(d, -pageOffset - pageBuffer), false);\n    var end = getFirstDay(getPageDay(d, -pageOffset + pageNr + pageBuffer - 1), false);\n    end = s.getDate(s.getYear(end), s.getMonth(end), s.getDay(end) + calRows * 7);\n\n    inst._onGenMonth(start, end);\n\n    invalidObj = prepareObj(s.invalid, start, end);\n    validObj = prepareObj(s.valid, start, end);\n    markedObj = prepareObj(s.labels || s.events || s.marked, start, end);\n    colorsObj = prepareObj(s.colors, start, end);\n    labelsObj = inst._labels || markedObj || colorsObj;\n    hasLabels = s.labels || inst._labels; // Multiple labels\n\n    if (hasLabels) {\n      (function () {\n        dayLabels = {};\n        var eventRows = {};\n        var day = start;\n\n        var _loop = function _loop() {\n          if (day.getDay() == firstWeekDay) {\n            eventRows = {};\n          }\n\n          var maxRows = maxLabels;\n          var events = labelsObj[day] || [];\n          var eventsNr = events.length;\n          var labels = [];\n          var prevEvent = void 0;\n          var prevIndex = void 0;\n          var row = 0;\n          var displayed = 0;\n          var i = 0;\n          var width = void 0;\n\n          while (row < maxRows) {\n            prevEvent = null; // Check  if there are any events already in this row\n\n            events.forEach(function (ev, j) {\n              if (eventRows[row] == ev) {\n                prevEvent = ev;\n                prevIndex = j;\n              }\n            });\n\n            if (row == maxRows - 1 && (displayed < eventsNr - 1 || eventsNr && i == eventsNr && !prevEvent)) {\n              var nr = eventsNr - displayed;\n              var txt = (nr > 1 ? s.moreEventsPluralText || s.moreEventsText : s.moreEventsText).replace(/{count}/, nr);\n\n              if (nr) {\n                labels.push('<div class=\"mbsc-cal-txt-more\">' + txt + '</div>');\n              } // Remove event from previous days and replace it with more label\n\n\n              if (prevEvent) {\n                eventRows[row] = null;\n\n                prevEvent._days.forEach(function (d) {\n                  dayLabels[d][row] = '<div class=\"mbsc-cal-txt-more\">' + s.moreEventsText.replace(/{count}/, 1) + '</div>';\n                });\n              }\n\n              displayed++;\n              row++;\n            } else if (prevEvent) {\n              if (prevIndex == i) {\n                i++;\n              }\n\n              if (isSameDay(day, makeDate(prevEvent.end))) {\n                eventRows[row] = null;\n              }\n\n              labels.push(getLabelMarkup(prevEvent, prevIndex));\n              row++;\n              displayed++;\n\n              prevEvent._days.push(day);\n            } else if (i < eventsNr) {\n              var event = events[i];\n              var startTime = event.start && makeDate(event.start);\n              var endTime = event.end && makeDate(event.end);\n              var weekDay = day.getDay();\n              var offset = firstWeekDay - weekDay > 0 ? 7 : 0;\n              var multiDay = endTime && !isSameDay(startTime, endTime);\n\n              if (!startTime || // all day event\n              isSameDay(day, startTime) || // event start day\n              weekDay == firstWeekDay // first day of week (if event continues from prev week))\n              ) {\n                if (event._id === undefined) {\n                  event._id = labelIdx++;\n                }\n\n                if (multiDay) {\n                  eventRows[row] = event;\n                }\n\n                event._days = [day];\n                width = multiDay ? Math.min(getDayDiff(day, getDateOnly(endTime)) + 1, 7 + firstWeekDay - weekDay - offset) * 100 : 100;\n                labels.push(multiDay ? '<div class=\"mbsc-cal-txt-w\" style=\"width:' + width + '%\">' + getLabelMarkup(event, i, true) + '</div>' + getLabelMarkup(event, i) : getLabelMarkup(event, i, true));\n                row++;\n                displayed++;\n              }\n\n              i++;\n            } else {\n              labels.push('<div class=\"mbsc-cal-txt-ph\"></div>');\n              row++;\n            }\n          }\n\n          dayLabels[day] = labels;\n          day = s.getDate(s.getYear(day), s.getMonth(day), s.getDay(day) + 1);\n        };\n\n        while (day < end) {\n          _loop();\n        }\n      })();\n    }\n  }\n\n  function onBeforeMonthChange(d) {\n    var y = s.getYear(d),\n        m = s.getMonth(d);\n    currFirstDay = d;\n    activeDate = d;\n    setTitle(d);\n    trigger('onMonthChange', {\n      year: y,\n      month: m\n    });\n    trigger('onMonthLoading', {\n      year: y,\n      month: m\n    });\n    trigger('onPageChange', {\n      firstDay: d\n    });\n    trigger('onPageLoading', {\n      firstDay: d\n    });\n    onGenMonth(d);\n  }\n\n  function onAfterMonthChange(d) {\n    var y = s.getYear(d),\n        m = s.getMonth(d);\n\n    if (needsRefresh === undefined) {\n      onPageLoaded(d, y, m);\n    } else {\n      genAllMonths(d, needsRefresh, true);\n    }\n\n    focusDate(activeDate, dayScroll.focus);\n    dayScroll.focus = false;\n  }\n\n  function onPageLoaded(d, y, m) {\n    var $scroller = dayScroll.$scroller;\n    $$1('.mbsc-cal-slide', $scroller).removeClass('mbsc-cal-slide-a');\n    $$1('.mbsc-cal-slide', $scroller).slice(pageBuffer, pageBuffer + pageNr).addClass('mbsc-cal-slide-a');\n    $$1('.mbsc-cal-slide-a .mbsc-cal-day', $scroller).on('mouseenter', function () {\n      var $cell = $$1(this);\n\n      if (!wasTouched && !isPageMove) {\n        hoverTimer = setTimeout(function () {\n          isCellHover = true;\n          trigger('onCellHoverIn', getDayInfo($cell));\n        }, 150);\n      }\n    }).on('mouseleave', function () {\n      clearTimeout(hoverTimer);\n\n      if (!wasTouched && isCellHover) {\n        isCellHover = false;\n        trigger('onCellHoverOut', getDayInfo($$1(this)));\n      }\n    });\n\n    if (hasLabels) {\n      $$1('.mbsc-cal-slide-a .mbsc-cal-txt', $scroller).on('mouseenter', function () {\n        var id = $$1(this).attr('data-id');\n        $$1('.mbsc-cal-txt[data-id=\"' + id + '\"]', $scroller).addClass('mbsc-hover');\n      }).on('mouseleave', function () {\n        $$1('.mbsc-cal-txt.mbsc-hover', $scroller).removeClass('mbsc-hover');\n      });\n    }\n\n    trigger('onMonthLoaded', {\n      year: y,\n      month: m\n    });\n    trigger('onPageLoaded', {\n      firstDay: d\n    });\n  }\n\n  function genTabMarkup() {\n    var html, tabText;\n    html = '<div class=\"mbsc-cal-tabs-c\"><div class=\"mbsc-cal-tabs\" role=\"tablist\">';\n    controlsArray.forEach(function (v, i) {\n      tabText = s[(v == 'calendar' ? 'date' : v) + 'Text'];\n      html += '<div role=\"tab\" aria-controls=\"' + (elm.id + '-mbsc-pnl-' + i) + '\" class=\"mbsc-cal-tab mbsc-fr-btn-e ' + (i ? '' : cssSelectedTab) + '\" data-control=\"' + v + '\"' + (s.tabLink ? '><a href=\"#\">' + tabText + '</a>' : ' tabindex=\"0\">' + tabText) + '</div>';\n    });\n    html += '</div></div>';\n    return html;\n  }\n\n  function genCalMarkup() {\n    var html,\n        i,\n        j,\n        k,\n        monthBtns,\n        monthsMarkup,\n        yearBtns = '',\n        btnPrevClass = isRTL ? s.btnCalNextClass : s.btnCalPrevClass,\n        btnNextClass = isRTL ? s.btnCalPrevClass : s.btnCalNextClass; // Generate month buttons\n\n    monthBtns = '<div class=\"mbsc-cal-btn-w\"><div data-step=\"-1\" role=\"button\" tabindex=\"0\" aria-label=\"' + s.prevMonthText + '\" class=\"' + btnPrevClass + ' mbsc-cal-prev mbsc-cal-prev-m mbsc-cal-btn mbsc-fr-btn mbsc-fr-btn-e\"></div>';\n\n    for (i = 0; i < (calRows ? pageNr : 1); i++) {\n      monthBtns += '<div role=\"button\" class=\"mbsc-cal-month\"></div>';\n    }\n\n    monthBtns += '<div data-step=\"1\" role=\"button\" tabindex=\"0\" aria-label=\"' + s.nextMonthText + '\" class=\"' + btnNextClass + ' mbsc-cal-next mbsc-cal-next-m mbsc-cal-btn mbsc-fr-btn mbsc-fr-btn-e\"></div></div>'; // Generate year buttons\n\n    if (yearChange) {\n      yearBtns = '<div class=\"mbsc-cal-btn-w\"><div data-step=\"-12\" role=\"button\" tabindex=\"0\" aria-label=\"' + s.prevYearText + '\" class=\"' + btnPrevClass + ' mbsc-cal-prev mbsc-cal-prev-y mbsc-cal-btn mbsc-fr-btn mbsc-fr-btn-e\"></div>' + '<div role=\"button\" class=\"mbsc-cal-year\"></div>' + '<div data-step=\"12\" role=\"button\" tabindex=\"0\" aria-label=\"' + s.nextYearText + '\" class=\"' + btnNextClass + ' mbsc-cal-next mbsc-cal-next-y mbsc-cal-btn mbsc-fr-btn mbsc-fr-btn-e\"></div></div>';\n    }\n\n    if (calRows) {\n      monthsMarkup = genAllMonths(currFirstDay);\n    }\n\n    html = '<div class=\"mbsc-w-p mbsc-cal-c\"><div class=\"mbsc-cal ' + (isMonthView ? '' : ' mbsc-cal-week-view') + (pageNr > 1 ? ' mbsc-cal-multi ' : '') + (weekCounter ? ' mbsc-cal-weeks ' : '') + (isVertical ? ' mbsc-cal-vertical' : '') + (hasMarks ? ' mbsc-cal-has-marks' : '') + (hasLabels ? ' mbsc-cal-has-labels' : '') + ( // (hasText ? ' mbsc-cal-has-txt' : '') +\n    showOuterDays ? '' : ' mbsc-cal-hide-diff ') + (s.calendarClass || '') + '\"' + (!isLiquid ? ' style=\"width:' + (calWidth || 280 * pageNr) + 'px;\"' : '') + '>' + '<div class=\"mbsc-cal-hdr\">' + (yearIndex < monthIndex || pageNr > 1 ? yearBtns + monthBtns : monthBtns + yearBtns) + '</div>';\n\n    if (calRows) {\n      html += '<div class=\"mbsc-cal-body\"><div class=\"mbsc-cal-day-picker\"><div class=\"mbsc-cal-days-c\">';\n\n      for (j = 0; j < pageNr; j++) {\n        // Generate week days\n        html += '<div class=\"mbsc-cal-days\">';\n\n        for (i = 0; i < 7; i++) {\n          k = (i + firstWeekDay) % 7;\n          html += '<div class=\"mbsc-cal-week-day' + k + '\" aria-label=\"' + s.dayNames[k] + '\">' + s['dayNames' + weekDays][k] + '</div>';\n        }\n\n        html += '</div>';\n      }\n\n      html += '</div>' + '<div class=\"mbsc-cal-scroll-c mbsc-cal-day-scroll-c ' + (s.calendarClass || '') + '\"' + (s.calendarHeight ? ' style=\"height:' + s.calendarHeight + 'px\"' : '') + '>' + '<div class=\"mbsc-cal-scroll\" style=\"width:' + 100 / pageNr + '%' + '\">' + monthsMarkup + '</div></div>';\n    }\n\n    html += '</div>';\n\n    if (hasQuickNav) {\n      // Generate month picker\n      html += '<div class=\"mbsc-cal-month-picker mbsc-cal-picker mbsc-cal-h\"><div class=\"mbsc-cal-scroll-c ' + (s.calendarClass || '') + '\">' + '<div class=\"mbsc-cal-scroll\">';\n\n      for (i = 0; i < 3; i++) {\n        html += '<div class=\"mbsc-cal-slide\"' + getOffsetStyle(i - 1) + '><div role=\"grid\" class=\"mbsc-cal-table\"><div role=\"row\" class=\"mbsc-cal-row\">';\n\n        for (j = 0; j < 12; j++) {\n          if (j && j % 3 === 0) {\n            html += '</div><div role=\"row\" class=\"mbsc-cal-row\">';\n          }\n\n          html += '<div role=\"gridcell\"' + (i == 1 ? ' tabindex=\"-1\" aria-label=\"' + s.monthNames[j] + '\" data-val=\"' + j + '\"' : '') + ' class=\"mbsc-cal-cell' + (i == 1 ? ' mbsc-btn-e' : '') + '\"><div class=\"mbsc-cal-cell-i mbsc-cal-cell-txt\">' + (i == 1 ? s.monthNamesShort[j] : '&nbsp;') + '</div></div>';\n        }\n\n        html += '</div></div></div>';\n      }\n\n      html += '</div></div></div>'; // Generate year picker\n\n      html += '<div class=\"mbsc-cal-year-picker mbsc-cal-picker mbsc-cal-h\"><div class=\"mbsc-cal-scroll-c ' + (s.calendarClass || '') + '\">' + '<div class=\"mbsc-cal-scroll\">';\n\n      for (i = -1; i < 2; i++) {\n        html += genYears(getPageYear(currFirstDay, i), i);\n      }\n\n      html += '</div></div></div>';\n    } // Closing\n\n\n    html += '</div></div></div>';\n    return html;\n  }\n\n  function genYears(d, off) {\n    var i,\n        year = s.getYear(d),\n        html = '<div class=\"mbsc-cal-slide\"' + getOffsetStyle(off) + '><div role=\"grid\" class=\"mbsc-cal-table\"><div role=\"row\" class=\"mbsc-cal-row\">';\n\n    for (i = 0; i < 12; i++) {\n      if (i && i % 3 === 0) {\n        html += '</div><div role=\"row\" class=\"mbsc-cal-row\">';\n      }\n\n      html += '<div role=\"gridcell\" tabindex=\"-1\" aria-label=\"' + year + '\" data-val=\"' + year + '\"' + ' class=\"mbsc-cal-cell mbsc-btn-e ' + (year < minYear || year > maxYear ? ' mbsc-disabled ' : '') + (year == s.getYear(currFirstDay) ? cssSelected : '') + '\"><div class=\"mbsc-cal-cell-i mbsc-cal-cell-txt\">' + year + yearSuffix + '</div></div>';\n      year++;\n    }\n\n    html += '</div></div></div>';\n    return html;\n  }\n\n  function genMonth(firstDay, off) {\n    var bg,\n        curr,\n        cssClass,\n        y,\n        m,\n        d,\n        displayMonth,\n        displayDate,\n        fullDate,\n        props,\n        isValid,\n        isSelected,\n        isToday,\n        isOuterDay,\n        maxDays,\n        i,\n        j,\n        k = 1,\n        year = s.getYear(firstDay),\n        month = s.getMonth(firstDay),\n        day = s.getDay(firstDay),\n        selected = s.defaultValue === null && !inst._hasValue ? null : inst.getDate(true),\n        weekDay = s.getDate(year, month, day).getDay(),\n        // Get the weekday of the month\n    offset = firstWeekDay - weekDay > 0 ? 7 : 0,\n        html = '<div class=\"mbsc-cal-slide\"' + getOffsetStyle(off) + '><div role=\"grid\" class=\"mbsc-cal-table\"><div role=\"row\" class=\"mbsc-cal-row\">';\n\n    for (j = 0; j < 7 * calRows; j++) {\n      i = j + firstWeekDay - offset;\n      curr = s.getDate(year, month, i - weekDay + day);\n      y = curr.getFullYear();\n      m = curr.getMonth();\n      d = curr.getDate();\n      displayMonth = s.getMonth(curr);\n      displayDate = s.getDay(curr);\n      maxDays = s.getMaxDayOfMonth(y, m);\n      fullDate = y + '-' + (m + 1) + '-' + d;\n      props = extend$1({\n        valid: isValidDate(curr),\n        selected: selected && isSameDay(selected, curr)\n      }, getDayProps(curr));\n      bg = props.background === 'none' ? false : props.background;\n      isValid = props.valid;\n      isSelected = props.selected;\n      cssClass = props.cssClass; // Compare dates at noon, in some timezones 0:00 doesn't exists on daylight saving day\n\n      isToday = new Date(curr).setHours(12, 0, 0, 0) === new Date().setHours(12, 0, 0, 0);\n      isOuterDay = displayMonth !== month; // Day is from another month\n\n      dayProps[fullDate] = props;\n\n      if (j && j % 7 === 0) {\n        html += '</div><div role=\"row\" class=\"mbsc-cal-row\">';\n      }\n\n      if (weekCounter && j % 7 === 0) {\n        // If displaying days from next month, reset month counter\n        if (weekCounter == 'month' && isOuterDay && k > 1) {\n          k = d == 1 ? 1 : 2;\n        } else if (weekCounter == 'year') {\n          k = s.getWeekNumber(s.getDate(y, m, d + (7 - firstWeekDay + 1) % 7));\n        }\n\n        html += '<div role=\"gridcell\" class=\"mbsc-cal-cell mbsc-cal-week-nr\">' + k + '</div>';\n        k++;\n      }\n\n      html += '<div role=\"gridcell\"' + // Aria attributes\n      ' aria-label=\"' + (isToday ? s.todayText + ', ' : '') + s.dayNames[curr.getDay()] + ', ' + s.monthNames[displayMonth] + ' ' + displayDate + ' ' + (props.ariaLabel ? ', ' + props.ariaLabel : '') + '\"' + (isOuterDay && !showOuterDays ? ' aria-hidden=\"true\"' : ' data-full=\"' + fullDate + '\"') + (isOuterDay || !isValid ? ' aria-disabled=\"true\"' : '') + (isSelected ? ' aria-selected=\"true\"' : '') + (isValid ? ' tabindex=\"-1\"' : '') + // Classes\n      ' class=\"mbsc-cal-cell mbsc-cal-day mbsc-cal-day' + i % 7 + ' ' + (s.dayClass || '') + ' ' + (isSelected ? cssSelected : '') + (isToday ? ' ' + s.todayClass : '') + (cssClass ? ' ' + cssClass : '') + (displayDate == 1 ? ' mbsc-cal-day-first' : '') + (displayDate == maxDays ? ' mbsc-cal-day-last' : '') + (isOuterDay ? ' mbsc-cal-day-diff' : '') + (isValid ? ' mbsc-btn-e' : ' mbsc-disabled') + (props.marked ? ' mbsc-cal-day-marked' : '') + (bg ? ' mbsc-cal-day-colored' : '') + '\"><div class=\"mbsc-cal-cell-i mbsc-cal-day-i\"><div class=\"mbsc-cal-day-date mbsc-cal-cell-txt\"' + (bg ? ' style=\"background:' + bg + ';color:' + getTextColor(bg) + '\"' : '') + '>' + displayDate + '</div>'\n      /* TRIAL */\n      + ( // Extra markup (extra div is needed in RTL mode for Chrome, otherwise labels and marks appear at the top of the cell)\n      props.markup ? '<div class=\"mbsc-cal-day-markup\">' + props.markup + '</div>' : '') + '</div></div>';\n    }\n\n    html += '</div></div></div>';\n    return html;\n  }\n\n  function genAllMonths(firstDay, render, insert) {\n    var i,\n        y = s.getYear(firstDay),\n        m = s.getMonth(firstDay),\n        pos = dayScroll ? dayScroll.pos : 0,\n        html = '';\n    dayProps = {};\n\n    if (calRows) {\n      if (!render) {\n        trigger('onMonthLoading', {\n          year: y,\n          month: m\n        });\n        trigger('onPageLoading', {\n          firstDay: firstDay\n        });\n      }\n\n      onGenMonth(firstDay);\n\n      for (i = 0; i < pageTotal; i++) {\n        html += genMonth(getPageDay(firstDay, i - pageOffset - pageBuffer), pos * rtl + i - pageBuffer);\n      }\n    } //activateMonth(); // TODO: ???\n\n\n    needsRefresh = undefined;\n\n    if (insert && dayScroll) {\n      dayScroll.$active = null;\n      dayScroll.$scroller.html(html);\n      onPageLoaded(firstDay, y, m);\n    }\n\n    return html;\n  }\n\n  function focusDate(d, focus) {\n    if (dayScroll) {\n      var $active = dayScroll.$active;\n\n      if ($active && $active.length) {\n        $active[0].blur();\n\n        if ($active.hasClass('mbsc-disabled')) {\n          $active.removeAttr('tabindex');\n        } else {\n          $active.attr('tabindex', '-1');\n        }\n      }\n\n      dayScroll.$active = $$1('.mbsc-cal-slide-a .mbsc-cal-day[data-full=\"' + getDateStr(d) + '\"]', dayScroll.$scroller).attr('tabindex', '0');\n\n      if (focus && dayScroll.$active.length) {\n        dayScroll.$active[0].focus();\n      }\n    }\n  }\n\n  function highlightDate(d) {\n    var $ctx = dayScroll && dayScroll.$scroller;\n\n    if (s.highlight && dayScroll) {\n      $$1('.mbsc-selected', $ctx).removeClass(cssSelected).removeAttr('aria-selected');\n\n      if (s.defaultValue !== null || inst._hasValue) {\n        $$1('.mbsc-cal-day[data-full=\"' + getDateStr(d) + '\"]', $ctx).addClass(cssSelected).attr('aria-selected', 'true');\n      }\n    }\n  }\n\n  function highlightSelected(v, $ctx) {\n    $$1('.mbsc-selected', $ctx).removeClass(cssSelected).removeAttr('aria-selected');\n    $$1('.mbsc-cal-cell[data-val=\"' + v + '\"]', $ctx).addClass(cssSelected).attr('aria-selected', 'true');\n  }\n\n  function setDate(d, nav, anim, focus) {\n    var diff, newFirstDay;\n\n    if (!visibleTab) {\n      return;\n    }\n\n    if (d < minDate) {\n      d = minDate;\n    }\n\n    if (d > maxDate) {\n      d = maxDate;\n    }\n\n    if (visibleTab === 'calendar' || !hasTabs || nav) {\n      inst._isSetDate = !nav;\n\n      if (hasCal && calRows) {\n        newFirstDay = getFirstDay(constrain(d), isMonthView);\n\n        if (needsSlide && (d < getPageDay(currFirstDay, -pageOffset) || d >= getPageDay(currFirstDay, pageNr - pageOffset))) {\n          diff = isMonthView ? s.getMonth(newFirstDay) - s.getMonth(currFirstDay) + (s.getYear(newFirstDay) - s.getYear(currFirstDay)) * 12 : Math.floor(getDayDiff(currFirstDay, newFirstDay) / (7 * calRows));\n\n          if (diff) {\n            // Clear queue to navigate immediately\n            dayScroll.queue = [];\n            dayScroll.focus = focus && anim;\n            changePageQueue(dayScroll, diff, anim);\n          }\n        }\n\n        if (!diff || !anim) {\n          focusDate(d, focus);\n        }\n\n        if (!nav) {\n          highlightDate(d);\n        }\n\n        if (!isMonthView && !diff) {\n          setTitle(currFirstDay, true);\n        }\n\n        activeDate = d;\n        needsSlide = true;\n      }\n\n      inst._onSetDate(d, diff);\n\n      inst._isSetDate = false;\n    }\n  }\n\n  function setTitle(d, skipButtons) {\n    var i,\n        year,\n        month,\n        dd,\n        y = s.getYear(d),\n        m = s.getMonth(d),\n        yy = y + yearSuffix;\n\n    if (hasQuickNav) {\n      // Highlight month\n      highlightSelected(m, monthScroll.$scroller); // Highlight year\n\n      highlightSelected(y, yearScroll.$scroller); // Scroll to selected year\n\n      changePageQueue(yearScroll, Math.floor(y / 12) - Math.floor(s.getYear(yearScroll.first) / 12), true); // Disable out of range months\n\n      $$1('.mbsc-cal-cell', monthScroll.$scroller).removeClass('mbsc-disabled');\n\n      if (y === minYear) {\n        for (i = 0; i < minMonth; i++) {\n          $$1('.mbsc-cal-cell[data-val=\"' + i + '\"]', monthScroll.$scroller).addClass('mbsc-disabled');\n        }\n      }\n\n      if (y === maxYear) {\n        for (i = maxMonth + 1; i <= 12; i++) {\n          $$1('.mbsc-cal-cell[data-val=\"' + i + '\"]', monthScroll.$scroller).addClass('mbsc-disabled');\n        }\n      }\n    }\n\n    if (!skipButtons) {\n      // Disable/enable prev/next buttons\n      checkBtn($$1('.mbsc-cal-prev-m', $markup), getPageDay(d, -pageOffset) <= minDate);\n      checkBtn($$1('.mbsc-cal-next-m', $markup), getPageDay(d, pageNr - pageOffset) > maxDate);\n      checkBtn($$1('.mbsc-cal-prev-y', $markup), s.getDate(y - 1, m + 1, 1) <= minDate);\n      checkBtn($$1('.mbsc-cal-next-y', $markup), s.getDate(y + 1, m, 1) > maxDate);\n    } // Update year in header\n\n\n    $yearHdr.attr('aria-label', y).html(yy); // Update month in header\n\n    for (i = 0; i < pageNr; i++) {\n      dd = getPageDay(d, i - pageOffset);\n\n      if (selectedDate >= dd && selectedDate < getPageDay(dd, 1)) {\n        dd = selectedDate;\n      }\n\n      year = s.getYear(dd);\n      month = s.getMonth(dd);\n      yy = year + yearSuffix;\n      $monthHdr.eq(i).attr('aria-label', s.monthNames[month] + (yearChange ? '' : ' ' + y)).html((!yearChange && yearIndex < monthIndex ? yy + ' ' : '') + monthNames[month] + (!yearChange && yearIndex > monthIndex ? ' ' + yy : ''));\n    }\n  }\n\n  function checkBtn($btn, disable) {\n    if (disable) {\n      $btn.addClass(cssDisabled).attr('aria-disabled', 'true');\n    } else {\n      $btn.removeClass(cssDisabled).removeAttr('aria-disabled');\n    }\n  }\n\n  function getDayInfo($day) {\n    var day = $day[0],\n        full = $day.attr('data-full'),\n        parts = full ? full.split('-') : [],\n        d = adjustedDate(parts[0], parts[1] - 1, parts[2]),\n        selected = $day.hasClass('mbsc-selected');\n    return extend$1(dayProps[full], {\n      date: d,\n      target: day,\n      selected: selected\n    });\n  }\n\n  function selectDay($day, ev) {\n    var curr = inst.getDate(true),\n        props = getDayInfo($day),\n        day = $day[0],\n        d = props.date,\n        dtime = adjustedDate(d.getFullYear(), d.getMonth(), d.getDate(), curr.getHours(), curr.getMinutes(), curr.getSeconds()),\n        $target = $$1(ev.target),\n        target = $target[0];\n\n    if (!showOuterDays && $day.hasClass('mbsc-cal-day-diff')) {\n      return;\n    }\n\n    props.date = dtime; // Check if a label was tapped\n\n    if (hasLabels && day.contains(target)) {\n      while (target != day) {\n        if ($target.hasClass('mbsc-cal-txt') || $target.hasClass('mbsc-cal-txt-more')) {\n          var index = $target.attr('data-index');\n          var labels = labelsObj[d];\n\n          if (trigger('onLabelTap', {\n            date: dtime,\n            domEvent: ev,\n            target: $target[0],\n            labels: labels,\n            label: labels[index]\n          }) === false) {\n            return;\n          }\n\n          break;\n        }\n\n        $target = $target.parent();\n        target = $target[0];\n      }\n    }\n\n    if (trigger('onDayChange', props) !== false && !s.readonly && !$day.hasClass('mbsc-disabled')) {\n      inst._selectDay($day, d, dtime, props.selected);\n    }\n  }\n\n  function selectMonth($month) {\n    hideCont($monthPicker);\n    setDate(s.getDate(s.getYear(dayScroll.first), $month.attr('data-val'), 1), true, true);\n  }\n\n  function selectYear($year) {\n    hideCont($yearPicker);\n    setDate(s.getDate($year.attr('data-val'), s.getMonth(dayScroll.first), 1), true, true);\n  }\n\n  function getFirstDay(d, isMonth, w) {\n    var y = s.getYear(d),\n        m = s.getMonth(d),\n        weekDay = d.getDay(),\n        offset = firstWeekDay - weekDay > 0 ? 7 : 0;\n    return isMonth ? s.getDate(y, m, 1) : s.getDate(y, m, (w === undefined ? firstWeekDay : w) - offset - weekDay + s.getDay(d));\n  }\n\n  function getPageDay(d, diff) {\n    var year = s.getYear(d),\n        month = s.getMonth(d),\n        day = s.getDay(d);\n    return isMonthView ? s.getDate(year, month + diff, 1) : s.getDate(year, month, day + diff * calRows * 7);\n  }\n\n  function getPageYear(d, diff) {\n    var year = Math.floor(s.getYear(d) / 12) * 12;\n    return s.getDate(year + diff * 12, 0, 1);\n  }\n\n  function changePageQueue(props, diff, anim, callback) {\n    if (!diff || !inst._isVisible) {\n      return;\n    }\n\n    props.queue.push(arguments);\n\n    if (props.queue.length == 1) {\n      changePage(props, diff, anim, callback);\n    }\n  }\n\n  function changePage(props, diff, anim, callback) {\n    var i,\n        inc,\n        html = '',\n        $scroller = props.$scroller,\n        pageBuffer = props.buffer,\n        pageOffset = props.offset,\n        pageNr = props.pages,\n        pageTotal = props.total,\n        firstDay = props.first,\n        genPage = props.genPage,\n        getFirst = props.getFirst,\n        move = diff > 0 ? Math.min(diff, pageBuffer) : Math.max(diff, -pageBuffer),\n        pos = props.pos * rtl + move - diff + pageOffset,\n        load = Math.abs(diff) > pageBuffer; // Call any pending callback\n\n    if (props.callback) {\n      props.load();\n      props.callback(true);\n    }\n\n    props.first = getFirst(firstDay, diff);\n    props.pos += move * rtl;\n    props.changing = true;\n\n    props.load = function () {\n      if (load) {\n        for (i = 0; i < pageNr; i++) {\n          inc = diff + i - pageOffset; // ???\n\n          html += genPage(getFirst(firstDay, inc), pos + inc);\n        }\n\n        if (diff > 0) {\n          $$1('.mbsc-cal-slide', $scroller).slice(-pageNr).remove();\n          $scroller.append(html);\n        } else if (diff < 0) {\n          $$1('.mbsc-cal-slide', $scroller).slice(0, pageNr).remove();\n          $scroller.prepend(html);\n        }\n      }\n    };\n\n    props.callback = function (forceStop) {\n      var nr = Math.abs(move),\n          html = '';\n\n      if (!inst._isVisible) {\n        return;\n      }\n\n      for (i = 0; i < nr; i++) {\n        inc = diff + i - pageOffset - pageBuffer + (diff > 0 ? pageTotal - nr : 0); // ???\n\n        html += genPage(getFirst(firstDay, inc), pos + inc);\n      }\n\n      if (diff > 0) {\n        $scroller.append(html);\n        $$1('.mbsc-cal-slide', $scroller).slice(0, move).remove();\n      } else if (diff < 0) {\n        $scroller.prepend(html);\n        $$1('.mbsc-cal-slide', $scroller).slice(move).remove();\n      }\n\n      if (load) {\n        html = '';\n\n        for (i = 0; i < nr; i++) {\n          inc = diff + i - pageOffset - pageBuffer + (diff > 0 ? 0 : pageTotal - nr); // ???\n\n          html += genPage(getFirst(firstDay, inc), pos + inc);\n        }\n\n        if (diff > 0) {\n          $$1('.mbsc-cal-slide', $scroller).slice(0, move).remove();\n          $scroller.prepend(html);\n        } else if (diff < 0) {\n          $$1('.mbsc-cal-slide', $scroller).slice(move).remove();\n          $scroller.append(html);\n        }\n      }\n\n      refreshScroller(props);\n\n      if (callback && !forceStop) {\n        callback();\n      }\n\n      props.callback = null;\n      props.load = null;\n      props.queue.shift();\n      load = false;\n\n      if (props.queue.length) {\n        changePage.apply(this, props.queue[0]);\n      } else {\n        props.changing = false;\n        props.onAfterChange(props.first);\n      }\n    };\n\n    props.onBeforeChange(props.first);\n\n    if (props.load) {\n      props.load();\n      props.scroller.scroll(-props.pos * props.size, anim ? 200 : 0, false, props.callback);\n    }\n  }\n\n  function createScroller(cont, min, max, buffer, offset, pages, total, first, onTap, onBeforeChange, onAfterChange, genPage, getFirst) {\n    var axis = isVertical ? 'Y' : 'X',\n        props = {\n      $scroller: $$1('.mbsc-cal-scroll', cont),\n      queue: [],\n      buffer: buffer,\n      offset: offset,\n      pages: pages,\n      first: first,\n      total: total,\n      pos: 0,\n      min: min,\n      max: max,\n      genPage: genPage,\n      getFirst: getFirst,\n      onBeforeChange: onBeforeChange,\n      onAfterChange: onAfterChange\n    };\n    props.scroller = new ScrollViewBase(cont, {\n      axis: axis,\n      easing: '',\n      contSize: 0,\n      maxSnapScroll: buffer,\n      mousewheel: s.mousewheel === undefined ? isVertical : s.mousewheel,\n      time: 200,\n      lock: true,\n      rtl: isRTL,\n      stopProp: false,\n      minScroll: 0,\n      maxScroll: 0,\n      onBtnTap: function onBtnTap(ev) {\n        if (ev.domEvent.type == 'touchend') {\n          preventClick();\n        }\n\n        onTap($$1(ev.target), ev.domEvent);\n      },\n      onStart: function onStart() {\n        clearTimeout(hoverTimer);\n      },\n      onGestureStart: function onGestureStart() {\n        isPageMove = true;\n      },\n      onAnimationStart: function onAnimationStart() {\n        props.changing = true;\n      },\n      onAnimationEnd: function onAnimationEnd(ev) {\n        isPageMove = false;\n\n        if (genPage) {\n          changePageQueue(props, Math.round((-props.pos * props.size - ev['pos' + axis]) / props.size) * rtl);\n        }\n      }\n    });\n\n    inst._scrollers.push(props.scroller);\n\n    return props;\n  }\n\n  function refreshScroller(props, check) {\n    var size,\n        plus = 0,\n        minus = 0,\n        firstDay = props.first;\n\n    if (props.changing && check) {\n      return;\n    }\n\n    if (props.getFirst) {\n      plus = props.buffer;\n      minus = props.buffer; //while (minus && s.getDate(y, m + minus + monthNr - moveMonth - 1, 1) > maxDate) { ???\n\n      while (minus && props.getFirst(firstDay, minus + props.pages - props.offset - 1) > props.max) {\n        minus--;\n      } //while (plus && s.getDate(y, m - plus - moveMonth, 1) < minDate) { ???\n\n\n      while (plus && props.getFirst(firstDay, 1 - plus - props.offset) <= props.min) {\n        plus--;\n      }\n    }\n\n    size = Math.round(calSize / props.pages); // Page size might be a fractional value in case of multiple months\n    // so we need to explicitly set the rounded value\n\n    if (isLiquid && size && props.size != size) {\n      props.$scroller[isVertical ? 'height' : 'width'](size);\n    }\n\n    extend$1(props.scroller.settings, {\n      snap: size,\n      minScroll: (-props.pos * rtl - minus) * size,\n      maxScroll: (-props.pos * rtl + plus) * size\n    });\n    props.size = size;\n    props.scroller.refresh();\n  }\n\n  function refresh(render) {\n    inst._onRefresh(render);\n\n    if (inst._isVisible && hasCal && calRows) {\n      if (dayScroll && dayScroll.changing) {\n        needsRefresh = render;\n      } else {\n        genAllMonths(currFirstDay, render, true);\n        focusDate(activeDate);\n      }\n    }\n  }\n\n  function onTouchStart(ev) {\n    wasTouched = ev.type === 'touchstart';\n  }\n\n  function attachEvents() {\n    if (hasCal && calRows) {\n      var $scrollers = $$1('.mbsc-cal-scroll-c', $markup); // Day selector\n\n      dayScroll = createScroller($scrollers[0], minDate, maxDate, pageBuffer, pageOffset, pageNr, pageTotal, currFirstDay, selectDay, onBeforeMonthChange, onAfterMonthChange, genMonth, getPageDay);\n\n      if (hasQuickNav) {\n        // Month selector\n        monthScroll = createScroller($scrollers[1], null, null, 1, 0, 1, 3, currFirstDay, selectMonth); // Year selector\n\n        yearScroll = createScroller($scrollers[2], minFirstYear, maxFirstYear, 1, 0, 1, 3, currFirstDay, selectYear, noop, noop, genYears, getPageYear); // Show / hide month picker\n\n        inst.tap($monthHdr, function () {\n          toggleCont($monthPicker);\n          hideCont($yearPicker);\n        }); // Show / hide year picker\n\n        inst.tap($yearHdr, function () {\n          toggleCont($yearPicker);\n          hideCont($monthPicker);\n        });\n      } // Init navigation arrows\n\n\n      createStepper($$1('.mbsc-cal-btn', $markup), function (i, diff, ev, next) {\n        changePageQueue(dayScroll, diff, true, next);\n      }); // Triggers onMonthLoaded on initial render\n\n      onAfterMonthChange(currFirstDay); // Focus on the selected date on show\n\n      if ((s.defaultValue !== null || inst._hasValue) && !inst._multiple) {\n        inst._activeElm = dayScroll.$active[0];\n      }\n\n      listen($calendar[0], 'touchstart', onTouchStart, {\n        passive: true\n      });\n      listen($calendar[0], 'mousedown', onTouchStart);\n      $calendar // Keyboard navigation\n      .on('keydown', function (ev) {\n        var year = s.getYear(activeDate),\n            month = s.getMonth(activeDate),\n            day = s.getDay(activeDate),\n            newDate;\n\n        switch (ev.keyCode) {\n          case 32:\n            //SPACE\n            selectDay(dayScroll.$active, ev);\n            break;\n\n          case 37:\n            //LEFT_ARROW:\n            newDate = s.getDate(year, month, day - 1 * rtl);\n            break;\n\n          case 39:\n            //RIGHT_ARROW:\n            newDate = s.getDate(year, month, day + 1 * rtl);\n            break;\n\n          case 38:\n            //UP_ARROW:\n            newDate = s.getDate(year, month, day - 7);\n            break;\n\n          case 40:\n            //DOWN_ARROW:\n            newDate = s.getDate(year, month, day + 7);\n            break;\n\n          case 36:\n            //HOME:\n            newDate = s.getDate(year, month, 1);\n            break;\n\n          case 35:\n            //END:\n            newDate = s.getDate(year, month + 1, 0);\n            break;\n\n          case 33:\n            //PAGE_UP:\n            newDate = ev.altKey ? s.getDate(year - 1, month, day) : isMonthView ? s.getDate(year, month - 1, day) : s.getDate(year, month, day - calRows * 7);\n            break;\n\n          case 34:\n            //PAGE_DOWN:\n            newDate = ev.altKey ? s.getDate(year + 1, month, day) : isMonthView ? s.getDate(year, month + 1, day) : s.getDate(year, month, day + calRows * 7);\n            break;\n        }\n\n        if (newDate) {\n          ev.preventDefault();\n          setDate(newDate, true, false, true);\n        }\n      });\n    } // Tabs\n\n\n    inst.tap($$1('.mbsc-cal-tab', $markup), function () {\n      inst.changeTab($$1(this).attr('data-control'));\n    });\n  }\n\n  preProcessSettings();\n  base = DateTime.call(this, inst);\n  postProcessSettings(); // Public functions\n  // ---\n\n  inst.refresh = function () {\n    refresh(false);\n  };\n\n  inst.redraw = function () {\n    refresh(true);\n  };\n\n  inst.navigate = function (d, anim) {\n    setDate(makeDate(d, displayFormat, s), true, anim);\n  };\n\n  inst.changeTab = function (tab) {\n    if (!inst._isVisible || !controls[tab] || visibleTab == tab) {\n      return;\n    }\n\n    visibleTab = tab;\n    $$1('.mbsc-cal-tab', $markup).removeClass(cssSelectedTab).removeAttr('aria-selected');\n    $$1('.mbsc-cal-tab[data-control=\"' + tab + '\"]', $markup).addClass(cssSelectedTab).attr('aria-selected', 'true');\n\n    if (hasTabs) {\n      $tabPanes.addClass('mbsc-cal-h');\n      controls[visibleTab].removeClass('mbsc-cal-h');\n    }\n\n    if (visibleTab == 'calendar') {\n      // Set the date of the calendar if date changed from the scroller\n      setDate(inst.getDate(true), false, true);\n    } // Hide\n\n\n    inst._showDayPicker();\n\n    inst.trigger('onTabChange', {\n      tab: visibleTab\n    });\n  }; // ---\n  // Protected functions\n  // ---\n\n\n  inst._checkSize = true;\n  inst._onGenMonth = noop;\n  inst._onSetDate = noop;\n  inst._onRefresh = noop;\n  inst._getDayProps = noop;\n  inst._prepareObj = prepareObj;\n\n  inst._showDayPicker = function () {\n    if (hasQuickNav) {\n      hideCont($yearPicker);\n      hideCont($monthPicker);\n    }\n  };\n\n  inst._selectDay = inst.__selectDay = function ($day, d, dtime) {\n    var fill = inst.live; // Prevents month slide in setDate\n\n    needsSlide = s.outerMonthChange;\n    isDayClick = true; // Set date on scroller\n\n    inst.setDate(dtime, fill, 1000, !fill, true);\n\n    if (fill) {\n      trigger('onSet', {\n        valueText: inst._value\n      });\n    }\n  };\n\n  inst._checkBtn = checkBtn; // ---\n\n  return extend$1(base, {\n    labels: null,\n    // Overrides labels coming from language files\n    compClass: 'mbsc-calendar mbsc-dt mbsc-sc',\n    onMarkupReady: function onMarkupReady(ev) {\n      var j = 0;\n      $markup = $$1(ev.target);\n      $tabPaneCont = $$1('.mbsc-fr-c', $markup);\n      activeDate = inst.getDate(true);\n      calSize = 0;\n\n      if (hasCal) {\n        hasMarks = !!(s.marked || s.data) && !s.labels && !s.multiLabel && !s.showEventCount; // hasText = s.showEventCount || !!(s.events || s.labels);\n\n        needsSlide = true;\n        visibleTab = 'calendar';\n        calcMonthNr();\n        currFirstDay = getFirstDay(constrain(activeDate), isMonthView);\n        $tabPaneCont.append(genCalMarkup());\n        $monthHdr = $$1('.mbsc-cal-month', $markup);\n        $yearHdr = $$1('.mbsc-cal-year', $markup);\n        $calendar = $$1('.mbsc-cal-day-scroll-c', $markup);\n      }\n\n      if (hasQuickNav) {\n        $yearPicker = $$1('.mbsc-cal-year-picker', $markup);\n        $monthPicker = $$1('.mbsc-cal-month-picker', $markup);\n      }\n\n      $tabPanes = $$1('.mbsc-w-p', $markup); // Insert tab markup\n\n      if (controlsArray.length > 1) {\n        $tabPaneCont.before(genTabMarkup());\n      } // Find markup for controls\n\n\n      ['date', 'time', 'calendar'].forEach(function (v) {\n        if (controls[v]) {\n          controls[v] = $tabPanes.eq(j);\n          j++;\n        } else if (v == 'date' && !controls.date && hasCal) {\n          $tabPanes.eq(j).remove();\n          j++;\n        }\n      }); // Insert controls in correct order\n\n      controlsArray.forEach(function (v) {\n        $tabPaneCont.append(controls[v]);\n      }); // TODO: this is an ugly solution\n\n      if (!hasCal && controls.date) {\n        controls.date.css('position', 'relative');\n      }\n\n      inst._scrollers = [];\n      attachEvents();\n    },\n    onShow: function onShow() {\n      if (hasCal && calRows) {\n        setTitle(currFirstDay);\n      }\n    },\n    onHide: function onHide() {\n      inst._scrollers.forEach(function (v) {\n        v.destroy();\n      });\n\n      dayProps = null;\n      dayScroll = null;\n      monthScroll = null;\n      yearScroll = null;\n      visibleTab = null;\n    },\n    onValidated: function onValidated(ev) {\n      var ctrl,\n          d,\n          i = ev.index,\n          order = inst._order;\n      d = inst.getDate(true);\n      selectedDate = d; // Find out on which control was the selection made\n\n      if (isDayClick) {\n        ctrl = 'calendar';\n      } else if (i !== undefined) {\n        ctrl = order.dd == i || order.d == i || order.m == i || order.y == i ? 'date' : 'time';\n      }\n\n      trigger('onSetDate', {\n        date: d,\n        control: ctrl\n      }); // Set date on calendar\n\n      if (ctrl !== 'time') {\n        setDate(d, false, !!ev.time, isDayClick && !inst._multiple);\n      }\n\n      isDayClick = false;\n    },\n    onPosition: function onPosition(ev) {\n      var i,\n          y,\n          m,\n          doRefresh,\n          modalHeight,\n          newCalSize,\n          availableHeight,\n          oldHeight = ev.oldHeight,\n          windowHeight = ev.windowHeight;\n      hasTabs = (ev.hasTabs || s.tabs === true || s.tabs !== false && isLiquid) && controlsArray.length > 1;\n\n      if (isLiquid) {\n        if (ev.windowWidth >= s.breakPointMd) {\n          $$1(ev.target).addClass('mbsc-fr-md');\n        } else {\n          $$1(ev.target).removeClass('mbsc-fr-md');\n        }\n      } // Show/hide tabs\n\n\n      if (hasTabs) {\n        $markup.addClass('mbsc-cal-tabbed');\n        visibleTab = $$1('.mbsc-cal-tab.mbsc-selected', $markup).attr('data-control');\n        $tabPanes.addClass('mbsc-cal-h');\n        controls[visibleTab].removeClass('mbsc-cal-h');\n      } else {\n        // visibleTab = 'calendar';\n        $markup.removeClass('mbsc-cal-tabbed');\n        $tabPanes.removeClass('mbsc-cal-h');\n      } // Full screen mode\n\n\n      if (inst._isFullScreen) {\n        // Reset height\n        $calendar.height('');\n        modalHeight = ev.popup.offsetHeight; // Get available height\n\n        availableHeight = windowHeight - modalHeight + $calendar[0].offsetHeight; // Only set fixed height if calendar height is bigger than viewport height\n\n        if (windowHeight >= modalHeight) {\n          $calendar.height(availableHeight);\n        }\n      }\n\n      if (hasLabels && calRows && windowHeight != oldHeight) {\n        // Check how many labels can we display on a day\n        var calHeight = availableHeight || $calendar[0].offsetHeight;\n        var ph = $calendar.find('.mbsc-cal-txt,.mbsc-cal-txt-ph')[0];\n        var numberHeight = ph.offsetTop;\n        var txtHeight = ph.offsetHeight;\n        var newMaxLabels = Math.max(1, Math.floor((calHeight / calRows - numberHeight) / (txtHeight + 2))); // Redraw the calendar, if max labels changed\n\n        if (maxLabels != newMaxLabels) {\n          maxLabels = newMaxLabels;\n          inst.redraw();\n        }\n      } // Refresh scrollviews\n\n\n      if (hasCal && calRows) {\n        // Need to calculate size\n        if (isLiquid || isVertical || hasTabs) {\n          newCalSize = $calendar[0][isVertical ? 'offsetHeight' : 'offsetWidth'];\n        } else {\n          newCalSize = calWidth || pageNr * 280;\n        }\n\n        doRefresh = newCalSize != calSize;\n        calSize = newCalSize; // Use long or short month names\n\n        if (isLiquid && doRefresh) {\n          if (yearChange) {\n            monthNames = s.maxMonthWidth > $monthHdr[0].offsetWidth ? s.monthNamesShort : s.monthNames;\n            y = s.getYear(currFirstDay);\n            m = s.getMonth(currFirstDay);\n\n            for (i = 0; i < pageNr; i++) {\n              $monthHdr.eq(i).text(monthNames[s.getMonth(s.getDate(y, m - pageOffset + i, 1))]);\n            }\n          }\n        }\n\n        if (doRefresh) {\n          refreshScroller(dayScroll, true);\n        }\n      }\n\n      if (hasQuickNav && doRefresh) {\n        refreshScroller(monthScroll, true);\n        refreshScroller(yearScroll, true);\n      }\n    }\n  });\n};\n\nvar Calendar = Scroller;\nvar defaults$3 = {};\n\npresets.calendar = function (inst) {\n  function getDateOnly(d) {\n    return adjustedDate(d.getFullYear(), d.getMonth(), d.getDate());\n  }\n\n  function setValues(values) {\n    var d,\n        i,\n        first = null;\n    selectedValues = {};\n\n    if (values && values.length) {\n      for (i = 0; i < values.length; i++) {\n        d = makeDate(values[i], displayFormat, s, s.isoParts);\n        first = first || d;\n        selectedValues[getDateOnly(d)] = d;\n      }\n    }\n\n    return first;\n  }\n\n  function redraw() {\n    inst.redraw();\n  } // ---\n\n\n  var base,\n      ctx,\n      displayFormat,\n      firstSelectDay,\n      origValues,\n      orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, defaults$3, orig),\n      cssSelected = 'mbsc-selected ' + (s.selectedClass || ''),\n      defaultValue = s.defaultValue,\n      multi = s.select == 'multiple' || s.select > 1 || s.selectType == 'week',\n      maxSelect = isNumeric(s.select) ? s.select : Infinity,\n      selectedValues = {};\n  base = CalendarBase.call(this, inst);\n  firstSelectDay = s.firstSelectDay === undefined ? s.firstDay : s.firstSelectDay;\n  displayFormat = inst._format;\n\n  if (multi) {\n    setValues(defaultValue);\n  } // Extended methods\n  // ---\n\n\n  inst._multiple = multi;\n\n  inst._getDayProps = function (d) {\n    return {\n      selected: multi ? selectedValues[d] !== undefined : undefined\n    };\n  };\n\n  inst._selectDay = function ($day, d, dtime, selected) {\n    var isSingleSelect = s.select == 'single' || s.select == 1 || s.select === undefined; // Single select with instant close\n\n    if (s.setOnDayTap && isSingleSelect && s.display != 'inline') {\n      inst.setDate(dtime);\n      inst.select();\n      return;\n    }\n\n    if (multi) {\n      // Multiple day selection\n      if (s.selectType == 'week') {\n        // Select whole week\n        var i,\n            sel,\n            diff = d.getDay() - firstSelectDay;\n        diff = diff < 0 ? 7 + diff : diff;\n\n        if (isSingleSelect) {\n          // Only one week can be selected\n          selectedValues = {};\n        }\n\n        for (i = 0; i < 7; i++) {\n          sel = adjustedDate(d.getFullYear(), d.getMonth(), d.getDate() - diff + i);\n\n          if (selected) {\n            delete selectedValues[sel];\n          } else if (objectToArray(selectedValues).length / 7 < maxSelect) {\n            selectedValues[sel] = sel;\n          }\n        }\n\n        redraw();\n      } else {\n        // Select day only\n        var days = $$1('.mbsc-cal-day[data-full=\"' + $day.attr('data-full') + '\"]', ctx);\n\n        if (selected) {\n          days.removeClass(cssSelected).removeAttr('aria-selected');\n          delete selectedValues[d];\n        } else if (objectToArray(selectedValues).length < maxSelect) {\n          days.addClass(cssSelected).attr('aria-selected', 'true');\n          selectedValues[d] = d;\n        }\n      }\n    } // Standard selection\n\n\n    inst.__selectDay($day, d, dtime);\n  };\n\n  inst.setVal = function (val, fill, change, temp, time) {\n    if (multi) {\n      val = setValues(val);\n    }\n\n    inst._setVal(val, fill, change, temp, time);\n\n    if (multi) {\n      redraw();\n    }\n  };\n\n  inst.getVal = function (temp) {\n    var i,\n        ret = [];\n\n    if (multi) {\n      for (i in selectedValues) {\n        ret.push(returnDate(selectedValues[i], s, displayFormat));\n      }\n\n      return ret;\n    }\n\n    return returnDate(inst.getDate(temp), s, displayFormat);\n  }; // ---\n\n\n  return extend$1({}, base, {\n    highlight: !multi,\n    outerMonthChange: !multi,\n    parseValue: function parseValue(v) {\n      if (multi && v && typeof v === 'string') {\n        v = setValues(v.split(','));\n      }\n\n      if (multi && defaultValue && defaultValue.length) {\n        s.defaultValue = defaultValue[0];\n      }\n\n      return base.parseValue.call(this, v);\n    },\n    formatValue: function formatValue(d) {\n      var i,\n          ret = [];\n\n      if (multi) {\n        for (i in selectedValues) {\n          ret.push(formatDate(displayFormat, selectedValues[i], s));\n        }\n\n        return ret.join(', ');\n      }\n\n      return base.formatValue.call(this, d, inst);\n    },\n    onClear: function onClear() {\n      if (multi) {\n        selectedValues = {};\n        redraw();\n      }\n    },\n    onBeforeShow: function onBeforeShow() {\n      if (s.setOnDayTap === undefined && (!s.buttons || !s.buttons.length) && s.controls.length == 1) {\n        s.setOnDayTap = true;\n      }\n\n      if (s.setOnDayTap && s.display != 'inline') {\n        s.outerMonthChange = false;\n      }\n\n      if (s.counter && multi) {\n        s.headerText = function () {\n          var length = 0,\n              w = s.selectType == 'week' ? 7 : 1;\n          $$1.each(selectedValues, function () {\n            length++;\n          });\n          length = Math.round(length / w);\n          return (length > 1 ? s.selectedPluralText || s.selectedText : s.selectedText).replace(/{count}/, length);\n        };\n      }\n    },\n    onMarkupReady: function onMarkupReady(ev) {\n      base.onMarkupReady.call(this, ev);\n      ctx = $$1(ev.target);\n\n      if (multi) {\n        $$1('.mbsc-fr-hdr', ctx).attr('aria-live', 'off');\n        origValues = extend$1({}, selectedValues);\n      }\n    },\n    onCancel: function onCancel() {\n      if (!inst.live && multi) {\n        selectedValues = extend$1({}, origValues);\n      }\n    }\n  });\n};\n\nvar MbscDatetimeBase = function (_super) {\n  __extends(MbscDatetimeBase, _super);\n\n  function MbscDatetimeBase(initialElem, zone, control, inputService, view) {\n    return _super.call(this, initialElem, zone, control, inputService, view) || this;\n  }\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscDatetimeBase.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscDatetimeBase.prototype, \"invalid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Date)], MbscDatetimeBase.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Date)], MbscDatetimeBase.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"returnFormat\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscDatetimeBase.prototype, \"steps\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscDatetimeBase.prototype, \"valid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"calendarSystem\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"ampmText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"amText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"dateFormat\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"dateWheels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscDatetimeBase.prototype, \"dayNames\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscDatetimeBase.prototype, \"dayNamesShort\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"dayText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"hourText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"minuteText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscDatetimeBase.prototype, \"monthNames\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscDatetimeBase.prototype, \"monthNamesShort\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"monthSuffix\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"monthText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"nowText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"pmText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"secText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"timeFormat\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"timeWheels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"yearSuffix\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeBase.prototype, \"yearText\", void 0);\n\n  MbscDatetimeBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, ViewContainerRef])], MbscDatetimeBase);\n\n  MbscDatetimeBase.ɵfac = function MbscDatetimeBase_Factory(t) {\n    return new (t || MbscDatetimeBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscDatetimeBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscDatetimeBase,\n    selectors: [[\"mbsc-dt-b\"]],\n    inputs: {\n      defaultValue: \"defaultValue\",\n      invalid: \"invalid\",\n      max: \"max\",\n      min: \"min\",\n      returnFormat: \"returnFormat\",\n      steps: \"steps\",\n      valid: \"valid\",\n      calendarSystem: \"calendarSystem\",\n      ampmText: \"ampmText\",\n      amText: \"amText\",\n      dateFormat: \"dateFormat\",\n      dateWheels: \"dateWheels\",\n      dayNames: \"dayNames\",\n      dayNamesShort: \"dayNamesShort\",\n      dayText: \"dayText\",\n      hourText: \"hourText\",\n      minuteText: \"minuteText\",\n      monthNames: \"monthNames\",\n      monthNamesShort: \"monthNamesShort\",\n      monthSuffix: \"monthSuffix\",\n      monthText: \"monthText\",\n      nowText: \"nowText\",\n      pmText: \"pmText\",\n      secText: \"secText\",\n      timeFormat: \"timeFormat\",\n      timeWheels: \"timeWheels\",\n      yearSuffix: \"yearSuffix\",\n      yearText: \"yearText\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscDatetimeBase;\n}(MbscScrollerBase);\n\nvar MbscDatetimeBaseModule = function () {\n  function MbscDatetimeBaseModule() {}\n\n  MbscDatetimeBaseModule.ɵfac = function MbscDatetimeBaseModule_Factory(t) {\n    return new (t || MbscDatetimeBaseModule)();\n  };\n\n  MbscDatetimeBaseModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscDatetimeBaseModule\n  });\n  MbscDatetimeBaseModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscScrollerBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscDatetimeBaseModule, {\n      declarations: function () {\n        return [MbscDatetimeBase];\n      },\n      imports: function () {\n        return [CommonModule, MbscScrollerBaseModule];\n      }\n    });\n  })();\n\n  return MbscDatetimeBaseModule;\n}();\n\nvar MbscCalBase = function (_super) {\n  __extends(MbscCalBase, _super);\n\n  function MbscCalBase(initialElem, zone, control, inputService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, view) || this;\n\n    _this.onTabChange = new EventEmitter();\n    _this.onLabelTap = new EventEmitter();\n    _this.onMonthChange = new EventEmitter();\n    _this.onMonthLoading = new EventEmitter();\n    _this.onMonthLoaded = new EventEmitter();\n    _this.onPageChange = new EventEmitter();\n    _this.onPageLoaded = new EventEmitter();\n    _this.onPageLoading = new EventEmitter();\n    return _this;\n  }\n\n  MbscCalBase.prototype.ngOnInit = function () {\n    this.cloneDictionary.colors = [];\n    this.cloneDictionary.labels = [];\n    this.cloneDictionary.marked = [];\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscCalBase.prototype, \"calendarHeight\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscCalBase.prototype, \"calendarWidth\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalBase.prototype, \"calendarScroll\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscCalBase.prototype, \"colors\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscCalBase.prototype, \"counter\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscCalBase.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscCalBase.prototype, \"events\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscCalBase.prototype, \"labels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscCalBase.prototype, \"marked\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscCalBase.prototype, \"months\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscCalBase.prototype, \"mousewheel\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscCalBase.prototype, \"outerMonthChange\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscCalBase.prototype, \"showOuterDays\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscCalBase.prototype, \"tabs\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalBase.prototype, \"weekCounter\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalBase.prototype, \"weekDays\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscCalBase.prototype, \"weeks\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscCalBase.prototype, \"yearChange\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalBase.prototype, \"dateText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscCalBase.prototype, \"dayNamesMin\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscCalBase.prototype, \"firstDay\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalBase.prototype, \"timeText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalBase.prototype, \"moreEventsPluralText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalBase.prototype, \"moreEventsText\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalBase.prototype, \"onTabChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalBase.prototype, \"onLabelTap\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalBase.prototype, \"onMonthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalBase.prototype, \"onMonthLoading\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalBase.prototype, \"onMonthLoaded\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalBase.prototype, \"onPageChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalBase.prototype, \"onPageLoaded\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalBase.prototype, \"onPageLoading\", void 0);\n\n  MbscCalBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, ViewContainerRef])], MbscCalBase);\n\n  MbscCalBase.ɵfac = function MbscCalBase_Factory(t) {\n    return new (t || MbscCalBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscCalBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscCalBase,\n    selectors: [[\"mbsc-cal-b\"]],\n    inputs: {\n      calendarHeight: \"calendarHeight\",\n      calendarWidth: \"calendarWidth\",\n      calendarScroll: \"calendarScroll\",\n      colors: \"colors\",\n      counter: \"counter\",\n      defaultValue: \"defaultValue\",\n      events: \"events\",\n      labels: \"labels\",\n      marked: \"marked\",\n      months: \"months\",\n      mousewheel: \"mousewheel\",\n      outerMonthChange: \"outerMonthChange\",\n      showOuterDays: \"showOuterDays\",\n      tabs: \"tabs\",\n      weekCounter: \"weekCounter\",\n      weekDays: \"weekDays\",\n      weeks: \"weeks\",\n      yearChange: \"yearChange\",\n      dateText: \"dateText\",\n      dayNamesMin: \"dayNamesMin\",\n      firstDay: \"firstDay\",\n      timeText: \"timeText\",\n      moreEventsPluralText: \"moreEventsPluralText\",\n      moreEventsText: \"moreEventsText\"\n    },\n    outputs: {\n      onTabChange: \"onTabChange\",\n      onLabelTap: \"onLabelTap\",\n      onMonthChange: \"onMonthChange\",\n      onMonthLoading: \"onMonthLoading\",\n      onMonthLoaded: \"onMonthLoaded\",\n      onPageChange: \"onPageChange\",\n      onPageLoaded: \"onPageLoaded\",\n      onPageLoading: \"onPageLoading\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCalBase;\n}(MbscDatetimeBase);\n\nvar MbscCalBaseModule = function () {\n  function MbscCalBaseModule() {}\n\n  MbscCalBaseModule.ɵfac = function MbscCalBaseModule_Factory(t) {\n    return new (t || MbscCalBaseModule)();\n  };\n\n  MbscCalBaseModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscCalBaseModule\n  });\n  MbscCalBaseModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscDatetimeBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscCalBaseModule, {\n      declarations: function () {\n        return [MbscCalBase];\n      },\n      imports: function () {\n        return [CommonModule, MbscDatetimeBaseModule];\n      }\n    });\n  })();\n\n  return MbscCalBaseModule;\n}();\n\nvar MbscCalendar = function (_super) {\n  __extends(MbscCalendar, _super);\n\n  function MbscCalendar(initialElement, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElement, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.onSetDate = new EventEmitter();\n    _this.onCellHoverIn = new EventEmitter();\n    _this.onCellHoverOut = new EventEmitter();\n    _this.onDayChange = new EventEmitter();\n    _this.options = {};\n    _this.isMulti = undefined;\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscCalendar.prototype, \"value\", {\n    set: function (v) {\n      if (!this.control) {\n        this.setNewValueProxy(v);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscCalendar.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var changed = void 0;\n\n      if (this.isMulti) {\n        changed = !deepEqualsArray(v, this.instance.getVal());\n      } else {\n        var innerValue = this.instance.getVal();\n        changed = !innerValue && v || innerValue && !v || innerValue && v && innerValue.toString() !== v.toString();\n      }\n\n      if (changed) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscCalendar.prototype.initControl = function () {\n    var options = extend$1({\n      preset: 'calendar'\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Calendar(this.element, options);\n\n    if (this.initialValue !== undefined && this.initialValue !== \"\") {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  MbscCalendar.prototype.ngOnInit = function () {\n    this.isMulti = this.options && (this.options.select && this.options.select !== 'single' || this.options.selectType == 'week');\n    this.cloneDictionary.marked = [];\n    this.cloneDictionary.invalid = [];\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscCalendar.prototype, \"controls\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscCalendar.prototype, \"firstSelectDay\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalendar.prototype, \"selectType\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscCalendar.prototype, \"select\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscCalendar.prototype, \"setOnDayTap\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalendar.prototype, \"onSetDate\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalendar.prototype, \"onCellHoverIn\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalendar.prototype, \"onCellHoverOut\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscCalendar.prototype, \"onDayChange\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscCalendar.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-calendar'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscCalendar.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-calendarChange'), __metadata(\"design:type\", EventEmitter)], MbscCalendar.prototype, \"onChangeEmitter\", void 0);\n\n  MbscCalendar = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscCalendar);\n\n  MbscCalendar.ɵfac = function MbscCalendar_Factory(t) {\n    return new (t || MbscCalendar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscCalendar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscCalendar,\n    selectors: [[\"\", \"mbsc-calendar\", \"\"]],\n    inputs: {\n      value: [\"mbsc-calendar\", \"value\"],\n      controls: \"controls\",\n      firstSelectDay: \"firstSelectDay\",\n      selectType: \"selectType\",\n      select: \"select\",\n      setOnDayTap: \"setOnDayTap\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onSetDate: \"onSetDate\",\n      onCellHoverIn: \"onCellHoverIn\",\n      onCellHoverOut: \"onCellHoverOut\",\n      onDayChange: \"onDayChange\",\n      onChangeEmitter: \"mbsc-calendarChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCalendar;\n}(MbscCalBase);\n\nvar MbscCalendarComponent = function (_super) {\n  __extends(MbscCalendarComponent, _super);\n\n  function MbscCalendarComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.placeholder = '';\n    _this.errorMessage = '';\n    return _this;\n  }\n\n  MbscCalendarComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscCalendarComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscCalendarComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalendarComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalendarComponent.prototype, \"placeholder\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscCalendarComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCalendarComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscCalendarComponent.prototype, \"options\", void 0);\n\n  MbscCalendarComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscCalendarComponent);\n\n  MbscCalendarComponent.ɵfac = function MbscCalendarComponent_Factory(t) {\n    return new (t || MbscCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscCalendarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscCalendarComponent,\n    selectors: [[\"mbsc-calendar\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      placeholder: \"placeholder\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscCalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscCalendarComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCalendarComponent;\n}(MbscCalendar);\n\nvar MbscCalendarModule = function () {\n  function MbscCalendarModule() {}\n\n  MbscCalendarModule.ɵfac = function MbscCalendarModule_Factory(t) {\n    return new (t || MbscCalendarModule)();\n  };\n\n  MbscCalendarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscCalendarModule\n  });\n  MbscCalendarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscCalBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscCalendarModule, {\n      declarations: function () {\n        return [MbscCalendar, MbscCalendarComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscCalBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscCalendar, MbscCalendarComponent];\n      }\n    });\n  })();\n\n  return MbscCalendarModule;\n}();\n\nvar Button = /*#__PURE__*/function (_FormControl) {\n  _inheritsLoose(Button, _FormControl);\n\n  function Button(elm, settings) {\n    var _this;\n\n    _this = _FormControl.call(this, elm, settings) || this;\n    var $elm = _this._$elm;\n    var hasIcon = $elm.attr('data-icon');\n    $elm.addClass('mbsc-btn mbsc-no-touch').find('.mbsc-btn-ic').remove();\n\n    if (hasIcon) {\n      $elm.prepend('<span class=\"mbsc-btn-ic mbsc-ic mbsc-ic-' + hasIcon + '\"></span>');\n\n      if ($elm.text() === \"\") {\n        $elm.addClass('mbsc-btn-icon-only');\n      }\n    }\n\n    _this._$rippleElm = $elm;\n    return _this;\n  }\n\n  var _proto = Button.prototype;\n\n  _proto.getClassElm = function getClassElm() {\n    return this._$elm;\n  };\n\n  return Button;\n}(FormControl); // Init mbsc-button elements on page load\n\n\nautoInit('[mbsc-button]', Button);\n\nvar CheckBox = /*#__PURE__*/function (_FormControl) {\n  _inheritsLoose(CheckBox, _FormControl);\n\n  function CheckBox(elm, settings) {\n    var _this;\n\n    _this = _FormControl.call(this, elm, settings) || this;\n\n    _this._$parent.prepend(_this._$elm).addClass('mbsc-checkbox mbsc-control-w').find('.mbsc-checkbox-box').remove();\n\n    _this._$elm.after('<span class=\"mbsc-checkbox-box\"></span>');\n\n    return _this;\n  }\n\n  return CheckBox;\n}(FormControl); // Init mbsc-checkbox elements on page load\n\n\nautoInit('[mbsc-checkbox]', CheckBox);\n\nvar Radio = /*#__PURE__*/function (_FormControl) {\n  _inheritsLoose(Radio, _FormControl);\n\n  function Radio(elm, settings) {\n    var _this;\n\n    _this = _FormControl.call(this, elm, settings) || this;\n\n    _this._$parent.addClass('mbsc-radio mbsc-control-w').find('.mbsc-radio-box').remove();\n\n    _this._$elm.after('<span class=\"mbsc-radio-box\"><span></span></span>');\n\n    return _this;\n  }\n\n  return Radio;\n}(FormControl); // Init mbsc-radio elements on page load\n\n\nautoInit('[mbsc-radio]', Radio);\n\nvar Select = /*#__PURE__*/function (_Input) {\n  _inheritsLoose(Select, _Input);\n\n  function Select(elm, settings) {\n    var _this;\n\n    _this = _Input.call(this, elm, settings) || this;\n    var $elm = _this._$elm;\n    var $parent = _this._$parent;\n    var $existing = $parent.find('.mbsc-select-input');\n    var $input = $existing.length ? $existing : $$1('<input tabindex=\"-1\" class=\"mbsc-select-input mbsc-control\" readonly>');\n    _this._$input = $input;\n    _this._delm = $input[0];\n    _this._setText = _this._setText.bind(_assertThisInitialized(_this));\n    $parent.addClass('mbsc-select' + (_this._$frame ? ' mbsc-select-inline' : ''));\n    $elm.after($input);\n    $input.after('<span class=\"mbsc-select-ic mbsc-ic mbsc-ic-arrow-down5\"></span>'); // Update dummy input text on change\n\n    $elm.on('change', _this._setText);\n\n    _this._setText();\n\n    return _this;\n  }\n\n  var _proto = Select.prototype;\n\n  _proto.destroy = function destroy() {\n    _Input.prototype.destroy.call(this);\n\n    this._$parent.find('.mbsc-select-ic').remove();\n\n    this._$elm.off('change', this._setText);\n  };\n\n  _proto._setText = function _setText() {\n    var elm = this._elm;\n    var $elm = $$1(elm); // Check if select and mobiscroll select was not initialized\n\n    if ($elm.is('select') && !$elm.hasClass('mbsc-comp')) {\n      this._$input.val(elm.selectedIndex != -1 ? elm.options[elm.selectedIndex].text : '');\n    } // Check floating label\n\n\n    this.refresh();\n  };\n\n  return Select;\n}(Input); // Init mbsc-select elements on page load\n\n\nautoInit('[mbsc-dropdown]', Select);\nvar events$2 = ['change', 'keydown', 'input', 'scroll'];\nvar sizeDebounce;\n\nfunction sizeTextAreas() {\n  clearTimeout(sizeDebounce);\n  sizeDebounce = setTimeout(function () {\n    $$1('textarea.mbsc-control').each(function () {\n      sizeTextArea(this);\n    });\n  }, 100);\n}\n\nfunction sizeTextArea(control) {\n  var height,\n      lineNr,\n      line,\n      rowNr = $$1(control).attr('rows') || 6;\n\n  if (control.offsetHeight) {\n    control.style.height = '';\n    line = control.scrollHeight - control.offsetHeight;\n    height = control.offsetHeight + (line > 0 ? line : 0);\n    lineNr = Math.round(height / 24);\n\n    if (lineNr > rowNr) {\n      //control.scrollTop = height;\n      height = 24 * rowNr + (height - lineNr * 24);\n      $$1(control).addClass('mbsc-textarea-scroll');\n    } else {\n      $$1(control).removeClass('mbsc-textarea-scroll');\n    }\n\n    if (height) {\n      control.style.height = height + 'px';\n    }\n  }\n}\n\nfunction scrollTextArea(elm) {\n  var $elm = $$1(elm);\n\n  if (!$elm.hasClass('mbsc-textarea-scroll')) {\n    var line = elm.scrollHeight - elm.offsetHeight,\n        height = elm.offsetHeight + line,\n        lineNr = Math.round(height / 24),\n        rowNr = $elm.attr('rows') || 6;\n\n    if (lineNr <= rowNr) {\n      elm.scrollTop = 0;\n      elm.style.height = height + 'px';\n    }\n  }\n}\n\nif (isBrowser) {\n  // Set height of textareas on viewport size changes\n  $$1(window).on('resize orientationchange', sizeTextAreas);\n}\n\nvar TextArea = /*#__PURE__*/function (_Input) {\n  _inheritsLoose(TextArea, _Input);\n\n  function TextArea(elm, settings) {\n    var _this;\n\n    _this = _Input.call(this, elm, settings) || this;\n\n    _this._$parent.addClass('mbsc-textarea');\n\n    events$2.forEach(function (ev) {\n      _this._$elm.on(ev, _this._handle);\n    });\n    sizeTextArea(elm);\n    return _this;\n  }\n\n  var _proto = TextArea.prototype;\n\n  _proto.destroy = function destroy() {\n    var _this2 = this;\n\n    _Input.prototype.destroy.call(this);\n\n    events$2.forEach(function (ev) {\n      _this2._$elm.off(ev, _this2._handle);\n    });\n  };\n\n  _proto.refresh = function refresh() {\n    _Input.prototype.refresh.call(this);\n\n    clearTimeout(this._debounce);\n    sizeTextArea(this._elm);\n  };\n\n  _proto._handle = function _handle(ev) {\n    _Input.prototype._handle.call(this, ev);\n\n    switch (ev.type) {\n      case 'change':\n        sizeTextArea(this._elm);\n        break;\n\n      case 'keydown':\n      case 'input':\n        this._onInput(ev);\n\n        break;\n\n      case 'scroll':\n        scrollTextArea(this._elm);\n    }\n  };\n\n  _proto._onInput = function _onInput() {\n    var _this3 = this;\n\n    clearTimeout(this._debounce);\n    this._debounce = setTimeout(function () {\n      sizeTextArea(_this3._elm);\n    }, 100);\n  };\n\n  return TextArea;\n}(Input);\n\nautoInit('[mbsc-textarea]', TextArea);\n\nvar SegmentedItem = /*#__PURE__*/function (_FormControl) {\n  _inheritsLoose(SegmentedItem, _FormControl);\n\n  function SegmentedItem(elm, settings) {\n    var _this;\n\n    _this = _FormControl.call(this, elm, settings) || this;\n    var $segmentCont;\n    var $segment;\n    var $elm = _this._$elm;\n    var $parent = _this._$parent;\n\n    if (!$parent.hasClass('mbsc-segmented-item-ready')) {\n      $segmentCont = $$1('<div class=\"mbsc-segmented mbsc-no-touch\"></div>');\n      $parent.after($segmentCont);\n      $parent.parent().find('input[name=\"' + $elm.attr('name') + '\"]').each(function () {\n        var $input = $$1(this);\n        $segment = $input.parent().addClass('mbsc-segmented-item mbsc-segmented-item-ready');\n        $$1('<span class=\"mbsc-segmented-content\">' + ($input.attr('data-icon') ? '<span class=\"mbsc-ic mbsc-ic-' + $input.attr('data-icon') + '\"></span>' : '') + '</span>').append($segment.contents()).appendTo($segment);\n        $segment.prepend($input);\n        $segmentCont.append($segment);\n      });\n    }\n\n    _this._$rippleElm = $elm.next();\n    return _this;\n  }\n\n  var _proto = SegmentedItem.prototype;\n\n  _proto.getClassElm = function getClassElm() {\n    return this._$elm.closest('.mbsc-segmented');\n  };\n\n  return SegmentedItem;\n}(FormControl); // Init mbsc-segmented elements on page load\n\n\nautoInit('[mbsc-segmented]', SegmentedItem);\n\nvar Stepper = function Stepper(control, settings) {\n  var $btnPlus,\n      $btnMinus,\n      $controls,\n      cssClass = '',\n      displayValue,\n      max,\n      min,\n      inputStyle,\n      ripple,\n      scale,\n      step,\n      stepper,\n      s,\n      theme,\n      val,\n      that = this,\n      $control = $$1(control),\n      ready,\n      $parent,\n      old = val;\n\n  function onChange() {\n    var v;\n\n    if (!control.disabled) {\n      v = parseFloat($$1(this).val());\n      setValue(isNaN(v) ? val : v);\n    }\n  }\n\n  function checkDisabled() {\n    return control.disabled;\n  }\n\n  function stepValue(index, dir) {\n    setValue(val + dir * step);\n  }\n\n  function setValue(v, fill, change) {\n    old = val;\n\n    if (fill === undefined) {\n      fill = true;\n    }\n\n    if (change === undefined) {\n      change = fill;\n    }\n\n    val = round(v);\n    $controls.removeClass('mbsc-disabled');\n\n    if (fill) {\n      $control.val(val);\n    }\n\n    if (val == min) {\n      $btnMinus.addClass('mbsc-disabled');\n    } else if (val == max) {\n      $btnPlus.addClass('mbsc-disabled');\n    }\n\n    if (val !== old && change) {\n      $control.trigger('change');\n    }\n  }\n\n  function getAttr(attr, def, str) {\n    var v = $control.attr(attr);\n    return v === undefined || v === '' ? def : str ? v : +v;\n  }\n\n  function round(v) {\n    return +Math.min(max, Math.max(Math.round(v / step) * step, min)).toFixed(scale);\n  } // Call the parent constructor\n\n\n  Base.call(this, control, settings, true);\n  /* TRIALFUNC */\n\n  that.getVal = function () {\n    var v = parseFloat($control.val());\n    v = isNaN(v) ? val : v;\n    return round(v);\n  };\n\n  that.setVal = function (v, fill, change) {\n    v = parseFloat(v);\n    setValue(isNaN(v) ? val : v, fill, change);\n  };\n\n  that._init = function () {\n    ready = $control.parent().hasClass('mbsc-stepper');\n    $parent = ready ? $control.closest('.mbsc-stepper-cont') : $control.parent();\n    s = that.settings;\n    min = settings.min === undefined ? getAttr('min', s.min) : settings.min;\n    max = settings.max === undefined ? getAttr('max', s.max) : settings.max;\n    step = settings.step === undefined ? getAttr('step', s.step) : settings.step;\n    scale = Math.abs(step) < 1 ? (step + '').split('.')[1].length : 0;\n    inputStyle = settings.inputStyle === undefined ? getAttr('data-input-style', s.inputStyle, true) : settings.inputStyle;\n    displayValue = $control.attr('data-val') || s.val;\n    val = round(+control.value || 0);\n    theme = mobiscroll.themes.form[s.theme];\n    ripple = theme && theme.addRipple ? theme : null;\n\n    if (!ready) {\n      $parent.addClass('mbsc-stepper-cont mbsc-no-touch mbsc-control-w').addClass(inputStyle == 'box' ? 'mbsc-input-box' : '').addClass(inputStyle == 'outline' ? 'mbsc-input-outline' : '').append('<span class=\"mbsc-segmented mbsc-stepper' + '\"></span>').find('.mbsc-stepper').append('<span class=\"mbsc-segmented-item mbsc-stepper-control mbsc-stepper-minus ' + (val == min ? 'mbsc-disabled' : '') + '\" data-step=\"-1\" tabindex=\"0\"><span class=\"mbsc-segmented-content\"><span class=\"mbsc-ic mbsc-ic-minus\"></span></span></span>').append('<span class=\"mbsc-segmented-item mbsc-stepper-control mbsc-stepper-plus ' + (val == max ? 'mbsc-disabled' : '') + '\"  data-step=\"1\" tabindex=\"0\"><span class=\"mbsc-segmented-content\"> <span class=\"mbsc-ic mbsc-ic-plus\"></span></span></span>').prepend($control);\n    }\n\n    if (cssClass) {\n      $parent.removeClass(cssClass).find('.mbsc-segmented').removeClass(cssClass);\n    }\n\n    cssClass = 'mbsc-' + s.theme + (theme.baseTheme ? ' mbsc-' + theme.baseTheme : '') + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr');\n    $parent.addClass(cssClass).find('.mbsc-segmented').addClass(cssClass);\n    $btnMinus = $$1('.mbsc-stepper-minus', $parent);\n    $btnPlus = $$1('.mbsc-stepper-plus', $parent);\n    $controls = $$1('.mbsc-stepper-control', $parent);\n\n    if (!ready) {\n      if (displayValue == 'left') {\n        $parent.addClass('mbsc-stepper-val-left');\n        $control.after('<span class=\"mbsc-segmented-item\"><span class=\"mbsc-segmented-content\"></span></span>');\n      } else if (displayValue == 'right') {\n        $parent.addClass('mbsc-stepper-val-right');\n        $btnPlus.after('<span class=\"mbsc-segmented-item\"><span class=\"mbsc-segmented-content\"></span></span>');\n      } else {\n        $btnMinus.after('<span class=\"mbsc-segmented-item\"><span class=\"mbsc-segmented-content mbsc-stepper-val\"></span></span>');\n      }\n    }\n\n    if (!stepper) {\n      $control.on('change', onChange);\n      stepper = createStepper($controls, stepValue, 150, checkDisabled, false, ripple);\n    }\n\n    $control.val(val).attr('data-role', 'stepper').attr('min', min).attr('max', max).attr('step', step).addClass('mbsc-control');\n    control.mbscInst = that;\n  };\n\n  that._destroy = function () {\n    $control.removeClass('mbsc-control').off('change', onChange);\n    stepper.destroy();\n    delete control.mbscInst;\n  };\n\n  that.init();\n};\n\nStepper.prototype = {\n  _class: 'stepper',\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _defaults: {\n    min: 0,\n    max: 100,\n    step: 1\n  }\n};\nclasses.Stepper = Stepper; // Init mbsc-stepper elements on page load\n\nautoInit('[mbsc-stepper]', Stepper);\n\nvar ProgressBase = function ProgressBase(elm, settings, inherit) {\n  var $elm,\n      $parent,\n      cssClass,\n      s,\n      that = this; // Call the parent constructor\n\n  Base.call(this, elm, settings, true);\n  that.__init = noop;\n  that.__destroy = noop;\n\n  that._init = function () {\n    var wasInit;\n    s = that.settings;\n    $elm = $$1(elm); // Check if the element was already initialized\n\n    wasInit = !!$parent;\n    $parent = $elm.parent();\n    $parent = $parent.hasClass('mbsc-input-wrap') ? $parent.parent() : $parent;\n    that._$parent = $parent;\n\n    if (cssClass) {\n      $parent.removeClass(cssClass);\n    }\n\n    cssClass = that._css + ' mbsc-progress-w mbsc-control-w ' + getCssClass(s);\n    $parent.addClass(cssClass);\n    $elm.addClass('mbsc-control');\n\n    that.__init();\n\n    if (!wasInit) {\n      that._attachChange();\n    } // Show initial value\n\n\n    that.refresh();\n    elm.mbscInst = that;\n  };\n\n  that._destroy = function () {\n    that.__destroy();\n\n    $parent.removeClass(cssClass);\n    $elm.removeClass('mbsc-control');\n    delete elm.mbscInst;\n  };\n\n  if (!inherit) {\n    that.init();\n  }\n};\n\nvar SliderBase = function SliderBase(elm, settings, inherit) {\n  var $elm,\n      $handle,\n      $handleCont,\n      $handles,\n      $parent,\n      $track,\n      action,\n      base,\n      changed,\n      diffX,\n      diffY,\n      diff,\n      endX,\n      endY,\n      handleIndex,\n      isHover,\n      isPressed,\n      isRtl,\n      listener,\n      live,\n      max,\n      min,\n      moved,\n      multiple,\n      oldValue,\n      step,\n      s,\n      scale,\n      startX,\n      startY,\n      stepDecimal,\n      timer,\n      totalWidth,\n      value,\n      that = this,\n      lastUpdate = new Date();\n\n  function onStart(ev) {\n    if (ev.type === 'mousedown') {\n      ev.preventDefault();\n    }\n\n    if (testTouch(ev, this) && (!action || isHover) && !elm.disabled && !elm.readOnly\n    /* TRIALCOND */\n    ) {\n      if (s.stopProp) {\n        ev.stopPropagation();\n      }\n\n      action = true;\n      moved = false;\n      changed = false;\n      startX = getCoord(ev, 'X');\n      startY = getCoord(ev, 'Y');\n      endX = startX;\n      $track.removeClass('mbsc-progress-anim');\n      $handle = multiple ? $$1('.mbsc-slider-handle', this) : $handles;\n\n      if ($handleCont) {\n        $handleCont.removeClass('mbsc-handle-curr');\n      }\n\n      $handleCont = $handle.parent().addClass('mbsc-active mbsc-handle-curr');\n      $elm.addClass('mbsc-active');\n      handleIndex = +$handle.attr('data-index');\n      totalWidth = $track[0].offsetWidth;\n      diff = $track[0].getBoundingClientRect().left;\n\n      if (ev.type === 'mousedown') {\n        isPressed = true;\n        $$1(document).on('mousemove', onMove).on('mouseup', onEnd);\n      }\n\n      if (ev.type === 'mouseenter') {\n        isHover = true;\n        $$1(document).on('mousemove', onMove);\n      }\n    }\n  }\n\n  function onMove(ev) {\n    if (action) {\n      endX = getCoord(ev, 'X');\n      endY = getCoord(ev, 'Y');\n      diffX = endX - startX;\n      diffY = endY - startY;\n\n      if (Math.abs(diffX) > 5) {\n        moved = true;\n      }\n\n      if (moved || isPressed || isHover) {\n        if (Math.abs(lastUpdate - new Date()) > 50) {\n          lastUpdate = new Date();\n          updateSlider(endX, s.round, live && (!isHover || isPressed));\n        }\n      }\n\n      if (moved) {\n        ev.preventDefault();\n      } else if (Math.abs(diffY) > 7 && ev.type == 'touchmove') {\n        cleanUp();\n      }\n    }\n  }\n\n  function onEnd(ev) {\n    if (action) {\n      ev.preventDefault();\n\n      if (!multiple) {\n        $track.addClass('mbsc-progress-anim');\n      }\n\n      if (isHover && !isPressed) {\n        updateValue(value[handleIndex], handleIndex, false, false, true);\n      } else {\n        updateSlider(endX, true, true);\n      }\n\n      if (!moved && !changed) {\n        if (ev.type == 'touchend') {\n          // Prevent ghost click\n          preventClick();\n        }\n\n        that._onTap(value[handleIndex]);\n      }\n\n      if (ev.type == 'mouseup') {\n        isPressed = false;\n      }\n\n      if (ev.type == 'mouseleave') {\n        isHover = false;\n      }\n\n      if (!isHover) {\n        cleanUp();\n      }\n    }\n  }\n\n  function onCancel() {\n    if (action) {\n      cleanUp();\n    }\n  }\n\n  function onChange() {\n    var v = that._readValue($$1(this)),\n        i = +$$1(this).attr('data-index');\n\n    if (v !== value[i]) {\n      value[i] = v;\n      oldValue[i] = v;\n      updateValue(v, i);\n    }\n  }\n\n  function onClick(ev) {\n    // Prevent propagating click to label\n    ev.stopPropagation();\n  }\n\n  function onLabelClick(ev) {\n    // Prevent change on label click for swithes\n    ev.preventDefault();\n  }\n\n  function onKeyDown(ev) {\n    var dir;\n\n    if (!elm.disabled) {\n      switch (ev.keyCode) {\n        case 38:\n        case 39:\n          dir = 1;\n          break;\n\n        case 40:\n        case 37:\n          dir = -1;\n          break;\n      }\n\n      if (dir) {\n        ev.preventDefault();\n\n        if (!timer) {\n          handleIndex = +$$1(this).attr('data-index');\n          updateValue(value[handleIndex] + step * dir, handleIndex, true);\n          timer = setInterval(function () {\n            updateValue(value[handleIndex] + step * dir, handleIndex, true);\n          }, 200);\n        }\n      }\n    }\n  }\n\n  function onKeyUp(ev) {\n    ev.preventDefault();\n    clearInterval(timer);\n    timer = null;\n  }\n\n  function cleanUp() {\n    action = false;\n    $handleCont.removeClass('mbsc-active');\n    $elm.removeClass('mbsc-active'); // Detach document events\n\n    $$1(document).off('mousemove', onMove).off('mouseup', onEnd);\n  }\n\n  function updateSlider(pos, round, fill) {\n    var percent = round ? Math.min(Math[that._rounding || 'round'](Math.max((pos - diff) * 100 / totalWidth, 0) / scale / step) * step * 100 / (max - min + base), 100) : Math.max(0, Math.min((pos - diff) * 100 / totalWidth, 100));\n\n    if (isRtl) {\n      percent = 100 - percent;\n    }\n\n    updateValue(Math.round((min - base + percent / scale) * stepDecimal) / stepDecimal, handleIndex, fill, percent);\n  }\n\n  function updateValue(v, index, fill, percent, refresh, change) {\n    var $handle = $handles.eq(index),\n        $handleCont = $handle.parent();\n    v = Math.min(max, Math.max(v, min));\n\n    if (change === undefined) {\n      change = fill;\n    }\n\n    if (that._update) {\n      v = that._update(v, value, index, percent, multiple, refresh, $handleCont);\n    } else {\n      $handleCont.css({\n        left: isRtl ? 'auto' : (percent || getPercent(v, min, max)) + '%',\n        right: isRtl ? (percent || getPercent(v, min, max)) + '%' : 'auto'\n      });\n    }\n\n    if (v > min) {\n      $handleCont.removeClass('mbsc-slider-start');\n    } else if (value[index] > min || refresh) {\n      $handleCont.addClass('mbsc-slider-start');\n    } // Store new value\n\n\n    if (fill) {\n      value[index] = v;\n    } // Check if value changed\n\n\n    if (fill && oldValue[index] != v) {\n      changed = true;\n      oldValue[index] = v; // Set new value to the input\n\n      that._fillValue(v, index, change);\n    }\n\n    $handle.attr('aria-valuenow', v);\n  } // Call the parent constructor\n\n\n  ProgressBase.call(this, elm, settings, true);\n  that._onTap = noop;\n  that.___init = noop;\n  that.___destroy = noop;\n\n  that._attachChange = function () {\n    $elm.on(s.changeEvent, onChange);\n  };\n\n  that.__init = function () {\n    var wasInit;\n\n    if ($handles) {\n      wasInit = true;\n      $handles.parent().remove();\n    }\n\n    that.___init();\n\n    $parent = that._$parent;\n    $track = that._$track;\n    $elm = $parent.find('input');\n    s = that.settings;\n    min = that._min;\n    max = that._max;\n    base = that._base || 0;\n    step = that._step;\n    live = that._live;\n    stepDecimal = step % 1 !== 0 ? 100 / (+(step % 1).toFixed(2) * 100) : 1;\n    scale = 100 / (max - min + base) || 100;\n    multiple = $elm.length > 1;\n    isRtl = s.rtl;\n    value = [];\n    oldValue = []; // Read values\n\n    $elm.each(function (i) {\n      value[i] = that._readValue($$1(this));\n      $$1(this).attr('data-index', i);\n    });\n    $handles = $parent.find('.mbsc-slider-handle');\n    listener = $parent.find(multiple ? '.mbsc-slider-handle-cont' : '.mbsc-progress-cont')[0]; // Attach events\n\n    $handles.on('keydown', onKeyDown).on('keyup', onKeyUp).on('blur', onKeyUp);\n    listen(listener, 'touchstart', onStart, {\n      passive: true\n    });\n    listen(listener, 'mousedown', onStart);\n    listen(listener, 'touchend', onEnd);\n    listen(listener, 'touchcancel', onEnd);\n    listen(listener, 'pointercancel', onCancel);\n\n    if (s.hover) {\n      listen(listener, 'mouseenter', onStart);\n      listen(listener, 'mouseleave', onEnd);\n    }\n\n    if (!wasInit) {\n      $elm.on('click', onClick);\n      $parent.on('click', onLabelClick); // Attach to document to avoid non-passive listener warnings\n\n      listen(document, 'touchmove', onMove, {\n        passive: false\n      });\n    }\n  };\n\n  that.__destroy = function () {\n    $parent.off('click', onLabelClick);\n    $elm.off(s.changeEvent, onChange).off('click', onClick);\n    $handles.off('keydown', onKeyDown).off('keyup', onKeyUp).off('blur', onKeyUp);\n    unlisten(listener, 'touchstart', onStart, {\n      passive: true\n    });\n    unlisten(listener, 'mousedown', onStart);\n    unlisten(listener, 'touchend', onEnd);\n    unlisten(listener, 'touchcancel', onEnd);\n    unlisten(listener, 'pointercancel', onCancel);\n    unlisten(listener, 'mouseenter', onStart);\n    unlisten(listener, 'mouseleave', onEnd);\n    unlisten(document, 'touchmove', onMove, {\n      passive: false\n    });\n\n    that.___destroy();\n  };\n\n  that.refresh = function () {\n    $elm.each(function (i) {\n      updateValue(that._readValue($$1(this)), i, true, false, true, false);\n    });\n  };\n\n  that.getVal = function () {\n    return multiple ? value.slice(0) : value[0];\n  };\n\n  that.setVal = that._setVal = function (val, fill, change) {\n    if (!$$1.isArray(val)) {\n      val = [val];\n    }\n\n    $$1.each(val, function (i, v) {\n      value[i] = v;\n    });\n    $$1.each(val, function (i, v) {\n      updateValue(v, i, true, false, true, change);\n    });\n  };\n\n  if (!inherit) {\n    that.init();\n  }\n};\n\nvar Switch = function Switch(elm, settings) {\n  var $elm,\n      $parent,\n      s,\n      formControl,\n      that = this;\n  settings = settings || {};\n  extend$1(settings, {\n    changeEvent: 'click',\n    round: false\n  }); // Call the parent constructor\n\n  SliderBase.call(this, elm, settings, true);\n\n  that._readValue = function () {\n    return elm.checked ? 1 : 0;\n  };\n\n  that._fillValue = function (v, index, change) {\n    $elm.prop('checked', !!v);\n\n    if (change) {\n      $elm.trigger('change');\n    }\n  };\n\n  that._onTap = function (v) {\n    that._setVal(v ? 0 : 1);\n  };\n\n  that.___init = function () {\n    s = that.settings;\n    $elm = $$1(elm);\n    $parent = $elm.parent();\n    $parent.find('.mbsc-switch-track').remove();\n    $parent.prepend($elm);\n    $elm.attr('data-role', 'switch').after('<span class=\"mbsc-progress-cont mbsc-switch-track\">' + '<span class=\"mbsc-progress-track mbsc-progress-anim\">' + '<span class=\"mbsc-slider-handle-cont\">' + '<span class=\"mbsc-slider-handle mbsc-switch-handle\" data-index=\"0\">' + '<span class=\"mbsc-switch-txt-off\">' + s.offText + '</span>' + '<span class=\"mbsc-switch-txt-on\">' + s.onText + '</span>' + '</span></span></span></span>');\n\n    if (formControl) {\n      formControl.destroy();\n    }\n\n    formControl = new FormControl(elm, s);\n    that._$track = $parent.find('.mbsc-progress-track');\n    that._min = 0;\n    that._max = 1;\n    that._step = 1;\n  };\n\n  that.___destroy = function () {\n    formControl.destroy();\n  };\n\n  that.getVal = function () {\n    return elm.checked;\n  };\n\n  that.setVal = function (val, fill, change) {\n    that._setVal(val ? 1 : 0, fill, change);\n  };\n\n  that.init();\n};\n\nSwitch.prototype = {\n  _class: 'switch',\n  _css: 'mbsc-switch',\n  _hasTheme: true,\n  _hasLang: true,\n  _hasDef: true,\n  _defaults: {\n    stopProp: true,\n    offText: 'Off',\n    onText: 'On'\n  }\n};\nclasses.Switch = Switch; // Init mbsc-switch elements on page load\n\nautoInit('[mbsc-switch]', Switch); // eslint-disable-next-line no-unused-vars\n\nvar Progress = function Progress(elm, settings, inherit) {\n  var $display,\n      $elm,\n      $parent,\n      $progress,\n      $target,\n      $track,\n      min,\n      max,\n      inputStyle,\n      labelStyle,\n      s,\n      template,\n      value,\n      valueText,\n      that = this;\n\n  function onChange() {\n    var v = getAttr('value', min);\n\n    if (v !== value) {\n      updateValue(v);\n    }\n  }\n\n  function getAttr(attr, def, str) {\n    var v = $elm.attr(attr);\n    return v === undefined || v === '' ? def : str ? v : +v;\n  }\n\n  function updateValue(v, refresh, fill, change) {\n    v =\n    /* TRIALCONDREV */\n    Math.min(max, Math.max(v, min));\n    $progress.css('width', (v - min) * 100 / (max - min) + '%');\n\n    if (fill === undefined) {\n      fill = true;\n    }\n\n    if (change === undefined) {\n      change = fill;\n    }\n\n    if (v !== value || refresh) {\n      // Display value\n      that._display(v);\n    }\n\n    if (v !== value) {\n      // Set new value\n      value = v; // Put new value in the progress element\n\n      if (fill) {\n        $elm.attr('value', value);\n      } // Trigger change on the element\n\n\n      if (change) {\n        $elm.trigger('change');\n      }\n    }\n  } // Call the parent constructor\n\n\n  ProgressBase.call(this, elm, settings, true);\n\n  that._display = function (v) {\n    valueText = template && s.returnAffix ? template.replace(/\\{value\\}/, v).replace(/\\{max\\}/, max) : v;\n\n    if ($target) {\n      $target.html(valueText);\n    }\n\n    if ($display) {\n      $display.html(valueText);\n    }\n  };\n\n  that._attachChange = function () {\n    $elm.on('change', onChange);\n  };\n\n  that.__init = function () {\n    var displayValue, i, stepLabels, wasInit;\n    s = that.settings;\n    $elm = $$1(elm); // Check if the element was already initialized\n\n    wasInit = !!$parent;\n    $parent = that._$parent; // Read settings from data attributes or settings object\n\n    min = that._min = settings.min === undefined ? getAttr('min', s.min) : settings.min;\n    max = that._max = settings.max === undefined ? getAttr('max', s.max) : settings.max;\n    inputStyle = settings.inputStyle === undefined ? getAttr('data-input-style', s.inputStyle, true) : settings.inputStyle;\n    labelStyle = settings.labelStyle === undefined ? getAttr('data-label-style', s.labelStyle, true) : settings.labelStyle;\n    value = getAttr('value', min);\n    displayValue = $elm.attr('data-val') || s.val;\n    stepLabels = $elm.attr('data-step-labels');\n    stepLabels = stepLabels ? JSON.parse(stepLabels) : s.stepLabels;\n    template = $elm.attr('data-template') || (max == 100 && !s.template ? '{value}%' : s.template);\n\n    if (!wasInit) {\n      wrapLabel($parent, null, inputStyle, labelStyle, elm);\n      addIcon($elm); // Generate track and progress\n\n      $parent.find('.mbsc-input-wrap').append('<span class=\"mbsc-progress-cont\"><span class=\"mbsc-progress-track mbsc-progress-anim\"><span class=\"mbsc-progress-bar\"></span></span></span>');\n      $progress = that._$progress = $parent.find('.mbsc-progress-bar');\n      $track = that._$track = $parent.find('.mbsc-progress-track');\n    } else {\n      if (displayValue) {\n        $display.remove();\n        $parent.removeClass('mbsc-progress-value-' + (displayValue == 'right' ? 'right' : 'left'));\n      }\n\n      if (stepLabels) {\n        $$1('.mbsc-progress-step-label', $track).remove();\n      }\n    } // Set attributes\n\n\n    $elm.attr('min', min).attr('max', max); // Generate value container on left or right side\n\n    if (displayValue) {\n      $display = $$1('<span class=\"mbsc-progress-value\"></span>');\n      $parent.addClass('mbsc-progress-value-' + (displayValue == 'right' ? 'right' : 'left')).find('.mbsc-input-wrap').append($display);\n    } // Generate step labels\n\n\n    if (stepLabels) {\n      for (i = 0; i < stepLabels.length; ++i) {\n        $track.append('<span class=\"mbsc-progress-step-label\" style=\"' + (s.rtl ? 'right' : 'left') + ': ' + (stepLabels[i] - min) * 100 / (max - min) + '%\" >' + stepLabels[i] + '</span>');\n      }\n    }\n\n    $target = $$1($elm.attr('data-target') || s.target);\n  };\n\n  that.__destroy = function () {\n    $parent.removeClass('mbsc-ic-left mbsc-ic-right').find('.mbsc-progress-cont').remove();\n    $parent.find('.mbsc-input-ic').remove();\n    $elm.off('change', onChange);\n  };\n\n  that.refresh = function () {\n    updateValue(getAttr('value', min), true, false);\n  };\n\n  that.getVal = function () {\n    return value;\n  };\n\n  that.setVal = function (v, fill, change) {\n    updateValue(v, true, fill, change);\n  };\n\n  if (!inherit) {\n    that.init();\n  }\n};\n\nProgress.prototype = {\n  _class: 'progress',\n  _css: 'mbsc-progress',\n  _hasTheme: true,\n  _hasLang: true,\n  _hasDef: true,\n  _defaults: {\n    min: 0,\n    max: 100,\n    returnAffix: true\n  }\n};\nclasses.Progress = Progress; // Init mbsc-progress elements on page load\n\nautoInit('[mbsc-progress]', Progress);\n\nvar Slider = function Slider(elm, settings, inherit) {\n  var $elm,\n      $parent,\n      $progress,\n      $tooltips,\n      $track,\n      hasProgress,\n      hasTooltip,\n      isRange,\n      isRtl,\n      max,\n      min,\n      step,\n      s,\n      that = this; // Call the parent constructor\n\n  Progress.call(this, elm, settings, true);\n  var progressInit = that.__init,\n      progressDestroy = that.__destroy;\n  SliderBase.call(this, elm, settings, true);\n  var sliderInit = that.__init,\n      sliderDestroy = that.__destroy; // ---\n\n  that.__init = function () {\n    progressInit();\n    sliderInit();\n  };\n\n  that.__destroy = function () {\n    progressDestroy();\n    sliderDestroy();\n  };\n\n  that._update = function (v, value, index, percent, multiple, refresh, $handleCont) {\n    if (isRange) {\n      if (index === 0) {\n        v = Math.min(v, value[1]);\n        $progress.css({\n          width: getPercent(value[1], min, max) - getPercent(v, min, max) + '%',\n          left: isRtl ? 'auto' : getPercent(v, min, max) + '%',\n          right: isRtl ? getPercent(v, min, max) + '%' : 'auto'\n        });\n      } else {\n        v = Math.max(v, value[0]);\n        $progress.css({\n          width: getPercent(v, min, max) - getPercent(value[0], min, max) + '%'\n        });\n      }\n    } else if (multiple || !hasProgress) {\n      $handleCont.css({\n        left: isRtl ? 'auto' : (percent || getPercent(v, min, max)) + '%',\n        right: isRtl ? (percent || getPercent(v, min, max)) + '%' : 'auto'\n      });\n    } else {\n      $progress.css('width', (percent || getPercent(v, min, max)) + '%');\n    }\n\n    if (hasTooltip) {\n      $tooltips.eq(index).html(v);\n    } // Display value in the specified container(s)\n\n\n    if (!multiple && (value[index] != v || refresh)) {\n      that._display(v);\n    } // Return validated value\n\n\n    return v;\n  };\n\n  that._readValue = function ($elm) {\n    return +$elm.val();\n  };\n\n  that._fillValue = function (v, index, change) {\n    $elm.eq(index).val(v);\n\n    if (change) {\n      $elm.eq(index).trigger('change');\n    }\n  };\n\n  that._markupReady = function () {\n    var i, stepNr;\n\n    if (hasTooltip) {\n      $parent.addClass('mbsc-slider-has-tooltip');\n    } // Generate step marks\n\n\n    if (step != 1) {\n      stepNr = (max - min) / step;\n\n      for (i = 0; i <= stepNr; ++i) {\n        $track.append('<span class=\"mbsc-slider-step\" style=\"' + (isRtl ? 'right' : 'left') + ':' + 100 / stepNr * i + '%\"></span>');\n      }\n    } // Generate slider handles\n\n\n    $elm.each(function (i) {\n      if (this.type == 'range') {\n        // Set min / max / step properties for all inputs\n        $$1(this).attr('min', min).attr('max', max).attr('step', step);\n      }\n\n      (hasProgress ? $progress : $track).append('<span class=\"mbsc-slider-handle-cont' + (isRange && !i ? ' mbsc-slider-handle-left' : '') + '\">' + '<span tabindex=\"0\" class=\"mbsc-slider-handle\" aria-valuemin=\"' + min + '\" aria-valuemax=\"' + max + '\" data-index=\"' + i + '\"></span>' + (hasTooltip ? '<span class=\"mbsc-slider-tooltip\"></span>' : '') + '</span>');\n    });\n    $tooltips = $parent.find('.mbsc-slider-tooltip');\n  };\n\n  that.___init = function () {\n    if ($parent) {\n      $parent.removeClass('mbsc-slider-has-tooltip');\n\n      if (step != 1) {\n        $$1('.mbsc-slider-step', $track).remove();\n      }\n    }\n\n    $parent = that._$parent;\n    $track = that._$track;\n    $progress = that._$progress;\n    $elm = $parent.find('input');\n    s = that.settings;\n    min = that._min;\n    max = that._max;\n    that._step = step = settings.step === undefined ? +$elm.attr('step') || s.step : settings.step;\n    that._live = getBoolAttr('data-live', s.live, $elm);\n    hasTooltip = getBoolAttr('data-tooltip', s.tooltip, $elm);\n    hasProgress = getBoolAttr('data-highlight', s.highlight, $elm) && $elm.length < 3;\n    isRange = hasProgress && $elm.length == 2;\n    isRtl = s.rtl;\n\n    that._markupReady();\n  };\n\n  if (!inherit) {\n    that.init();\n  }\n};\n\nSlider.prototype = {\n  _class: 'progress',\n  _css: 'mbsc-progress mbsc-slider',\n  _hasTheme: true,\n  _hasLang: true,\n  _hasDef: true,\n  _defaults: {\n    changeEvent: 'change',\n    stopProp: true,\n    min: 0,\n    max: 100,\n    step: 1,\n    live: true,\n    highlight: true,\n    round: true,\n    returnAffix: true\n  }\n};\nclasses.Slider = Slider; // Init mbsc-slider elements on page load\n\nautoInit('[mbsc-slider]', Slider);\n\nvar Rating = function Rating(elm, settings, inherit) {\n  var $progress,\n      $track,\n      max,\n      min,\n      empty,\n      filled,\n      s,\n      that = this,\n      $elm = $$1(elm); // Call the parent constructor\n\n  Slider.call(this, elm, settings, true);\n\n  that._update = function (v, value, index, percent, multiple, refresh) {\n    $progress.css('width', getPercent(v, 0, max) + '%'); // Display value in the specified container(s)\n\n    if (!multiple && (value[index] != v || refresh)) {\n      that._display(v);\n    } // Return validated value\n\n\n    return v;\n  };\n\n  that._markupReady = function () {\n    var i,\n        emptyString = '',\n        filledString = '';\n    $track = that._$track;\n    $progress = that._$progress;\n    s = that.settings;\n    min = that._min;\n    max = that._max;\n    that._base = min;\n    that._rounding = s.rtl ? 'floor' : 'ceil';\n    empty = $elm.attr('data-empty') || s.empty;\n    filled = $elm.attr('data-filled') || s.filled;\n\n    for (i = 0; i < max; ++i) {\n      emptyString += '<span class=\"mbsc-ic mbsc-ic-' + empty + '\"></span>';\n      filledString += '<span class=\"mbsc-ic mbsc-ic-' + filled + '\"></span>';\n    }\n\n    $track.html(emptyString);\n    $track.append($progress);\n    $progress.html(filledString);\n    $track.append('<span class=\"mbsc-rating-handle-cont' + '\">' + '<span tabindex=\"0\" class=\"mbsc-slider-handle\" aria-valuemin=\"' + min + '\" aria-valuemax=\"' + max + '\" data-index=\"0\"></span>' + '</span>');\n  };\n\n  if (!inherit) {\n    that.init();\n  }\n};\n\nRating.prototype = {\n  _class: 'progress',\n  _css: 'mbsc-progress mbsc-rating',\n  _hasTheme: true,\n  _hasLang: true,\n  _hasDef: true,\n  _defaults: {\n    changeEvent: 'change',\n    stopProp: true,\n    min: 1,\n    max: 5,\n    step: 1,\n    live: true,\n    round: true,\n    hover: true,\n    highlight: true,\n    returnAffix: true,\n    empty: 'star',\n    filled: 'star3'\n  }\n};\nclasses.Rating = Rating; // Init mbsc-rating elements on page load\n\nautoInit('[mbsc-rating]', Rating);\nvar nr = 1;\n\nvar CollapsibleBase = /*#__PURE__*/function () {\n  function CollapsibleBase(elm, settings) {\n    var _this = this;\n\n    var content;\n    var $header;\n    var $content;\n    var $elm = $$1(elm);\n    this.settings = settings;\n    this._isOpen = settings.isOpen || false;\n    $elm.addClass('mbsc-collapsible ' + (this._isOpen ? 'mbsc-collapsible-open' : ''));\n\n    if ($elm.hasClass('mbsc-card')) {\n      // card enhance\n      $header = $elm.find('.mbsc-card-header').eq(0).addClass('mbsc-collapsible-header');\n      $content = $elm.find('.mbsc-card-content').eq(0).addClass('mbsc-collapsible-content');\n    } else if ($elm.hasClass('mbsc-form-group') || $elm.hasClass('mbsc-form-group-inset')) {\n      // form group enhance\n      $header = $elm.find('.mbsc-form-group-title').eq(0).addClass('mbsc-collapsible-header');\n      $content = $elm.find('.mbsc-form-group-content').eq(0).addClass('mbsc-collapsible-content');\n    } else {\n      // if it is used independently\n      $header = $elm.find('.mbsc-collapsible-header').eq(0);\n      $content = $elm.find('.mbsc-collapsible-content').eq(0);\n    }\n\n    content = $content[0];\n\n    if (content && !content.id) {\n      content.id = 'mbsc-collapsible-' + nr++;\n    }\n\n    if ($header.length && content) {\n      var $collapsibleIcon = $$1('<span class=\"mbsc-collapsible-icon mbsc-ic mbsc-ic-arrow-down5\"></span>');\n      tap(this, $header, function () {\n        _this.collapse();\n      });\n      $header.attr('role', 'button').attr('aria-expanded', this._isOpen).attr('aria-controls', content.id).attr('tabindex', '0').on('mousedown', function (ev) {\n        // prevent focus on mouse down\n        ev.preventDefault();\n      }).on('keydown', function (ev) {\n        if (ev.which === 32 || ev.keyCode == 13) {\n          //space or enter \n          ev.preventDefault();\n\n          _this.collapse();\n        }\n      }).append($collapsibleIcon);\n    }\n\n    elm.mbscInst = this;\n    this._$header = $header;\n    this._$content = $content;\n    this._$elm = $elm;\n    this._$accordionParent = $elm.parent('[mbsc-accordion], mbsc-accordion, .mbsc-accordion');\n    this.show = this.show.bind(this);\n    this.hide = this.hide.bind(this);\n    this.toggle = this.toggle.bind(this);\n  }\n\n  var _proto = CollapsibleBase.prototype;\n\n  _proto.collapse = function collapse(show) {\n    var $elm = this._$elm;\n    var $content = this._$content;\n\n    var removeHeight = function removeHeight() {\n      $content.off('transitionend', removeHeight).css('height', '');\n    };\n\n    if (show === undefined) {\n      show = !this._isOpen;\n    }\n\n    if (show && this._isOpen || !show && !this._isOpen || !$content.length) {\n      return;\n    }\n\n    if (show) {\n      if (hasTransition) {\n        $content.on('transitionend', removeHeight).css('height', $content[0].scrollHeight);\n      }\n\n      $elm.addClass('mbsc-collapsible-open');\n    } else {\n      if (hasTransition) {\n        $content.css('height', getComputedStyle($content[0]).height);\n      }\n\n      setTimeout(function () {\n        $content.css('height', 0);\n        $elm.removeClass('mbsc-collapsible-open');\n      }, 50);\n    }\n\n    if (show && this._$accordionParent) {\n      this._$accordionParent.find('.mbsc-collapsible-open').each(function () {\n        if (this !== $elm[0]) {\n          this.mbscInst.hide();\n        }\n      });\n    }\n\n    this._isOpen = show;\n\n    this._$header.attr('aria-expanded', this._isOpen);\n  };\n\n  _proto.show = function show() {\n    this.collapse(true);\n  };\n\n  _proto.hide = function hide() {\n    this.collapse(false);\n  };\n\n  _proto.toggle = function toggle() {\n    this.collapse();\n  };\n\n  _proto.destroy = function destroy() {\n    this._$elm.removeClass('mbsc-collapsible mbsc-collapsible-open');\n\n    this._$content.removeClass('mbsc-collapsible-content');\n\n    this._$header.removeClass('mbsc-collapsible-header').find('.mbsc-collapsible-icon').remove();\n  };\n\n  return CollapsibleBase;\n}();\n\nclasses.CollapsibleBase = CollapsibleBase;\nvar id$2 = 0;\n\nfunction initControls($ctx, controls, s, shallow) {\n  $$1('input,select,textarea,progress,button', $ctx).each(function () {\n    var control = this,\n        $control = $$1(control),\n        //$parent = $control.parent(),\n    type = getControlType($control); // Skip elements with data-enhance=\"false\"\n\n    if ($control.attr('data-enhance') != 'false'\n    /* TRIALCOND */\n    ) {\n      if ($control.hasClass('mbsc-control')) {\n        if (control.mbscInst) {\n          control.mbscInst.option({\n            theme: s.theme,\n            lang: s.lang,\n            rtl: s.rtl,\n            onText: s.onText,\n            offText: s.offText,\n            stopProp: s.stopProp\n          });\n        }\n      } else {\n        if (!control.id) {\n          control.id = 'mbsc-form-control-' + ++id$2;\n        }\n\n        switch (type) {\n          case 'button':\n          case 'submit':\n            controls[control.id] = new Button(control, {\n              theme: s.theme,\n              rtl: s.rtl,\n              tap: s.tap\n            });\n            break;\n\n          case 'switch':\n            controls[control.id] = new Switch(control, {\n              theme: s.theme,\n              lang: s.lang,\n              rtl: s.rtl,\n              tap: s.tap,\n              onText: s.onText,\n              offText: s.offText,\n              stopProp: s.stopProp\n            });\n            break;\n\n          case 'checkbox':\n            controls[control.id] = new CheckBox(control, {\n              tap: s.tap,\n              theme: s.theme,\n              rtl: s.rtl\n            });\n            break;\n\n          case 'range':\n            if (!$$1(control).parent().hasClass('mbsc-slider')) {\n              controls[control.id] = new Slider(control, {\n                theme: s.theme,\n                lang: s.lang,\n                rtl: s.rtl,\n                stopProp: s.stopProp,\n                labelStyle: s.labelStyle\n              });\n            }\n\n            break;\n\n          case 'rating':\n            controls[control.id] = new Rating(control, {\n              theme: s.theme,\n              lang: s.lang,\n              rtl: s.rtl,\n              stopProp: s.stopProp\n            });\n            break;\n\n          case 'progress':\n            controls[control.id] = new Progress(control, {\n              theme: s.theme,\n              lang: s.lang,\n              rtl: s.rtl,\n              labelStyle: s.labelStyle\n            });\n            break;\n\n          case 'radio':\n            controls[control.id] = new Radio(control, {\n              tap: s.tap,\n              theme: s.theme,\n              rtl: s.rtl\n            });\n            break;\n\n          case 'select':\n          case 'select-one':\n          case 'select-multiple':\n            controls[control.id] = new Select(control, {\n              tap: s.tap,\n              inputStyle: s.inputStyle,\n              labelStyle: s.labelStyle,\n              theme: s.theme,\n              rtl: s.rtl\n            });\n            break;\n\n          case 'textarea':\n            controls[control.id] = new TextArea(control, {\n              tap: s.tap,\n              inputStyle: s.inputStyle,\n              labelStyle: s.labelStyle,\n              theme: s.theme,\n              rtl: s.rtl\n            });\n            break;\n\n          case 'segmented':\n            controls[control.id] = new SegmentedItem(control, {\n              theme: s.theme,\n              rtl: s.rtl,\n              tap: s.tap,\n              inputStyle: s.inputStyle\n            });\n            break;\n\n          case 'stepper':\n            controls[control.id] = new Stepper(control, {\n              theme: s.theme,\n              rtl: s.rtl\n            });\n            break;\n\n          case 'hidden':\n            return;\n\n          default:\n            controls[control.id] = new Input(control, {\n              tap: s.tap,\n              inputStyle: s.inputStyle,\n              labelStyle: s.labelStyle,\n              theme: s.theme,\n              rtl: s.rtl\n            });\n            break;\n        }\n      }\n    }\n  });\n  $$1('[data-collapsible]:not(.mbsc-collapsible)', $ctx).each(function () {\n    var control = this,\n        $control = $$1(control),\n        isOpen = $control.attr('data-open');\n\n    if (!control.id) {\n      control.id = 'mbsc-form-control-' + ++id$2;\n    }\n\n    controls[control.id] = new CollapsibleBase(control, {\n      isOpen: isOpen !== undefined && isOpen != 'false'\n    });\n    instances[control.id] = controls[control.id];\n  }); // Set initial height for textareas\n\n  if (!shallow) {\n    sizeTextAreas();\n  }\n} // eslint-disable-next-line no-unused-vars\n\n\nvar halfBorder$1 = os == 'ios' && majorVersion > 7;\n\nvar Card = function Card(el, settings) {\n  var s,\n      collapsibleInst,\n      cssClass = '',\n      $elm = $$1(el),\n      controls = {},\n      that = this;\n\n  function touched() {\n    $elm.removeClass('mbsc-no-touch');\n  } // Call the parent constructor\n\n\n  Base.call(this, el, settings, true);\n\n  that.refresh = function (shallow) {\n    initControls($elm, controls, s, shallow);\n  };\n  /**\r\n   * Card initialization.\r\n   */\n\n\n  that._init = function () {\n    var isCollapsible = s.collapsible !== undefined || $elm.attr('data-collapsible') !== undefined;\n\n    if (!$elm.hasClass('mbsc-card')) {\n      $elm.show();\n      listen(el, 'touchstart', touched, {\n        passive: true\n      });\n    }\n\n    if (cssClass) {\n      $elm.removeClass(cssClass);\n    } // --- TRIAL SERVER CODE START ---\n\n\n    cssClass = 'mbsc-card mbsc-form mbsc-no-touch mbsc-' + s.theme + (halfBorder$1 ? ' mbsc-form-hb' : '') + (s.baseTheme ? ' mbsc-' + s.baseTheme : '') + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr'); // --- TRIAL SERVER CODE END ---\n\n    $elm.addClass(cssClass).removeClass('mbsc-cloak');\n\n    if (isCollapsible && !collapsibleInst) {\n      var isOpen = $elm.attr('data-open');\n      collapsibleInst = new CollapsibleBase(el, {\n        isOpen: isOpen !== undefined && isOpen != 'false' || s.collapsible === true\n      });\n    }\n    /* TRIAL */\n\n\n    that.refresh();\n  };\n  /**\r\n   * Destroys the mobiscroll instance.\r\n   */\n\n\n  that._destroy = function () {\n    $elm.removeClass(cssClass);\n    unlisten(el, 'touchstart', touched, {\n      passive: true\n    });\n\n    for (var id in controls) {\n      controls[id].destroy();\n    }\n\n    if (collapsibleInst) {\n      collapsibleInst.destroy();\n    }\n  };\n\n  that.toggle = function () {\n    if (collapsibleInst) {\n      collapsibleInst.toggle();\n    }\n  };\n\n  that.hide = function () {\n    if (collapsibleInst) {\n      collapsibleInst.hide();\n    }\n  };\n\n  that.show = function () {\n    if (collapsibleInst) {\n      collapsibleInst.show();\n    }\n  }; // Constructor\n\n\n  s = that.settings;\n  that.init();\n}; // Extend defaults\n\n\nCard.prototype = {\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _class: 'card',\n  _defaults: {\n    tap: hasGhostClick,\n    stopProp: true,\n    rtl: false\n  }\n};\nclasses.Card = Card; // Init mbsc-card elements on page load or when mbsc-enhance event is triggeres\n\nautoInit('[mbsc-card]', Card, true);\nvar SELECTED_CLASS = 'mbsc-selected';\nvar ACTIVE_CLASS = 'mbsc-lv-item-active';\nvar confirms,\n    halfBorder$2 = os == 'ios' && majorVersion > 7,\n    guid = 1,\n    transp = 'transparent';\n\nvar ListView = function ListView(elem, settings) {\n  var action,\n      actionWidth,\n      activeTimer,\n      animPos,\n      cancel,\n      confirmItem,\n      confirmIndex,\n      cont,\n      cont0,\n      currIndex,\n      currList,\n      currPh,\n      currParent,\n      currSiblings,\n      currStage,\n      currStageIdx,\n      debounce,\n      demoMode,\n      disabled,\n      diffX,\n      diffY,\n      dropDown,\n      dropUp,\n      dragged,\n      dummyCont,\n      endTimer,\n      endX,\n      endY,\n      event,\n      fill,\n      found,\n      groupHeader,\n      hadEnhance,\n      handlePos,\n      hasContext,\n      handleDiv,\n      hoverDir,\n      hoverItem,\n      hoverItemOpened,\n      hoverTime,\n      hoverTimeout,\n      hoverTimer,\n      htmlLeft,\n      htmlRight,\n      icon,\n      iconc,\n      stagec,\n      isClick,\n      isLoading,\n      isTouch,\n      itemw,\n      item,\n      itemHeight,\n      itemIndex,\n      itemNode,\n      itemSelector,\n      itemTop,\n      listNode,\n      listSelector,\n      loading,\n      maxDrag,\n      minDrag,\n      multic,\n      multiple,\n      nextItem,\n      nextOffset,\n      nextStage,\n      nextItems,\n      onScrollThrottle,\n      onScrollDebounce,\n      prevClick,\n      preventHover,\n      preventTimer,\n      prevItems,\n      placeholder,\n      prevItem,\n      prevOffset,\n      prevStage,\n      quickSwipe,\n      rafID,\n      rafRunning,\n      s,\n      scroll,\n      selectable,\n      simulating,\n      slideCont,\n      stageNr,\n      stages,\n      startPos,\n      startTime,\n      startX,\n      startY,\n      style,\n      swipe,\n      swipeInterval,\n      swipeTimeout,\n      tapHighlight,\n      text,\n      timer,\n      type,\n      types,\n      undoRef,\n      undoAnim,\n      wnd,\n      wnd0,\n      wndHeight,\n      wndScroll,\n      wndTop,\n      that = this,\n      e = elem,\n      elm = $$1(e),\n      transition = 0,\n      slideLevel = 0,\n      startTop = 0,\n      stageObj = {},\n      actionQueue = {},\n      treeMap = {};\n\n  function onActionStart() {\n    quickSwipe = false;\n    prevClick = false;\n    animPos = 0;\n    startPos = 0;\n    startTime = new Date();\n    itemw = currList.width();\n    currSiblings = getChildren(currList);\n    itemIndex = currSiblings.index(item);\n    itemHeight = item[0].offsetHeight;\n    startTop = item[0].offsetTop;\n    type = types[item.attr('data-type') || 'defaults'];\n    stages = type.stages;\n  }\n\n  function onStart(ev) {\n    var itm;\n    var target = closest(cont0, ev.target, '.mbsc-lv-item');\n\n    if (!target || !cont0.contains(target)) {\n      return;\n    }\n\n    if (ev.type === 'touchstart') {\n      cont.removeClass('mbsc-no-touch');\n      preventHover = true;\n      clearTimeout(preventTimer);\n    }\n\n    if (testTouch(ev, target) && !action && !transition && !confirms && !undoing\n    /* TRIALCOND */\n    ) {\n      action = true;\n      cancel = true;\n      isClick = false;\n      isTouch = ev.type === 'touchstart';\n      startX = getCoord(ev, 'X');\n      startY = getCoord(ev, 'Y');\n      diffX = 0;\n      diffY = 0;\n      item = $$1(target);\n      itm = item; // Local reference\n\n      onActionStart();\n      tapHighlight = type.actionable || item.hasClass('mbsc-lv-parent') || item.hasClass('mbsc-lv-back');\n      itemTop = item.offset().top;\n\n      if (tapHighlight) {\n        activeTimer = setTimeout(function () {\n          itm.addClass(isTouch ? ACTIVE_CLASS : '');\n          event('onItemActivate', {\n            target: itm[0],\n            domEvent: ev\n          });\n        }, 120);\n      }\n\n      if (that.sortable && !item.hasClass('mbsc-lv-back')) {\n        if (!that.sortable.group) {\n          nextItems = item.nextUntil('.mbsc-lv-gr-title').filter('.mbsc-lv-item');\n          prevItems = item.prevUntil('.mbsc-lv-gr-title').filter('.mbsc-lv-item');\n        }\n\n        minDrag = (!that.sortable.group ? prevItems.length ? prevItems.eq(-1) : item : currList.children(itemSelector).eq(0))[0].offsetTop - startTop;\n        maxDrag = (!that.sortable.group ? nextItems.length ? nextItems.eq(-1) : item : currList.children(itemSelector).eq(-1))[0].offsetTop - startTop;\n\n        if (that.sortable.handle) {\n          if ($$1(ev.target).hasClass('mbsc-lv-handle')) {\n            clearTimeout(activeTimer);\n\n            if (jsPrefix === 'Moz') {\n              // On FF we need to prevent touchstart to disable scroll\n              ev.preventDefault();\n              onSortStart();\n            } else {\n              timer = setTimeout(function () {\n                onSortStart();\n              }, 100);\n            }\n          }\n        } else {\n          timer = setTimeout(function () {\n            fill.appendTo(item);\n            fill[0].style[jsPrefix + 'Animation'] = 'mbsc-lv-fill ' + (s.sortDelay - 100) + 'ms linear';\n            clearTimeout(endTimer);\n            clearTimeout(activeTimer);\n            cancel = false;\n            timer = setTimeout(function () {\n              fill[0].style[jsPrefix + 'Animation'] = '';\n              onSortStart();\n            }, s.sortDelay - 80);\n          }, 80);\n        }\n      }\n\n      if (ev.type == 'mousedown') {\n        $$1(document).on('mousemove', onMove).on('mouseup', onEnd);\n      }\n    }\n  }\n\n  function onMove(ev) {\n    var sortChange = false,\n        dropChange = true,\n        prevPos = animPos;\n\n    if (action) {\n      endX = getCoord(ev, 'X');\n      endY = getCoord(ev, 'Y');\n      diffX = endX - startX;\n      diffY = endY - startY;\n      clearTimeout(endTimer);\n\n      if (!dragged && !swipe && !scroll && !item.hasClass('mbsc-lv-back')) {\n        if (Math.abs(diffY) > 10) {\n          // It's a scroll\n          scroll = true;\n          onEnd(extend$1({}, ev, {\n            type: ev.type == 'mousemove' ? 'mouseup' : 'touchend'\n          }));\n          clearTimeout(activeTimer);\n        } else if (Math.abs(diffX) > 7) {\n          // It's a swipe\n          onSwipeStart();\n        }\n      }\n\n      if (swipe) {\n        ev.preventDefault();\n        animPos = diffX / itemw * 100;\n        onSwipeMove(prevPos);\n      } else if (dragged) {\n        ev.preventDefault();\n        var scrolled,\n            st = wnd.scrollTop(),\n            diff = Math.max(minDrag, Math.min(diffY + wndScroll, maxDrag)),\n            top = hasContext ? itemTop - wndTop + st - wndScroll : itemTop; // Check if scroll is needed\n\n        if (wndHeight + st < top + diff + itemHeight) {\n          wnd.scrollTop(top + diff - wndHeight + itemHeight);\n          scrolled = true;\n        } else if (top + diff < st) {\n          wnd.scrollTop(top + diff);\n          scrolled = true;\n        } // Update scroll values if window was scrolled\n\n\n        if (scrolled) {\n          wndScroll += wnd.scrollTop() - st;\n        } // Check overlap with next item\n\n\n        if (nextOffset) {\n          // If subtree exists, drop element on subtree at 1/4, change sort order at 3/4 overlap\n          if (that.sortable.multiLevel && nextItem.hasClass('mbsc-lv-parent')) {\n            if (startTop + itemHeight / 4 + diff > nextOffset) {\n              sortChange = true;\n            } else if (startTop + itemHeight - itemHeight / 4 + diff > nextOffset) {\n              dropDown = nextItem.addClass('mbsc-lv-item-hl');\n              dropChange = false;\n            } // Check 1/2 overlap\n\n          } else if (startTop + itemHeight / 2 + diff > nextOffset) {\n            // If over back button, highlight to drop to parent level\n            if (nextItem.hasClass('mbsc-lv-back')) {\n              if (that.sortable.multiLevel) {\n                dropUp = nextItem.addClass('mbsc-lv-item-hl');\n                dropChange = false;\n              }\n            } else {\n              sortChange = true;\n            }\n          }\n\n          if (sortChange) {\n            placeholder.insertAfter(nextItem);\n            prevItem = nextItem;\n            nextItem = getNextPrev(nextItem, 'next');\n            prevOffset = nextOffset;\n            nextOffset = nextItem.length && nextItem[0].offsetTop;\n            currIndex++;\n          }\n        } // Check overlap with prev item\n\n\n        if (!sortChange && prevOffset) {\n          // If subtree exists, drop element on subtree at 1/3, change sort order at 2/3 overlap\n          if (that.sortable.multiLevel && prevItem.hasClass('mbsc-lv-parent')) {\n            if (startTop + itemHeight - itemHeight / 4 + diff < prevOffset) {\n              sortChange = true;\n            } else if (startTop + itemHeight / 4 + diff < prevOffset) {\n              dropDown = prevItem.addClass('mbsc-lv-item-hl');\n              dropChange = false;\n            } // Check 1/2 overlap\n\n          } else if (startTop + itemHeight / 2 + diff < prevOffset) {\n            // If over back button, highlight to drop to parent level\n            if (prevItem.hasClass('mbsc-lv-back')) {\n              if (that.sortable.multiLevel) {\n                dropUp = prevItem.addClass('mbsc-lv-item-hl');\n                dropChange = false;\n              }\n            } else {\n              sortChange = true;\n            }\n          }\n\n          if (sortChange) {\n            placeholder.insertBefore(prevItem);\n            nextItem = prevItem;\n            prevItem = getNextPrev(prevItem, 'prev');\n            nextOffset = prevOffset;\n            prevOffset = prevItem.length && prevItem[0].offsetTop + prevItem[0].offsetHeight;\n            currIndex--;\n          }\n        }\n\n        if (dropChange) {\n          if (dropDown) {\n            dropDown.removeClass('mbsc-lv-item-hl');\n            dropDown = false;\n          }\n\n          if (dropUp) {\n            dropUp.removeClass('mbsc-lv-item-hl');\n            dropUp = false;\n          }\n        }\n\n        if (sortChange) {\n          event('onSortChange', {\n            target: item[0],\n            index: currIndex\n          });\n        }\n\n        drag(item, diff);\n        event('onSort', {\n          target: item[0],\n          index: currIndex\n        });\n      } else if (Math.abs(diffX) > 5 || Math.abs(diffY) > 5) {\n        // Cancel dragstart if movement is > 5px\n        stopTimer();\n      }\n    }\n  }\n\n  function onEnd(ev) {\n    var dist,\n        map,\n        parent,\n        itm = item;\n\n    if (action) {\n      action = false;\n      stopTimer();\n\n      if (ev.type == 'mouseup') {\n        $$1(document).off('mousemove', onMove).off('mouseup', onEnd);\n      }\n\n      if (!scroll) {\n        preventTimer = setTimeout(function () {\n          preventHover = false;\n        }, 300);\n      }\n\n      if (swipe || scroll || dragged) {\n        prevClick = true;\n      }\n\n      if (swipe) {\n        onSwipeEnd();\n      } else if (dragged) {\n        // Sort end\n        parent = currList;\n\n        if (dropDown) {\n          resetItem(item.detach());\n          map = treeMap[dropDown.attr('data-ref')];\n          currIndex = getChildren(map.child).length;\n          dropDown.removeClass('mbsc-lv-item-hl');\n\n          if (s.navigateOnDrop) {\n            navigate(dropDown, function () {\n              that.add(null, item, null, null, dropDown, true);\n              scrollToItem(item);\n              onSortEnd(item, itemIndex, parent, true);\n            });\n          } else {\n            that.add(null, item, null, null, dropDown, true);\n            onSortEnd(item, itemIndex, parent, true);\n          }\n        } else if (dropUp) {\n          resetItem(item.detach());\n          map = treeMap[dropUp.attr('data-back')];\n          currIndex = getChildren(map.parent).index(map.item) + 1;\n          dropUp.removeClass('mbsc-lv-item-hl');\n\n          if (s.navigateOnDrop) {\n            navigate(dropUp, function () {\n              that.add(null, item, currIndex, null, currList, true);\n              scrollToItem(item);\n              onSortEnd(item, itemIndex, parent, true);\n            });\n          } else {\n            that.add(null, item, currIndex, null, map.parent, true);\n            onSortEnd(item, itemIndex, parent, true);\n          }\n        } else {\n          dist = placeholder[0].offsetTop - startTop; // Animate item to its place\n\n          drag(item, dist, Math.abs(dist - Math.max(minDrag, Math.min(diffY + wndScroll, maxDrag))) * 6, function () {\n            resetItem(item);\n            item.insertBefore(placeholder);\n            onSortEnd(item, itemIndex, parent, currIndex !== itemIndex);\n          });\n        }\n\n        dragged = false;\n      } else if (!scroll && Math.abs(diffX) < 5 && Math.abs(diffY) < 5) {\n        // Tap\n        isClick = true; // Trigger click and activate target, if it's a form control\n\n        if (ev.type === 'touchend' && s.tap) {\n          activateControl(ev.target, getControlType($$1(ev.target)), ev);\n        }\n      }\n\n      clearTimeout(activeTimer);\n      setTimeout(function () {\n        itm.removeClass(ACTIVE_CLASS);\n        event('onItemDeactivate', {\n          target: itm[0]\n        });\n      }, 100);\n      scroll = false;\n      currStage = null;\n    }\n  }\n\n  function onClick(ev) {\n    var isSelected, ret;\n\n    if (isClick) {\n      isSelected = item.attr('data-selected') == 'true';\n\n      if (type.tap) {\n        ret = type.tap.call(e, {\n          target: item,\n          index: itemIndex,\n          domEvent: ev\n        }, that);\n      }\n\n      if (tapHighlight && !item.hasClass(ACTIVE_CLASS)) {\n        item.addClass(isTouch ? ACTIVE_CLASS : '');\n        event('onItemActivate', {\n          target: item[0],\n          domEvent: ev\n        });\n      } // select or deselect item on tap\n\n\n      if (selectable) {\n        if (multiple) {\n          if (isSelected) {\n            deselectItem(item);\n          } else {\n            selectItem(item);\n          }\n        } else {\n          deselectItem($$1(itemSelector, cont).filter('.' + SELECTED_CLASS));\n          selectItem(item);\n        }\n      }\n\n      ret = event('onItemTap', {\n        target: item[0],\n        index: itemIndex,\n        domEvent: ev,\n        selected: isSelected\n      });\n\n      if (ret !== false) {\n        navigate(item);\n      }\n    }\n  }\n\n  function onIconStart(ev) {\n    var target = closest(cont0, ev.target, '.mbsc-lv-ic-m');\n\n    if (!target) {\n      return;\n    }\n\n    if (!demoMode) {\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n\n    startX = getCoord(ev, 'X');\n    startY = getCoord(ev, 'Y');\n  }\n\n  function onSwipeStart() {\n    swipe = valueOrFunc(type.swipe, {\n      target: item[0],\n      index: itemIndex,\n      direction: diffX > 0 ? 'right' : 'left'\n    });\n\n    if (swipe) {\n      stopTimer();\n      clearTimeout(activeTimer);\n\n      if (type.actions) {\n        // Get the width of the action menu from settings\n        // Numeric values are converted to string, because 0 is also accepted, we convert back to number at the end\n        actionWidth = getActionWidth(type, diffX); // Show action icons and set width\n\n        multic.html(type.icons).show().children().css('width', actionWidth + '%'); // Hide stage icons\n\n        iconc.hide(); // Set disabled actions\n\n        $$1('.mbsc-lv-ic-m', stagec).removeClass('mbsc-lv-ic-disabled');\n        $$1(type.leftMenu).each(disableActions);\n        $$1(type.rightMenu).each(disableActions);\n      } else {\n        iconc.show();\n        multic.hide();\n        currStageIdx = type.start;\n        currStage = stages[currStageIdx];\n        prevStage = stages[currStageIdx - 1];\n        nextStage = stages[currStageIdx + 1];\n      }\n\n      item.addClass('mbsc-lv-item-swiping').removeClass(ACTIVE_CLASS);\n      text.css('line-height', itemHeight + 'px');\n      stagec.css({\n        top: startTop,\n        height: itemHeight,\n        backgroundColor: getFirstColor(diffX)\n      }).addClass('mbsc-lv-stage-c-v').appendTo(currList.parent());\n\n      if (s.iconSlide) {\n        item.append(iconc);\n      }\n\n      event('onSlideStart', {\n        target: item[0],\n        index: itemIndex\n      });\n    }\n  }\n\n  function onSwipeMove(prevPos) {\n    var stageChanged = false;\n\n    if (!rafRunning) {\n      if (type.actions) {\n        stagec.attr('class', 'mbsc-lv-stage-c-v mbsc-lv-stage-c mbsc-lv-' + (animPos < 0 ? 'right' : 'left'));\n      } else {\n        if (prevStage && (animPos < 0 ? animPos <= prevStage.percent : animPos < currStage.percent)) {\n          currStageIdx--;\n          nextStage = currStage;\n          currStage = prevStage;\n          prevStage = stages[currStageIdx - 1];\n          stageChanged = true;\n        } else if (nextStage && (animPos < 0 ? animPos > currStage.percent : animPos >= nextStage.percent)) {\n          currStageIdx++;\n          prevStage = currStage;\n          currStage = nextStage;\n          nextStage = stages[currStageIdx + 1];\n          stageChanged = true;\n        }\n\n        if (currStage) {\n          if (stageChanged || animPos > 0 == prevPos <= 0) {\n            // Also need to update stage background if swipe direction changed\n            setStageProps(currStage, s.iconSlide);\n          }\n\n          if (stageChanged) {\n            event('onStageChange', {\n              target: item[0],\n              index: itemIndex,\n              stage: currStage\n            });\n          }\n        }\n      }\n\n      if (!simulating) {\n        rafRunning = true;\n        rafID = raf(slideMove);\n      }\n    }\n  }\n\n  function onSwipeEnd(callback) {\n    function onCloseActions(ev) {\n      var target = closest(cont0, ev.target, '.mbsc-lv-ic-m');\n\n      if (!target) {\n        ev.preventDefault();\n        slideEnd(item, true, callback);\n      }\n    }\n\n    var quickSwipeLeft,\n        quickSwipeRight,\n        timeDiff,\n        itm = item[0],\n        pending = false,\n        revert = true;\n    rafc(rafID);\n    rafRunning = false; // We need an additional call to set the position in case when\n    // requestAnimationFrame did not call it at least once\n    // E.g. in a case of a quick swipe animation frame is\n    // cancelled before the first call\n\n    if (!simulating) {\n      slideMove();\n    }\n\n    if (type.actions) {\n      if (Math.abs(animPos) > 10 && actionWidth) {\n        slide(item, animPos < 0 ? -actionWidth : actionWidth, 200);\n        pending = true;\n        confirms = true;\n        confirmItem = item;\n        confirmIndex = itemIndex;\n\n        if (itm.__mbscOff) {\n          itm.__mbscOff();\n        }\n\n        listen(document, 'touchstart', onCloseActions, {\n          passive: false\n        });\n        listen(document, 'mousedown', onCloseActions);\n\n        itm.__mbscOff = function () {\n          unlisten(document, 'touchstart', onCloseActions, {\n            passive: false\n          });\n          unlisten(document, 'mousedown', onCloseActions);\n          delete itm.__mbscOff;\n        };\n      }\n    } else if (animPos) {\n      if (s.quickSwipe && !simulating) {\n        timeDiff = new Date() - startTime;\n        quickSwipeLeft = timeDiff < 300 && diffX < -50;\n        quickSwipeRight = timeDiff < 300 && diffX > 50;\n\n        if (quickSwipeLeft) {\n          quickSwipe = true;\n          currStage = type.left;\n          setStageProps(currStage, s.iconSlide);\n        } else if (quickSwipeRight) {\n          quickSwipe = true;\n          currStage = type.right;\n          setStageProps(currStage, s.iconSlide);\n        }\n      }\n\n      if (currStage && currStage.action) {\n        disabled = valueOrFunc(currStage.disabled, {\n          target: item[0],\n          index: itemIndex\n        });\n\n        if (!disabled) {\n          pending = true;\n          confirms = simulating || valueOrFunc(currStage.confirm, {\n            target: item[0],\n            index: itemIndex\n          });\n\n          if (confirms) {\n            // Slide to text + icon width\n            slide(item, (animPos < 0 ? -1 : 1) * iconc[0].offsetWidth * 100 / itemw, 200, true); // Tap to confirm\n\n            setConfirm(currStage, item, itemIndex, false, callback);\n          } else {\n            runAction(currStage, item, itemIndex, callback);\n          }\n        }\n      }\n    }\n\n    if (!pending) {\n      slideEnd(item, revert, callback);\n    }\n\n    swipe = false;\n  }\n\n  function onSortStart() {\n    dragged = true;\n    dropDown = false;\n    dropUp = false;\n    wndScroll = 0;\n    currIndex = itemIndex;\n\n    if (s.vibrate) {\n      vibrate();\n    }\n\n    nextItem = getNextPrev(item, 'next');\n    nextOffset = nextItem.length && nextItem[0].offsetTop;\n    prevItem = getNextPrev(item, 'prev');\n    prevOffset = prevItem.length && prevItem[0].offsetTop + prevItem[0].offsetHeight;\n    placeholder.height(itemHeight).insertAfter(item); // Item is removed from original list, otherwise messes up striped layout\n\n    item.css({\n      top: startTop\n    }).addClass('mbsc-lv-item-dragging').removeClass(ACTIVE_CLASS).appendTo(dummyCont);\n    event('onSortStart', {\n      target: item[0],\n      index: currIndex\n    });\n  }\n\n  function onSortEnd(item, itemIndex, parent, update) {\n    item.removeClass('mbsc-lv-item-dragging');\n    placeholder.remove();\n    event('onSortEnd', {\n      target: item[0],\n      index: currIndex\n    });\n\n    if (s.vibrate) {\n      vibrate();\n    }\n\n    if (update) {\n      that.addUndoAction(function (next) {\n        that.move(item, itemIndex, null, next, parent, true);\n      }, true);\n      event('onSortUpdate', {\n        target: item[0],\n        index: currIndex\n      });\n    }\n  }\n\n  function onMouseLeave() {\n    if (!preventHover) {\n      clearTimeout(hoverTimer);\n\n      if (confirms) {\n        trigger(document, 'touchstart');\n      }\n\n      if (hoverItemOpened) {\n        that.close(hoverItem, hoverTime);\n        hoverItemOpened = false;\n        hoverItem = null;\n      }\n    }\n  }\n\n  function onResize() {\n    clearTimeout(debounce);\n    debounce = setTimeout(function () {\n      wndHeight = wnd0.innerHeight || wnd.innerHeight();\n      wndTop = hasContext ? wnd.offset().top : 0;\n\n      if (action) {\n        // Reposition stage background, icon and text\n        startTop = item[0].offsetTop;\n        itemHeight = item[0].offsetHeight;\n        stagec.css({\n          top: startTop,\n          height: itemHeight\n        });\n      }\n    }, 200);\n  }\n\n  function onListClick(ev) {\n    if (prevClick) {\n      ev.stopPropagation();\n      ev.preventDefault();\n      prevClick = false;\n    }\n  }\n\n  function onScrollBottom() {\n    if (!isLoading) {\n      clearTimeout(onScrollDebounce);\n      onScrollDebounce = setTimeout(function () {\n        var height = hasContext ? wnd0.getBoundingClientRect().top + wnd.innerHeight() : window.innerHeight,\n            reachedBottom = loading[0].getBoundingClientRect().top - 3 < height;\n\n        if (!isLoading && reachedBottom) {\n          event('onListEnd');\n        }\n      }, 250);\n    }\n  }\n\n  function onScroll() {\n    if (dragged || !action) {\n      var group,\n          st = wnd.scrollTop(),\n          elmTop = elm.offset().top,\n          elmHeight = elm[0].offsetHeight,\n          wndTop = hasContext ? wnd.offset().top : st;\n      $$1('.mbsc-lv-gr-title', elm).each(function (i, v) {\n        if ($$1(v).offset().top < wndTop) {\n          group = v;\n        }\n      });\n\n      if (elmTop < wndTop && elmTop + elmHeight > wndTop) {\n        groupHeader.show().empty().append($$1(group).clone());\n      } else {\n        groupHeader.hide();\n      }\n    }\n  }\n\n  function disableActions(i, v) {\n    if (valueOrFunc(v.disabled, {\n      target: item[0],\n      index: itemIndex\n    })) {\n      $$1('.mbsc-ic-' + v.icon, stagec).addClass('mbsc-lv-ic-disabled');\n    }\n  }\n\n  function runAction(stage, item, index, callback) {\n    var revert,\n        undoStage = {\n      icon: 'undo2',\n      text: s.undoText,\n      action: function action() {\n        that.undo();\n      }\n    };\n\n    if (stage.undo) {\n      that.startActionTrack(); // Add user defined undo\n\n      if ($$1.isFunction(stage.undo)) {\n        that.addUndoAction(function () {\n          stage.undo.call(e, {\n            target: item[0],\n            index: index\n          }, that);\n        });\n      } // Remember the item where the undo is displayed\n\n\n      undoRef = item.attr('data-ref');\n    }\n\n    revert = stage.action.call(e, {\n      target: item[0],\n      index: index\n    }, that);\n\n    if (stage.undo) {\n      that.endActionTrack();\n\n      if (revert !== false) {\n        slide(item, +item.attr('data-pos') < 0 ? -100 : 100, 200);\n      }\n\n      placeholder.height(itemHeight).insertAfter(item);\n      item.css('top', startTop).addClass('mbsc-lv-item-undo');\n      multic.hide();\n      iconc.show();\n      stagec.append(iconc);\n      setStageProps(undoStage);\n      setConfirm(undoStage, item, index, true, callback);\n    } else {\n      slideEnd(item, revert, callback);\n    }\n  }\n\n  function setConfirm(stage, item, index, ph, callback) {\n    function onActionCancel(ev) {\n      ev.preventDefault();\n\n      if (ph) {\n        cleanUndo(item);\n      }\n\n      slideEnd(item, true, callback);\n    }\n\n    function onActionConfirmStart(ev) {\n      ev.stopPropagation();\n      startX = getCoord(ev, 'X');\n      startY = getCoord(ev, 'Y');\n    }\n\n    function onActionConfirmEnd(ev) {\n      ev.preventDefault();\n\n      if (ev.type === 'touchend') {\n        preventClick();\n      } // If movement is less than 10px, it's a tap\n\n\n      if (Math.abs(getCoord(ev, 'X') - startX) < 10 && Math.abs(getCoord(ev, 'Y') - startY) < 10) {\n        runAction(stage, item, index, callback);\n\n        if (ph) {\n          undoAnim = null;\n          cleanUndo(item);\n        }\n      }\n    }\n\n    var startX,\n        startY,\n        itm = item[0];\n    confirms = true;\n\n    if (itm.__mbscOff) {\n      itm.__mbscOff();\n    }\n\n    listen(document, 'touchstart', onActionCancel, {\n      passive: false\n    });\n    listen(document, 'mousedown', onActionCancel);\n\n    if (!demoMode) {\n      listen(iconc[0], 'touchstart', onActionConfirmStart, {\n        passive: true\n      });\n      listen(iconc[0], 'mousedown', onActionConfirmStart);\n      listen(iconc[0], 'touchend', onActionConfirmEnd);\n      listen(iconc[0], 'mouseup', onActionConfirmEnd);\n    }\n\n    itm.__mbscOff = function () {\n      unlisten(document, 'touchstart', onActionCancel, {\n        passive: false\n      });\n      unlisten(document, 'mousedown', onActionCancel);\n      unlisten(iconc[0], 'touchstart', onActionConfirmStart, {\n        passive: true\n      });\n      unlisten(iconc[0], 'mousedown', onActionConfirmStart);\n      unlisten(iconc[0], 'touchend', onActionConfirmEnd);\n      unlisten(iconc[0], 'mouseup', onActionConfirmEnd);\n      delete itm.__mbscOff;\n    };\n  }\n\n  function slideMove() {\n    slide(item, startPos + diffX * 100 / itemw);\n    rafRunning = false;\n  }\n\n  function slideEnd(item, revert, callback) {\n    if (item[0].__mbscOff) {\n      item[0].__mbscOff();\n    }\n\n    if (revert !== false) {\n      slide(item, 0, item.attr('data-pos') !== '0' ? 200 : 0, false, function () {\n        cleanStage(item, callback);\n        resetItem(item);\n      });\n    } else {\n      cleanStage(item, callback);\n    }\n\n    confirms = false;\n  }\n\n  function slide(item, pos, time, px, callback) {\n    pos = Math.max(swipe == 'right' ? 0 : -100, Math.min(pos, swipe == 'left' ? 0 : 100));\n    style = item[0].style;\n    item.attr('data-pos', pos);\n    style[jsPrefix + 'Transform'] = 'translate3d(' + (px ? itemw * pos / 100 + 'px' : pos + '%') + ',0,0)';\n    style[jsPrefix + 'Transition'] = cssPrefix + 'transform ' + (time || 0) + 'ms';\n\n    if (callback) {\n      transition++;\n      setTimeout(function () {\n        callback();\n        transition--;\n      }, time);\n    }\n\n    animPos = pos;\n  }\n\n  function drag(item, top, time, callback) {\n    top = Math.max(minDrag, Math.min(top, maxDrag));\n    style = item[0].style;\n    style[jsPrefix + 'Transform'] = 'translate3d(0,' + top + 'px,0)';\n    style[jsPrefix + 'Transition'] = cssPrefix + 'transform ' + (time || 0) + 'ms ease-out';\n\n    if (callback) {\n      transition++;\n      setTimeout(function () {\n        callback();\n        transition--;\n      }, time);\n    }\n  }\n\n  function stopTimer() {\n    clearTimeout(timer);\n\n    if (!cancel && that.sortable) {\n      cancel = true;\n      fill.remove();\n    }\n  }\n\n  function setStageProps(stage, iconSlide) {\n    var txt = valueOrFunc(stage.text, {\n      target: item[0],\n      index: itemIndex\n    }) || '';\n\n    if (valueOrFunc(stage.disabled, {\n      target: item[0],\n      index: itemIndex\n    })) {\n      stagec.addClass('mbsc-lv-ic-disabled');\n    } else {\n      stagec.removeClass('mbsc-lv-ic-disabled');\n    }\n\n    stagec.css('background-color', stage.color || (stage.percent === 0 ? getFirstColor(animPos) : transp));\n    iconc.attr('class', 'mbsc-lv-ic-c mbsc-lv-ic-' + (iconSlide ? 'move-' : '') + (animPos < 0 ? 'right' : 'left'));\n    icon.attr('class', ' mbsc-lv-ic-s mbsc-lv-ic mbsc-ic mbsc-ic-' + (stage.icon || 'none'));\n    text.attr('class', 'mbsc-lv-ic-text' + (stage.icon ? '' : ' mbsc-lv-ic-text-only') + (txt ? '' : ' mbsc-lv-ic-only')).html(txt || '&nbsp;');\n\n    if (s.animateIcons) {\n      if (quickSwipe) {\n        icon.addClass('mbsc-lv-ic-v');\n      } else {\n        setTimeout(function () {\n          icon.addClass('mbsc-lv-ic-a');\n        }, 10);\n      }\n    }\n  }\n\n  function cleanStage(item, callback) {\n    if (!action) {\n      // Don't clean stages if another action started\n      icon.attr('class', 'mbsc-lv-ic-s mbsc-lv-ic mbsc-ic mbsc-ic-none');\n      stagec.attr('style', '').removeClass('mbsc-lv-stage-c-v');\n      text.html('');\n    }\n\n    stagec.removeClass('mbsc-lv-left mbsc-lv-right');\n\n    if (item) {\n      event('onSlideEnd', {\n        target: item[0],\n        index: itemIndex\n      });\n\n      if (callback) {\n        callback();\n      }\n    }\n  }\n\n  function cleanUndo(item) {\n    item.css('top', '').removeClass('mbsc-lv-item-undo'); // Remove placeholder\n\n    if (undoAnim) {\n      that.animate(placeholder, 'collapse', function () {\n        placeholder.remove();\n      });\n    } else {\n      placeholder.remove();\n    }\n\n    cleanStage();\n    undoRef = null;\n    undoAnim = null;\n  }\n\n  function resetItem(item) {\n    style = item[0].style;\n    style[jsPrefix + 'Transform'] = '';\n    style[jsPrefix + 'Transition'] = '';\n    style.top = '';\n    item.removeClass('mbsc-lv-item-swiping');\n  }\n\n  function valueOrFunc(val, args) {\n    return $$1.isFunction(val) ? val.call(this, args, that) : val;\n  }\n\n  function isSelectable(item) {\n    return selectable && !item.hasClass('mbsc-lv-parent') && !item.hasClass('mbsc-lv-back');\n  }\n\n  function initItem(item) {\n    var id = item.attr('data-ref'),\n        role = item.attr('data-role'),\n        type = types[item.attr('data-type') || 'defaults'],\n        selected = isSelectable(item) && item.attr('data-selected') == 'true';\n\n    if (!id) {\n      id = guid++;\n      item.attr('data-ref', id);\n    }\n\n    treeMap[id] = {\n      item: item,\n      child: item.children(listSelector),\n      parent: item.parent(),\n      ref: item.parent()[0] === e ? null : item.parent().parent().attr('data-ref')\n    };\n    item.addClass(role == 'list-divider' ? 'mbsc-lv-gr-title' : 'mbsc-lv-item' + (type.actionable ? ' mbsc-lv-item-actionable' : '') + (selected ? ' ' + SELECTED_CLASS : ''));\n    item.attr('aria-selected', selected ? 'true' : 'false'); // Add sort handle\n\n    if (that.sortable.handle && role != 'list-divider' && !item.children('.mbsc-lv-handle-c').length) {\n      item.append(handleDiv);\n    }\n\n    if (s.enhance && !item.hasClass('mbsc-lv-item-enhanced')) {\n      var itemIcon = item.attr('data-icon'),\n          itemImg = item.find('img').eq(0).addClass('mbsc-lv-img');\n\n      if (itemImg.is(':first-child')) {\n        item.addClass('mbsc-lv-img-' + (s.rtl ? 'right' : 'left'));\n      } else if (itemImg.length) {\n        item.addClass('mbsc-lv-img-' + (s.rtl ? 'left' : 'right'));\n      }\n\n      item.addClass('mbsc-lv-item-enhanced').children().each(function (i, v) {\n        v = $$1(v);\n\n        if (v.is('p, h1, h2, h3, h4, h5, h6')) {\n          v.addClass('mbsc-lv-txt');\n        }\n      });\n\n      if (itemIcon) {\n        item.addClass('mbsc-lv-item-ic-' + (item.attr('data-icon-align') || (s.rtl ? 'right' : 'left'))).append('<div class=\"mbsc-lv-item-ic mbsc-ic mbsc-ic-' + itemIcon + '\"></div>');\n      }\n    }\n    /* TRIAL */\n\n  }\n\n  function initBranch(elm) {\n    // Create map object\n    $$1(itemSelector, elm).not('.mbsc-lv-back').each(function () {\n      initItem($$1(this));\n    }); // Add extra classes and markup (arrows and back items)\n\n    $$1(listSelector, elm).not('.mbsc-lv').addClass('mbsc-lv').prepend(htmlLeft).parent().addClass('mbsc-lv-parent mbsc-lv-item-actionable').prepend(htmlRight); // Add parent reference for back buttons\n\n    $$1('.mbsc-lv-back', elm).each(function () {\n      $$1(this).attr('data-back', $$1(this).parent().parent().attr('data-ref'));\n    });\n  }\n\n  function getChildren(list) {\n    return list.children(itemSelector).not('.mbsc-lv-back').not('.mbsc-lv-removed').not('.mbsc-lv-ph');\n  }\n\n  function getItemByID(item) {\n    if (typeof item !== 'object') {\n      item = $$1(itemSelector, cont).filter('[data-id=\"' + item + '\"]');\n    }\n\n    return $$1(item);\n  }\n\n  function getItemLevel(item) {\n    var level = 0,\n        map = treeMap[item.attr('data-ref')];\n\n    while (map && map.ref) {\n      level++;\n      map = treeMap[map.ref];\n    }\n\n    return level;\n  }\n\n  function getNextPrev(item, dir) {\n    item = item[dir](); // Returns next or previous item filtering out placeholder or currently dragged element\n\n    while (item.length && (!item.hasClass('mbsc-lv-item') || item.hasClass('mbsc-lv-ph') || item.hasClass('mbsc-lv-item-dragging'))) {\n      if (!that.sortable.group && item.hasClass('mbsc-lv-gr-title')) {\n        return false;\n      }\n\n      item = item[dir]();\n    }\n\n    return item;\n  }\n\n  function getFirstColor(pos) {\n    return (pos > 0 ? type.right : type.left).color || transp;\n  }\n\n  function getNumStr(s) {\n    return isNumeric(s) ? s + '' : 0;\n  }\n\n  function getActionWidth(type, diffX) {\n    return +(diffX < 0 ? getNumStr((type.actionsWidth || 0).right) || getNumStr(type.actionsWidth) || getNumStr(s.actionsWidth.right) || getNumStr(s.actionsWidth) : getNumStr((type.actionsWidth || 0).left) || getNumStr(type.actionsWidth) || getNumStr(s.actionsWidth.left) || getNumStr(s.actionsWidth));\n  }\n\n  function scrollToItem(item, scrollToTop) {\n    if (item) {\n      var scrollTop = wnd.scrollTop(),\n          itemHeight = item.is('.mbsc-lv-item') ? item[0].offsetHeight : 0,\n          itemTop = item.offset().top + (hasContext ? scrollTop - wndTop : 0);\n\n      if (scrollToTop) {\n        if (itemTop < scrollTop || itemTop + itemHeight > scrollTop + wndHeight) {\n          wnd.scrollTop(itemTop);\n        }\n      } else {\n        if (itemTop < scrollTop) {\n          wnd.scrollTop(itemTop);\n        } else if (itemTop + itemHeight > scrollTop + wndHeight) {\n          wnd.scrollTop(Math.min(itemTop, itemTop + itemHeight - wndHeight / 2));\n        }\n      }\n    }\n  }\n\n  function drill(dir, list, item, callback, scrollToTop) {\n    var parent = list.parent(),\n        ph = list.prev();\n    callback = callback || noop;\n\n    if (ph[0] === iconc[0]) {\n      ph = iconc.prev();\n    }\n\n    if (s.rtl) {\n      dir = dir === 'l' ? 'r' : 'l';\n    }\n\n    if (currList[0] !== list[0]) {\n      event('onNavStart', {\n        level: slideLevel,\n        direction: dir,\n        list: list[0]\n      });\n      slideCont.prepend(list.addClass('mbsc-lv-v mbsc-lv-sl-new')); // If top of the list is not visible, scroll to top\n\n      scrollToItem(cont);\n      animate(slideCont, 'mbsc-lv-sl-' + dir, function () {\n        currList.removeClass('mbsc-lv-sl-curr');\n        list.removeClass('mbsc-lv-sl-new').addClass('mbsc-lv-sl-curr');\n\n        if (currPh && currPh.length) {\n          currList.removeClass('mbsc-lv-v').insertAfter(currPh);\n        } else {\n          currParent.append(currList.removeClass('mbsc-lv-v'));\n        } // Remember the previous element where we need to put back the list later\n        // We need this because some frameworks like ember js put additional elements (script tags)\n        // and appending to parent element is not ok\n\n\n        currPh = ph;\n        currParent = parent;\n        currList = list;\n        scrollToItem(item, scrollToTop);\n        callback.call(e, item);\n        event('onNavEnd', {\n          level: slideLevel,\n          direction: dir,\n          list: list[0]\n        });\n      });\n    } else {\n      scrollToItem(item, scrollToTop);\n      callback.call(e, item);\n    }\n  }\n\n  function navigate(item, callback) {\n    if (!transition) {\n      if (item.hasClass('mbsc-lv-parent')) {\n        slideLevel++;\n        drill('r', treeMap[item.attr('data-ref')].child, null, callback);\n      } else if (item.hasClass('mbsc-lv-back')) {\n        slideLevel--;\n        drill('l', treeMap[item.attr('data-back')].parent, treeMap[item.attr('data-back')].item, callback);\n      }\n    }\n  }\n\n  function animate(el, anim, callback) {\n    var timer;\n\n    function onAnimEnd() {\n      clearTimeout(timer);\n      transition--;\n      el.off(animEnd, onAnimEnd).removeClass(anim);\n      callback.call(e, el);\n    }\n\n    callback = callback || noop;\n\n    if (s.animation && anim !== 'mbsc-lv-item-none') {\n      transition++;\n      el.on(animEnd, onAnimEnd).addClass(anim); // animEnd event will not execute with some integration plugins, this is a workaround to make sure it's executed\n\n      timer = setTimeout(onAnimEnd, 250);\n    } else {\n      callback.call(e, el);\n    }\n  }\n\n  function doAction(el, action) {\n    var queue,\n        id = el.attr('data-ref');\n    queue = actionQueue[id] = actionQueue[id] || [];\n\n    if (action) {\n      queue.push(action);\n    }\n\n    if (el.attr('data-action')) {\n      return;\n    }\n\n    action = queue.shift(); // Check this for safety\n    // There was a case in angular were the data-ref attribute was lost,\n    // so the queue was empty\n\n    if (action) {\n      el.attr('data-action', 1);\n      action(function () {\n        el.removeAttr('data-action');\n\n        if (queue.length) {\n          doAction(el);\n        } else {\n          delete actionQueue[id];\n        }\n      });\n    }\n  }\n\n  function processStages(stages, dir, duplicate) {\n    var count, temp;\n\n    if (stages && stages.length) {\n      count = 100 / (stages.length + 2);\n      $$1.each(stages, function (i, stage) {\n        if (stage.key === undefined) {\n          stage.key = stageNr++;\n        }\n\n        if (stage.percent === undefined) {\n          // if no percent passed then generate to both sides\n          stage.percent = dir * count * (i + 1);\n\n          if (duplicate) {\n            temp = extend$1({}, stage);\n            temp.key = stageNr++;\n            temp.percent = -count * (i + 1);\n            stages.push(temp);\n            stageObj[temp.key] = temp;\n          }\n        }\n\n        stageObj[stage.key] = stage;\n      });\n    }\n  }\n\n  function selectItem($item) {\n    if (isSelectable($item)) {\n      $item.addClass(SELECTED_CLASS).attr('data-selected', 'true').attr('aria-selected', 'true');\n    }\n  }\n\n  function deselectItem($item) {\n    $item.removeClass(SELECTED_CLASS).removeAttr('data-selected').removeAttr('aria-selected');\n  } // Call the parent constructor\n\n\n  Base.call(this, elem, settings, true);\n  /* TRIALFUNC */\n\n  /**\r\n   * Animate a list item\r\n   */\n\n  that.animate = function (li, anim, callback) {\n    animate(li, 'mbsc-lv-item-' + anim, callback);\n  };\n  /**\r\n   * Add a new list item\r\n   */\n\n\n  that.add = function (id, markup, index, callback, p, isUndo) {\n    var backBtn,\n        length,\n        siblings,\n        sublevel,\n        map,\n        pref,\n        cssClass = '',\n        $parent = p === undefined ? elm : getItemByID(p),\n        $list = $parent,\n        $item = typeof markup !== 'object' ? $$1('<' + itemNode + ' data-ref=\"' + guid++ + '\" data-id=\"' + id + '\">' + markup + '</' + itemNode + '>') : $$1(markup),\n        item = $item[0],\n        style = item.style,\n        dir = $item.attr('data-pos') < 0 ? 'left' : 'right',\n        ref = $item.attr('data-ref');\n    callback = callback || noop;\n\n    if (!ref) {\n      ref = guid++;\n      $item.attr('data-ref', ref);\n    }\n\n    initItem($item); // Put action in undo stack\n\n    if (!isUndo) {\n      that.addUndoAction(function (next) {\n        if (sublevel) {\n          that.navigate($parent, function () {\n            $list.remove();\n            $parent.removeClass('mbsc-lv-parent').children('.mbsc-lv-arr').remove();\n            map.child = $parent.children(listSelector);\n            that.remove($item, null, next, true);\n          });\n        } else {\n          that.remove($item, null, next, true);\n        }\n      }, true);\n    }\n\n    doAction($item, function (next) {\n      resetItem($item.css('top', '').removeClass('mbsc-lv-item-undo')); // If parent is a list item, insert new element in the sublist\n\n      if ($parent.is(itemSelector)) {\n        pref = $parent.attr('data-ref'); // If there is no sublist yet, create it\n\n        if (!$parent.children(listSelector).length) {\n          sublevel = true;\n          $parent.append('<' + listNode + '></' + listNode + '>');\n        }\n      } else {\n        pref = $parent.children('.mbsc-lv-back').attr('data-back');\n      }\n\n      map = treeMap[pref];\n\n      if (map) {\n        if (!map.child.length) {\n          $parent.addClass('mbsc-lv-parent').prepend(htmlRight); // Set parent to be the sublist\n\n          $list = $parent.children(listSelector).prepend(htmlLeft).addClass('mbsc-lv');\n          map.child = $list;\n          $$1('.mbsc-lv-back', $parent).attr('data-back', pref);\n        } else {\n          $list = map.child;\n        }\n      }\n\n      treeMap[ref] = {\n        item: $item,\n        child: $item.children(listSelector),\n        parent: $list,\n        ref: pref\n      };\n      siblings = getChildren($list);\n      length = siblings.length;\n\n      if (index === undefined || index === null) {\n        index = length;\n      }\n\n      if (isUndo) {\n        cssClass = 'mbsc-lv-item-new-' + (isUndo ? dir : '');\n      }\n\n      initBranch($item.addClass(cssClass));\n\n      if (index !== false) {\n        if (!length) {\n          backBtn = $$1('.mbsc-lv-back', $list);\n\n          if (backBtn.length) {\n            $item.insertAfter(backBtn);\n          } else {\n            $list.append($item);\n          }\n        } else if (index < length) {\n          $item.insertBefore(siblings.eq(index));\n        } else {\n          $item.insertAfter(siblings.eq(length - 1));\n        }\n      }\n\n      cont.trigger('mbsc-refresh'); // If current level is visible\n\n      if (s.animateAddRemove && $list.hasClass('mbsc-lv-v')) {\n        // Don't run expand animation if add is running on the \"undo\" element\n        style.height = item.offsetHeight + 'px';\n        that.animate($item, isUndo && undoRef === ref ? 'none' : 'expand', function ($item) {\n          that.animate($item, isUndo ? 'add-' + dir : 'pop-in', function ($item) {\n            style.height = '';\n            callback.call(e, $item.removeClass(cssClass));\n            next();\n          });\n        });\n      } else {\n        callback.call(e, $item.removeClass(cssClass));\n        next();\n      }\n\n      event('onItemAdd', {\n        target: item\n      });\n    });\n  };\n  /**\r\n   * Swipe a list item programatically\r\n   */\n\n\n  that.swipe = function (li, percent, time, demo, callback) {\n    var prevPos;\n    li = getItemByID(li);\n    item = li;\n    demoMode = demo;\n    simulating = true;\n    action = true;\n    time = time === undefined ? 300 : time;\n    diffX = percent > 0 ? 1 : -1;\n    onActionStart();\n    onSwipeStart();\n    slide(li, percent, time);\n    clearTimeout(swipeTimeout);\n    clearInterval(swipeInterval);\n    swipeInterval = setInterval(function () {\n      prevPos = animPos;\n      animPos = getPosition(li) / itemw * 100;\n      onSwipeMove(prevPos);\n    }, 10);\n    swipeTimeout = setTimeout(function () {\n      clearInterval(swipeInterval);\n      prevPos = animPos;\n      animPos = percent; // We need one additional move with the final percent to get the correct stage\n\n      onSwipeMove(prevPos);\n      onSwipeEnd(callback);\n      demoMode = false;\n      simulating = false;\n      action = false;\n    }, time);\n  };\n\n  that.openStage = function (li, stage, time, demo) {\n    if (stageObj[stage]) {\n      that.swipe(li, stageObj[stage].percent, time, demo);\n    }\n  };\n\n  that.openActions = function (li, dir, time, demo) {\n    li = getItemByID(li);\n    var percent = getActionWidth(types[li.attr('data-type') || 'defaults'], dir == 'left' ? -1 : 1);\n    that.swipe(li, dir == 'left' ? -percent : percent, time, demo);\n  };\n\n  that.close = function (li, time) {\n    that.swipe(li, 0, time);\n  };\n  /**\r\n   * Remove a list item\r\n   */\n\n\n  that.remove = function (id, dir, callback, isUndo) {\n    var $item, $parent, anim, index, ref, shouldNavigate, style;\n\n    function deleteSubTree($child) {\n      if ($child) {\n        shouldNavigate = shouldNavigate || $child.hasClass('mbsc-lv-v');\n        $child.children('[data-ref]').each(function () {\n          var ref = $$1(this).attr('data-ref');\n\n          if (treeMap[ref]) {\n            deleteSubTree(treeMap[ref].child);\n            delete treeMap[ref];\n          }\n        });\n      }\n    }\n\n    callback = callback || noop;\n    $item = getItemByID(id);\n    ref = $item.attr('data-ref');\n\n    if ($item.length && treeMap[ref]) {\n      $parent = $item.parent();\n      index = getChildren($parent).index($item);\n      style = $item[0].style;\n      deleteSubTree(treeMap[ref].child);\n\n      if (shouldNavigate) {\n        anim = s.animation;\n        s.animation = false;\n        that.navigate($item);\n        s.animation = anim;\n      }\n\n      delete treeMap[ref]; // Put action in undo stack\n\n      if (!isUndo) {\n        // If undo element is removed, undo placeholder should be removed with animation\n        if ($item.attr('data-ref') === undoRef) {\n          undoAnim = true;\n        }\n\n        that.addUndoAction(function (next) {\n          that.add(null, $item, index, next, $parent, true);\n        }, true);\n      }\n\n      doAction($item, function (next) {\n        dir = dir || ($item.attr('data-pos') < 0 ? 'left' : 'right');\n\n        if (s.animateAddRemove && $parent.hasClass('mbsc-lv-v')) {\n          that.animate($item.addClass('mbsc-lv-removed'), isUndo ? 'pop-out' : 'remove-' + dir, function ($item) {\n            style.height = $item[0].offsetHeight + 'px';\n            that.animate($item, 'collapse', function ($item) {\n              style.height = '';\n              resetItem($item.removeClass('mbsc-lv-removed'));\n\n              if (callback.call(e, $item) !== false) {\n                $item.remove();\n              }\n\n              next();\n            });\n          });\n        } else {\n          if (callback.call(e, $item) !== false) {\n            $item.remove();\n          }\n\n          next();\n        }\n\n        event('onItemRemove', {\n          target: $item[0]\n        });\n      });\n    }\n  };\n  /**\r\n   * Moves an item in the list\r\n   */\n\n\n  that.move = function (li, index, dir, callback, p, isUndo) {\n    li = getItemByID(li); //if (getChildren(li.parent()).index(li) !== index) {\n\n    if (!isUndo) {\n      that.startActionTrack();\n    }\n\n    stagec.append(iconc);\n    that.remove(li, dir, null, isUndo);\n    that.add(null, li, index, callback, p, isUndo);\n\n    if (!isUndo) {\n      that.endActionTrack();\n    } //}\n\n  };\n  /**\r\n   * Navigate and scroll to the given element\r\n   */\n\n\n  that.navigate = function (item, callback) {\n    var map, level;\n    item = getItemByID(item);\n    map = treeMap[item.attr('data-ref')];\n    level = getItemLevel(item);\n\n    if (map) {\n      drill(level >= slideLevel ? 'r' : 'l', map.parent, item, callback, true);\n      slideLevel = level;\n    }\n  };\n\n  that.showLoading = function () {\n    isLoading = true;\n    loading.addClass('mbsc-show-lv-loading');\n    wnd.scrollTop(hasContext ? wnd0.scrollHeight : $$1(s.context)[0].scrollHeight);\n  };\n\n  that.hideLoading = function () {\n    loading.removeClass('mbsc-show-lv-loading'); // Needs timeout to prevent triggering \n    // the onListEnd event from the scroll listener\n\n    setTimeout(function () {\n      isLoading = false;\n    }, 100);\n  };\n\n  that.select = function (item) {\n    if (!multiple) {\n      deselectItem($$1(itemSelector, cont).filter('.' + SELECTED_CLASS));\n    }\n\n    selectItem(getItemByID(item));\n  };\n\n  that.deselect = function (item) {\n    deselectItem(getItemByID(item));\n  };\n\n  that._processSettings = function () {\n    if (elm.is('[mbsc-enhance]')) {\n      hadEnhance = true;\n      elm.removeAttr('mbsc-enhance');\n    }\n  };\n  /**\r\n   * Listview initialization.\r\n   */\n\n\n  that._init = function () {\n    var contClass,\n        headerClass,\n        sortable,\n        defSortHandle = elm.find(listSelector).length ? 'left' : 'right',\n        i = 0,\n        icons = '',\n        iconsLeft = '',\n        iconsRight = '';\n    listNode = s.listNode;\n    listSelector = s.listSelector;\n    itemNode = s.itemNode;\n    itemSelector = s.itemSelector;\n    multiple = s.select == 'multiple';\n    selectable = s.select != 'off'; // --- TRIAL SERVER CODE START ---\n\n    sortable = s.sort || s.sortable || false; // Backward compatiblity for 'group' and sortHandle settings\n    // ---\n\n    if (sortable === 'group') {\n      sortable = {\n        group: false,\n        multiLevel: true\n      };\n    }\n\n    if (sortable === true) {\n      sortable = {\n        group: true,\n        multiLevel: true,\n        handle: s.sortHandle\n      };\n    }\n\n    if (sortable && sortable.handle === undefined) {\n      sortable.handle = s.sortHandle;\n    } // ---\n\n\n    if (sortable.handle) {\n      handlePos = sortable.handle === true ? defSortHandle : sortable.handle;\n      handleDiv = '<div class=\"mbsc-lv-handle-c mbsc-lv-item-h-' + handlePos + ' mbsc-lv-handle\"><div class=\"' + s.handleClass + ' mbsc-lv-handle-bar-c mbsc-lv-handle\">' + s.handleMarkup + '</div></div>';\n    }\n\n    htmlLeft = '<' + itemNode + ' class=\"mbsc-lv-item mbsc-lv-back mbsc-lv-item-actionable\">' + s.backText + '<div class=\"mbsc-lv-arr mbsc-lv-ic mbsc-ic ' + s.leftArrowClass + '\"></div></' + itemNode + '>';\n    htmlRight = '<div class=\"mbsc-lv-arr mbsc-lv-ic mbsc-ic ' + s.rightArrowClass + '\"></div>';\n    contClass = 'mbsc-no-touch mbsc-lv-cont mbsc-lv-' + s.theme + ' mbsc-' + s.theme + (halfBorder$2 ? ' mbsc-lv-hb' : '') + (s.rtl ? ' mbsc-lv-rtl mbsc-rtl' : ' mbsc-ltr') + (s.baseTheme ? ' mbsc-lv-' + s.baseTheme + ' mbsc-' + s.baseTheme : '') + (s.animateIcons ? ' mbsc-lv-ic-anim' : '') + (s.striped ? ' mbsc-lv-alt-row' : '') + (s.fixedHeader ? ' mbsc-lv-has-fixed-header' : '') + (sortable.handle ? ' mbsc-lv-handle-' + handlePos : ''); // --- TRIAL SERVER CODE END ---\n\n    that.sortable = sortable || false;\n\n    if (!cont) {\n      // Icon menu container\n      icons += '<div class=\"mbsc-lv-multi-c\"></div>'; // Stage icons container\n\n      icons += '<div class=\"mbsc-lv-ic-c\"><div class=\"mbsc-lv-ic-s mbsc-lv-ic mbsc-ic mbsc-ic-none\"></div><div class=\"mbsc-lv-ic-text\"></div></div>'; // Add classes\n\n      elm.addClass('mbsc-lv mbsc-lv-v mbsc-lv-root').removeClass('mbsc-cloak').show();\n      stagec = $$1('<div class=\"mbsc-lv-stage-c\">' + icons + '</div>');\n      iconc = $$1('.mbsc-lv-ic-c', stagec);\n      multic = $$1('.mbsc-lv-multi-c', stagec);\n      icon = $$1('.mbsc-lv-ic-s', stagec);\n      text = $$1('.mbsc-lv-ic-text', stagec);\n      placeholder = $$1('<' + itemNode + ' class=\"mbsc-lv-item mbsc-lv-ph\"></' + itemNode + '>');\n      fill = $$1('<div class=\"mbsc-lv-fill-item\"></div>');\n      cont = $$1('<div class=\"' + contClass + '\"><' + listNode + ' class=\"mbsc-lv mbsc-lv-dummy\"></' + listNode + '><div class=\"mbsc-lv-sl-c\"></div>' + '<div class=\"mbsc-lv-loading\"><span class=\"mbsc-ic mbsc-ic-' + (s.loadingIcon || 'loop2') + '\"></span></div></div>');\n      cont0 = cont[0];\n      dummyCont = $$1('.mbsc-lv-dummy', cont);\n      loading = $$1('.mbsc-lv-loading', cont);\n      cont.insertAfter(elm);\n      onResize(); // Slide events\n\n      listen(cont0, 'mousedown', onStart);\n      listen(document, 'touchstart', onStart, {\n        passive: false\n      });\n      listen(document, 'touchmove', onMove, {\n        passive: false\n      });\n      cont.on('touchend touchcancel', '.mbsc-lv-item', onEnd).on('click', '.mbsc-lv-item', onClick); // Prevent click on swipe\n\n      listen(e, 'click', onListClick, true); // Init action icons\n      // ---\n\n      listen(cont0, 'mousedown', onIconStart);\n      listen(document, 'touchstart', onIconStart, {\n        passive: false\n      });\n      cont.on('touchend mouseup', '.mbsc-lv-ic-m', function (ev) {\n        if (!demoMode) {\n          if (ev.type === 'touchend') {\n            preventClick();\n          } // If movement is less than 10px, fire the click event handler\n\n\n          if (confirms && !$$1(this).hasClass('mbsc-lv-ic-disabled') && Math.abs(getCoord(ev, 'X') - startX) < 10 && Math.abs(getCoord(ev, 'Y') - startY) < 10) {\n            runAction((animPos < 0 ? type.rightMenu : type.leftMenu)[$$1(this).index()], confirmItem, confirmIndex);\n          }\n        }\n      }); // ---\n      // Init hierarchical navigation\n      // ---\n\n      slideCont = $$1('.mbsc-lv-sl-c', cont).append(elm.addClass('mbsc-lv-sl-curr')).attr('data-ref', guid++);\n      currList = elm;\n      currParent = cont; // ---\n    } else {\n      cont.attr('class', contClass); // reinit sort handles\n\n      $$1('.mbsc-lv-handle-c', cont).remove(); // remove to reinit list items\n\n      $$1(itemSelector, cont).not('.mbsc-lv-back').removeClass('mbsc-lv-item');\n      unlisten(wnd0, 'orientationchange', onResize);\n      unlisten(wnd0, 'resize', onResize);\n      unlisten(wnd0, 'scroll', onScrollBottom);\n      unlisten(wnd0, 'touchmove', onScrollBottom, {\n        passive: true\n      });\n\n      if (onScrollThrottle) {\n        unlisten(wnd0, 'scroll', onScrollThrottle);\n        unlisten(wnd0, 'touchmove', onScrollThrottle, {\n          passive: true\n        });\n      }\n    }\n\n    hasContext = s.context !== 'body';\n    wnd = $$1(hasContext ? s.context : window);\n    wnd0 = wnd[0]; // Recalculate sizes on resize / orientationchange\n\n    listen(wnd0, 'orientationchange', onResize);\n    listen(wnd0, 'resize', onResize);\n    listen(wnd0, 'scroll', onScrollBottom);\n    listen(wnd0, 'touchmove', onScrollBottom, {\n      passive: true\n    }); // Init stages and actions\n    // ---\n\n    stageNr = 0;\n    types = s.itemGroups || {};\n    types.defaults = {\n      swipeleft: s.swipeleft,\n      swiperight: s.swiperight,\n      stages: s.stages,\n      actions: s.actions,\n      actionsWidth: s.actionsWidth,\n      actionable: s.actionable\n    };\n    initBranch(elm);\n    $$1.each(types, function (n, v) {\n      v.swipe = v.swipe !== undefined ? v.swipe : s.swipe;\n      v.actionable = v.actionable !== undefined ? v.actionable : s.actionable;\n      v.stages = v.stages || []; // Init stages\n\n      processStages(v.stages, 1, true);\n      processStages(v.stages.left, 1);\n      processStages(v.stages.right, -1);\n\n      if (v.stages.left || v.stages.right) {\n        v.stages = [].concat(v.stages.left || [], v.stages.right || []);\n      }\n\n      found = false;\n\n      if (!v.stages.length) {\n        if (v.swipeleft) {\n          v.stages.push({\n            percent: -30,\n            action: v.swipeleft\n          });\n        }\n\n        if (v.swiperight) {\n          v.stages.push({\n            percent: 30,\n            action: v.swiperight\n          });\n        }\n      }\n\n      $$1.each(v.stages, function (i, v) {\n        // find the 0\n        if (v.percent === 0) {\n          found = true;\n          return false;\n        }\n      });\n\n      if (!found) {\n        v.stages.push({\n          percent: 0\n        });\n      }\n\n      v.stages.sort(function (a, b) {\n        return a.percent - b.percent;\n      });\n      $$1.each(v.stages, function (i, s) {\n        // find the 0\n        if (s.percent === 0) {\n          v.start = i;\n          return false;\n        }\n      });\n\n      if (found) {\n        v.left = v.right = v.stages[v.start];\n      } else {\n        v.left = v.stages[v.start - 1] || {};\n        v.right = v.stages[v.start + 1] || {};\n      } // Init actions\n\n\n      if (v.actions) {\n        v.leftMenu = v.actions.left || v.actions;\n        v.rightMenu = v.actions.right || v.leftMenu;\n        iconsLeft = '';\n        iconsRight = '';\n\n        for (i = 0; i < v.leftMenu.length; i++) {\n          iconsLeft += '<div ' + (v.leftMenu[i].color ? 'style=\"background-color: ' + v.leftMenu[i].color + '\"' : '') + ' class=\"mbsc-lv-ic-m mbsc-lv-ic mbsc-ic mbsc-ic-' + v.leftMenu[i].icon + '\">' + (v.leftMenu[i].text || '') + '</div>';\n        }\n\n        for (i = 0; i < v.rightMenu.length; ++i) {\n          iconsRight += '<div ' + (v.rightMenu[i].color ? 'style=\"background-color: ' + v.rightMenu[i].color + '\"' : '') + ' class=\"mbsc-lv-ic-m mbsc-lv-ic mbsc-ic mbsc-ic-' + v.rightMenu[i].icon + '\">' + (v.rightMenu[i].text || '') + '</div>';\n        }\n\n        if (v.actions.left) {\n          v.swipe = v.actions.right ? v.swipe : 'right';\n        }\n\n        if (v.actions.right) {\n          v.swipe = v.actions.left ? v.swipe : 'left';\n        }\n\n        v.icons = '<div class=\"mbsc-lv-multi mbsc-lv-multi-ic-left\">' + iconsLeft + '</div><div class=\"mbsc-lv-multi mbsc-lv-multi-ic-right\">' + iconsRight + '</div>';\n      }\n    }); // ---\n    // Init fixed header\n    // ---\n\n    if (s.fixedHeader) {\n      headerClass = 'mbsc-lv-fixed-header' + (hasContext ? ' mbsc-lv-fixed-header-ctx mbsc-lv-' + s.theme + ' mbsc-' + s.theme + (s.baseTheme ? ' mbsc-lv-' + s.baseTheme + ' mbsc-' + s.baseTheme : '') : '');\n\n      if (!groupHeader) {\n        groupHeader = $$1('<div class=\"' + headerClass + '\"></div>');\n      } else {\n        groupHeader.attr('class', headerClass);\n        onScroll();\n      }\n\n      if (hasContext) {\n        wnd.before(groupHeader);\n      } else {\n        cont.prepend(groupHeader);\n      }\n\n      onScrollThrottle = throttle(onScroll, 200);\n      listen(wnd0, 'scroll', onScrollThrottle);\n      listen(wnd0, 'touchmove', onScrollThrottle, {\n        passive: true\n      });\n    } // ---\n\n\n    if (s.hover) {\n      if (!hoverTime) {\n        cont.on('mouseover.mbsc-lv', '.mbsc-lv-item', function () {\n          if (!hoverItem || hoverItem[0] != this) {\n            onMouseLeave();\n            hoverItem = $$1(this);\n\n            if (types[hoverItem.attr('data-type') || 'defaults'].actions) {\n              hoverTimer = setTimeout(function () {\n                if (!preventHover) {\n                  hoverItemOpened = true;\n                  that.openActions(hoverItem, hoverDir, hoverTime, false);\n                } else {\n                  hoverItem = null;\n                }\n              }, hoverTimeout);\n            }\n          }\n        }).on('mouseleave.mbsc-lv', onMouseLeave);\n      }\n\n      hoverTime = s.hover.time || 200;\n      hoverTimeout = s.hover.timeout || 200;\n      hoverDir = s.hover.direction || s.hover || 'right';\n    }\n\n    if (hadEnhance) {\n      cont.attr('mbsc-enhance', '');\n    }\n\n    cont.trigger('mbsc-enhance', [{\n      theme: s.theme,\n      lang: s.lang\n    }]);\n  };\n  /**\r\n   * Listview destroy: removes event handlers, classes and additional markup.\r\n   */\n\n\n  that._destroy = function () {\n    var form;\n    currParent.append(currList);\n\n    if (hasContext && groupHeader) {\n      groupHeader.remove();\n    }\n\n    if (hadEnhance) {\n      elm.attr('mbsc-enhance', ''); // Destroy form instance if any\n\n      form = instances[cont0.id];\n\n      if (form) {\n        form.destroy();\n      }\n    }\n\n    unlisten(document, 'touchstart', onStart, {\n      passive: false\n    });\n    unlisten(document, 'touchstart', onIconStart, {\n      passive: false\n    });\n    unlisten(document, 'touchmove', onMove, {\n      passive: false\n    });\n    unlisten(e, 'click', onListClick, true);\n    cont.find('.mbsc-lv-txt,.mbsc-lv-img').removeClass('mbsc-lv-txt mbsc-lv-img');\n    cont.find(listSelector).removeClass('mbsc-lv mbsc-lv-v mbsc-lv-root mbsc-lv-sl-curr').find(itemSelector).removeClass('mbsc-lv-gr-title mbsc-lv-item mbsc-lv-item-enhanced mbsc-lv-parent mbsc-lv-img-left mbsc-lv-img-right mbsc-lv-item-ic-left mbsc-lv-item-ic-right').removeAttr('data-ref');\n    $$1('.mbsc-lv-back,.mbsc-lv-handle-c,.mbsc-lv-arr,.mbsc-lv-item-ic', cont).remove();\n    elm.insertAfter(cont);\n    cont.remove();\n    stagec.remove();\n    unlisten(wnd0, 'orientationchange', onResize);\n    unlisten(wnd0, 'resize', onResize);\n    unlisten(wnd0, 'scroll', onScrollBottom);\n    unlisten(wnd0, 'touchmove', onScrollBottom, {\n      passive: true\n    });\n\n    if (onScrollThrottle) {\n      unlisten(wnd0, 'scroll', onScrollThrottle);\n      unlisten(wnd0, 'touchmove', onScrollThrottle, {\n        passive: true\n      });\n    }\n  }; // Undo manager, may be removed later in separate class\n  // ---\n\n\n  var undoing,\n      undoQueue = [],\n      undoStack = [],\n      undoGroup = [],\n      undoListener = 0;\n\n  that.startActionTrack = function () {\n    // Start a new undo group if not running\n    if (!undoListener) {\n      undoGroup = [];\n    }\n\n    undoListener++;\n  };\n\n  that.endActionTrack = function () {\n    // End undo group, if this the outermost listener (undoListener counter is 0);\n    undoListener--;\n\n    if (!undoListener) {\n      undoStack.push(undoGroup);\n    }\n  };\n\n  that.addUndoAction = function (action, async) {\n    var obj = {\n      action: action,\n      async: async\n    }; //if (!undoing) {\n\n    if (undoListener) {\n      // Add undo action in current group, if a listener is running\n      undoGroup.push(obj);\n    } else {\n      // Add undo action within a new group\n      undoStack.push([obj]);\n\n      if (undoStack.length > s.undoLimit) {\n        undoStack.shift();\n      }\n    } //}\n\n  };\n\n  that.undo = function () {\n    var action, i, group;\n\n    function run() {\n      if (i < 0) {\n        undoing = false; // If there is data in the queue, keep calling the undo\n\n        undo();\n      } else {\n        action = group[i];\n        i--;\n\n        if (action.async) {\n          // Run action, next action must be called inside the action\n          action.action(run);\n        } else {\n          // Run action\n          action.action(); // Run next action\n\n          run();\n        }\n      }\n    }\n\n    function undo() {\n      group = undoQueue.shift();\n\n      if (group) {\n        undoing = true;\n        i = group.length - 1; // Call actions from the group recoursively\n\n        run();\n      }\n    }\n\n    if (undoStack.length) {\n      undoQueue.push(undoStack.pop());\n    } // If undo is currently running, don't do anything (it will be called later from queue)\n\n\n    if (!undoing) {\n      undo();\n    }\n  }; // ---\n  // Constructor\n\n\n  s = that.settings;\n  event = that.trigger;\n  that.init();\n}; // Defaults\n\n\nListView.prototype = {\n  _class: 'listview',\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _defaults: {\n    context: 'body',\n    actionsWidth: 90,\n    sortDelay: 250,\n    undoLimit: 10,\n    tap: hasGhostClick,\n    swipe: true,\n    quickSwipe: true,\n    animateAddRemove: true,\n    animateIcons: true,\n    animation: true,\n    revert: true,\n    vibrate: true,\n    actionable: true,\n    handleClass: '',\n    handleMarkup: '<div class=\"mbsc-lv-handle-bar mbsc-lv-handle\"></div><div class=\"mbsc-lv-handle-bar mbsc-lv-handle\"></div><div class=\"mbsc-lv-handle-bar mbsc-lv-handle\"></div>',\n    listNode: 'ul',\n    listSelector: 'ul,ol',\n    itemNode: 'li',\n    itemSelector: 'li',\n    leftArrowClass: 'mbsc-ic-arrow-left4',\n    rightArrowClass: 'mbsc-ic-arrow-right4',\n    backText: 'Back',\n    undoText: 'Undo',\n    stages: [],\n    select: 'off'\n  }\n};\nclasses.ListView = ListView;\nmobiscroll.themes.listview.mobiscroll = {\n  leftArrowClass: 'mbsc-ic-arrow-left5',\n  rightArrowClass: 'mbsc-ic-arrow-right5'\n};\n\nvar MbscListviewService = function () {\n  function MbscListviewService() {\n    this.addObservable = new Observable();\n    this.removeObservable = new Observable();\n    this.cardObservable = new Observable();\n    this.instanceObservable = new Observable();\n    this.inst = null;\n  }\n\n  MbscListviewService.prototype.notifyInstanceReady = function (instance) {\n    this.inst = instance;\n    this.instanceObservable.next(instance);\n  };\n\n  MbscListviewService.prototype.onInstanceReady = function () {\n    return this.instanceObservable;\n  };\n\n  MbscListviewService.prototype.notifyAdded = function (item, parent) {\n    this.addObservable.next({\n      item: item,\n      parent: parent\n    });\n  };\n\n  MbscListviewService.prototype.notifyRemoved = function (item) {\n    this.removeObservable.next(item);\n  };\n\n  MbscListviewService.prototype.notifyCardPresence = function (isCard) {\n    this.cardObservable.next(isCard);\n  };\n\n  MbscListviewService.prototype.onCardContent = function () {\n    return this.cardObservable;\n  };\n\n  MbscListviewService.prototype.onItemAdded = function () {\n    return this.addObservable;\n  };\n\n  MbscListviewService.prototype.onItemRemoved = function () {\n    return this.removeObservable;\n  };\n\n  MbscListviewService.ɵfac = function MbscListviewService_Factory(t) {\n    return new (t || MbscListviewService)();\n  };\n\n  MbscListviewService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MbscListviewService,\n    factory: function (t) {\n      return MbscListviewService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscListviewService;\n}();\n\nvar MbscSublistService = function () {\n  function MbscSublistService() {\n    this.addObservable = new Observable();\n    this.removeObserable = new Observable();\n  }\n\n  MbscSublistService.prototype.notifyAdded = function (item) {\n    this.addObservable.next(item);\n  };\n\n  MbscSublistService.prototype.notifyRemoved = function (item) {\n    this.removeObserable.next(item);\n  };\n\n  MbscSublistService.prototype.onItemAdded = function () {\n    return this.addObservable;\n  };\n\n  MbscSublistService.prototype.onItemRemoved = function () {\n    return this.removeObserable;\n  };\n\n  MbscSublistService.ɵfac = function MbscSublistService_Factory(t) {\n    return new (t || MbscSublistService)();\n  };\n\n  MbscSublistService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MbscSublistService,\n    factory: function (t) {\n      return MbscSublistService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscSublistService;\n}();\n\nvar MbscListitemService = function () {\n  function MbscListitemService() {\n    this.sublistSubject = new Observable();\n    this.inst = null;\n  }\n\n  MbscListitemService.prototype.notifySublistCreated = function (item) {\n    this.sublistSubject.next(item);\n  };\n\n  MbscListitemService.prototype.onSublistCreated = function () {\n    return this.sublistSubject;\n  };\n\n  MbscListitemService.ɵfac = function MbscListitemService_Factory(t) {\n    return new (t || MbscListitemService)();\n  };\n\n  MbscListitemService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MbscListitemService,\n    factory: function (t) {\n      return MbscListitemService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscListitemService;\n}();\n\nvar MbscListviewSublist = function () {\n  function MbscListviewSublist(parentServ, subServ, itemService) {\n    this.parentServ = parentServ;\n    this.subServ = subServ;\n    this.itemService = itemService;\n  }\n\n  MbscListviewSublist.prototype.ngOnInit = function () {\n    this.itemService.notifySublistCreated(this);\n  };\n\n  MbscListviewSublist = __decorate([__metadata(\"design:paramtypes\", [MbscListviewService, MbscSublistService, MbscListitemService])], MbscListviewSublist);\n\n  MbscListviewSublist.ɵfac = function MbscListviewSublist_Factory(t) {\n    return new (t || MbscListviewSublist)(ɵngcc0.ɵɵdirectiveInject(MbscListviewService), ɵngcc0.ɵɵdirectiveInject(MbscSublistService), ɵngcc0.ɵɵdirectiveInject(MbscListitemService));\n  };\n\n  MbscListviewSublist.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscListviewSublist,\n    selectors: [[\"mbsc-listview-sublist\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscSublistService])],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscListviewSublist_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscListviewSublist;\n}();\n\nvar MbscListviewItem = function () {\n  function MbscListviewItem(elem, lvService, lvItemService, subService) {\n    var _this = this;\n\n    this.elem = elem;\n    this.lvService = lvService;\n    this.lvItemService = lvItemService;\n    this.subService = subService;\n    this.clone = null;\n    this.mounted = false;\n    this.isParent = false;\n    this._instance = undefined;\n    this.subitemObserver = null;\n    this.selectedChange = new EventEmitter();\n    this.sublistObserver = lvItemService.onSublistCreated().subscribe(function (sublist) {\n      _this.isParent = true;\n      _this.sublist = sublist;\n      _this.subitemObserver = sublist.subServ.onItemAdded().subscribe(function (subItem) {\n        if (_this.mounted) {\n          _this.lvService.notifyAdded(subItem, _this);\n        }\n      });\n    });\n    this.instanceObserver = this.lvService.onInstanceReady().subscribe(function (instance) {\n      _this._instance = instance;\n    });\n\n    if (lvService.inst) {\n      this._instance = lvService.inst;\n    }\n  }\n\n  Object.defineProperty(MbscListviewItem.prototype, \"Index\", {\n    get: function () {\n      var thisElem = $$1(this.elem.nativeElement);\n      var index = thisElem.parent().children('mbsc-listview-item, mbsc-listview-header').not('.mbsc-lv-back').index(thisElem);\n      return index;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscListviewItem.prototype, \"Element\", {\n    get: function () {\n      return this.clone || $$1(this.elem.nativeElement);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscListviewItem.prototype.ngAfterViewInit = function () {\n    if (this.subService) {\n      this.subService.notifyAdded(this);\n    } else {\n      this.lvService.notifyAdded(this);\n    }\n\n    this.mounted = true;\n  };\n\n  MbscListviewItem.prototype.ngOnDestroy = function () {\n    this.lvItemService.onSublistCreated().unsubscribe(this.sublistObserver);\n    this.lvService.onInstanceReady().unsubscribe(this.instanceObserver);\n\n    if (this.subitemObserver !== null) {\n      this.sublist.subServ.onItemAdded().unsubscribe(this.subitemObserver);\n      this.sublist = null;\n    }\n\n    var $elm = this.Element,\n        $clone = $elm.clone();\n\n    if ($elm.parent().length) {\n      $clone.insertBefore($elm);\n      this.clone = $clone;\n    }\n\n    if (this.subService) {\n      this.subService.notifyRemoved(this);\n    } else {\n      this.lvService.notifyRemoved(this);\n    }\n  };\n\n  Object.defineProperty(MbscListviewItem.prototype, \"selected\", {\n    get: function () {\n      return this._selected;\n    },\n    set: function (v) {\n      this._selected = v;\n\n      if (this._instance) {\n        if (this._selected) {\n          this._instance.select(this.elem.nativeElement);\n        } else {\n          this._instance.deselect(this.elem.nativeElement);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscListviewItem.prototype.toggle = function () {\n    this._selected = !this._selected;\n    this.selectedChange.emit(this._selected);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscListviewItem.prototype, \"id\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscListviewItem.prototype, \"icon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscListviewItem.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscListviewItem.prototype, \"type\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], MbscListviewItem.prototype, \"selected\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListviewItem.prototype, \"selectedChange\", void 0);\n\n  MbscListviewItem = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscListviewService, MbscListitemService, MbscSublistService])], MbscListviewItem);\n\n  MbscListviewItem.ɵfac = function MbscListviewItem_Factory(t) {\n    return new (t || MbscListviewItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscListviewService), ɵngcc0.ɵɵdirectiveInject(MbscListitemService), ɵngcc0.ɵɵdirectiveInject(MbscSublistService, 8));\n  };\n\n  MbscListviewItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscListviewItem,\n    selectors: [[\"mbsc-listview-item\"]],\n    hostVars: 5,\n    hostBindings: function MbscListviewItem_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-id\", ctx.id)(\"data-icon\", ctx.icon)(\"data-icon-align\", ctx.iconAlign)(\"data-selected\", ctx.selected)(\"data-type\", ctx.type);\n      }\n    },\n    inputs: {\n      selected: \"selected\",\n      id: \"id\",\n      icon: \"icon\",\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      type: \"type\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscListitemService])],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscListviewItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscListviewItem;\n}();\n\nvar MbscListviewHeader = function (_super) {\n  __extends(MbscListviewHeader, _super);\n\n  function MbscListviewHeader(elem, lvService, itemService, subService) {\n    return _super.call(this, elem, lvService, itemService, subService) || this;\n  }\n\n  MbscListviewHeader = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscListviewService, MbscListitemService, MbscSublistService])], MbscListviewHeader);\n\n  MbscListviewHeader.ɵfac = function MbscListviewHeader_Factory(t) {\n    return new (t || MbscListviewHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscListviewService), ɵngcc0.ɵɵdirectiveInject(MbscListitemService), ɵngcc0.ɵɵdirectiveInject(MbscSublistService, 8));\n  };\n\n  MbscListviewHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscListviewHeader,\n    selectors: [[\"mbsc-listview-header\"]],\n    hostAttrs: [\"data-role\", \"list-divider\"],\n    hostVars: 1,\n    hostBindings: function MbscListviewHeader_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-id\", ctx.id);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscListitemService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscListviewHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscListviewHeader;\n}(MbscListviewItem);\n\nvar MbscListview = function (_super) {\n  __extends(MbscListview, _super);\n\n  function MbscListview(elem, zone, lvService, optionService) {\n    var _this = _super.call(this, elem, zone) || this;\n\n    _this.elem = elem;\n    _this.lvService = lvService;\n    _this.optionService = optionService;\n    _this.onItemTap = new EventEmitter();\n    _this.onItemAdd = new EventEmitter();\n    _this.onItemRemove = new EventEmitter();\n    _this.onListEnd = new EventEmitter();\n    _this.onNavEnd = new EventEmitter();\n    _this.onNavStart = new EventEmitter();\n    _this.onSlideEnd = new EventEmitter();\n    _this.onSlideStart = new EventEmitter();\n    _this.onSort = new EventEmitter();\n    _this.onSortChange = new EventEmitter();\n    _this.onSortStart = new EventEmitter();\n    _this.onSortEnd = new EventEmitter();\n    _this.onSortUpdate = new EventEmitter();\n    _this.onStageChange = new EventEmitter();\n    _this.cardContent = false;\n    _this.addObserver = lvService.onItemAdded().subscribe(function (t) {\n      var item = t.item,\n          parent = t.parent;\n\n      if (_this.instance) {\n        _this.instance.add(null, item.Element, item.Index, undefined, parent && parent.Element);\n      }\n    });\n    _this.removeObserver = lvService.onItemRemoved().subscribe(function (item) {\n      if (_this.instance) {\n        _this.instance.remove(item.Element, undefined);\n      }\n    });\n    _this.cardObserver = lvService.onCardContent().subscribe(function (isCard) {\n      _this.cardContent = isCard;\n    });\n    return _this;\n  }\n\n  MbscListview.prototype.tapHandler = function (event, inst) {\n    var selection = this.select || inst && inst.settings.select;\n\n    switch (selection) {\n      case 'multiple':\n        {\n          var item = this._getItem(event.target);\n\n          if (item && !item.isParent) {\n            item.toggle();\n          }\n\n          break;\n        }\n\n      case 'single':\n        {\n          var item = this._getItem(event.target);\n\n          if (item && !item.selected) {\n            this.items.forEach(function (item) {\n              if (item.selected) {\n                item.toggle();\n              }\n            });\n            item.toggle();\n          }\n        }\n    }\n\n    event.inst = inst;\n    this.onItemTap.emit(event);\n  };\n\n  MbscListview.prototype._getItem = function (nativeEl) {\n    return this.items.find(function (item) {\n      return item.elem.nativeElement === nativeEl;\n    });\n  };\n\n  MbscListview.prototype.initControl = function () {\n    var _this = this;\n\n    var onItemTap = this.tapHandler.bind(this);\n    var onItemTapUser = this.options && this.options.onItemTap;\n\n    if (onItemTapUser) {\n      onItemTap = function (event, inst) {\n        _this.tapHandler(event, inst);\n\n        return onItemTapUser(event, inst);\n      };\n    }\n\n    var options = extend$1({\n      listNode: 'mbsc-listview',\n      listSelector: 'mbsc-listview, mbsc-listview-sublist',\n      itemNode: 'mbsc-listview-item',\n      itemSelector: 'mbsc-listview-item, mbsc-listview-header'\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, {\n      onItemTap: onItemTap\n    });\n    this.instance = new ListView(this.elem.nativeElement, options);\n    this.lvService.notifyInstanceReady(this.instance);\n  };\n\n  MbscListview.prototype.ngOnDestroy = function () {\n    this.lvService.onCardContent().unsubscribe(this.cardObserver);\n    this.lvService.onItemAdded().unsubscribe(this.addObserver);\n    this.lvService.onItemRemoved().unsubscribe(this.removeObserver);\n\n    _super.prototype.ngOnDestroy.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscListview.prototype, \"actions\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscListview.prototype, \"actionsWidth\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscListview.prototype, \"context\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"striped\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"animateAddRemove\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"actionable\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"animateIcons\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"enhance\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"fillAnimation\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"fixedHeader\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscListview.prototype, \"hover\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"iconSlide\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscListview.prototype, \"itemGroups\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscListview.prototype, \"loadingIcon\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"navigateOnDrop\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"quickSwipe\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscListview.prototype, \"select\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscListview.prototype, \"sortable\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscListview.prototype, \"sortDelay\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscListview.prototype, \"stages\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscListview.prototype, \"swipe\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Function)], MbscListview.prototype, \"swipeleft\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Function)], MbscListview.prototype, \"swiperight\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscListview.prototype, \"vibrate\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscListview.prototype, \"undoText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscListview.prototype, \"backText\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onItemTap\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onItemAdd\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onItemRemove\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onListEnd\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onNavEnd\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onNavStart\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onSlideEnd\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onSlideStart\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onSort\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onSortChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onSortStart\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onSortEnd\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onSortUpdate\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscListview.prototype, \"onStageChange\", void 0);\n\n  __decorate([Input$1('options'), __metadata(\"design:type\", Object)], MbscListview.prototype, \"options\", void 0);\n\n  __decorate([ContentChildren(MbscListviewItem, {\n    descendants: true\n  }), __metadata(\"design:type\", QueryList)], MbscListview.prototype, \"items\", void 0);\n\n  MbscListview = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscListviewService, MbscOptionsService])], MbscListview);\n\n  MbscListview.ɵfac = function MbscListview_Factory(t) {\n    return new (t || MbscListview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscListviewService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscListview.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscListview,\n    selectors: [[\"mbsc-listview\"]],\n    contentQueries: function MbscListview_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MbscListviewItem, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    hostAttrs: [1, \"mbsc-cloak\"],\n    hostVars: 2,\n    hostBindings: function MbscListview_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mbsc-card-list\", ctx.cardContent);\n      }\n    },\n    inputs: {\n      actions: \"actions\",\n      actionsWidth: \"actionsWidth\",\n      context: \"context\",\n      striped: \"striped\",\n      animateAddRemove: \"animateAddRemove\",\n      actionable: \"actionable\",\n      animateIcons: \"animateIcons\",\n      enhance: \"enhance\",\n      fillAnimation: \"fillAnimation\",\n      fixedHeader: \"fixedHeader\",\n      hover: \"hover\",\n      iconSlide: \"iconSlide\",\n      itemGroups: \"itemGroups\",\n      loadingIcon: \"loadingIcon\",\n      navigateOnDrop: \"navigateOnDrop\",\n      quickSwipe: \"quickSwipe\",\n      select: \"select\",\n      sortable: \"sortable\",\n      sortDelay: \"sortDelay\",\n      stages: \"stages\",\n      swipe: \"swipe\",\n      swipeleft: \"swipeleft\",\n      swiperight: \"swiperight\",\n      vibrate: \"vibrate\",\n      undoText: \"undoText\",\n      backText: \"backText\",\n      options: \"options\"\n    },\n    outputs: {\n      onItemTap: \"onItemTap\",\n      onItemAdd: \"onItemAdd\",\n      onItemRemove: \"onItemRemove\",\n      onListEnd: \"onListEnd\",\n      onNavEnd: \"onNavEnd\",\n      onNavStart: \"onNavStart\",\n      onSlideEnd: \"onSlideEnd\",\n      onSlideStart: \"onSlideStart\",\n      onSort: \"onSort\",\n      onSortChange: \"onSortChange\",\n      onSortStart: \"onSortStart\",\n      onSortEnd: \"onSortEnd\",\n      onSortUpdate: \"onSortUpdate\",\n      onStageChange: \"onStageChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscListviewService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscListview_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscListview;\n}(MbscBase);\n\nvar comp = [MbscListview, MbscListviewItem, MbscListviewHeader, MbscListviewSublist];\n\nvar MbscListviewModule = function () {\n  function MbscListviewModule() {}\n\n  MbscListviewModule.ɵfac = function MbscListviewModule_Factory(t) {\n    return new (t || MbscListviewModule)();\n  };\n\n  MbscListviewModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscListviewModule\n  });\n  MbscListviewModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MbscBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscListviewModule, {\n      declarations: [MbscListview, MbscListviewItem, MbscListviewHeader, MbscListviewSublist],\n      imports: [MbscBaseModule],\n      exports: [MbscListview, MbscListviewItem, MbscListviewHeader, MbscListviewSublist]\n    });\n  })();\n\n  return MbscListviewModule;\n}();\n\nvar MbscCard = function (_super) {\n  __extends(MbscCard, _super);\n\n  function MbscCard(host, optionsService, lvService, zone) {\n    var _this = _super.call(this, host, zone) || this;\n\n    _this.optionsService = optionsService;\n    _this.lvService = lvService;\n    _this._collapsibleInput = null;\n    _this._open = false;\n\n    if (_this.lvService) {\n      _this.lvService.notifyCardPresence(true);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(MbscCard.prototype, \"collapsibleInput\", {\n    set: function (v) {\n      this._collapsibleInput = v;\n      this.inlineOptionsObj.collapsible = this._open;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscCard.prototype, \"open\", {\n    set: function (v) {\n      if (this._open != v && this.instance) {\n        if (v) {\n          this.instance.show();\n        } else {\n          this.instance.hide();\n        }\n      }\n\n      this._open = !!v;\n\n      if (this._collapsibleInput !== null) {\n        this.inlineOptionsObj.collapsible = this._open;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscCard.prototype.initControl = function () {\n    var options = extend$1({}, this.optionsService ? this.optionsService.options : {}, this.options, this.inlineOptionsObj);\n    this.instance = new Card(this.initialElem.nativeElement, options);\n  };\n\n  __decorate([Input$1('collapsible'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscCard.prototype, \"collapsibleInput\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], MbscCard.prototype, \"open\", null);\n\n  MbscCard = __decorate([__param(1, Optional()), __param(2, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscListviewService, NgZone])], MbscCard);\n\n  MbscCard.ɵfac = function MbscCard_Factory(t) {\n    return new (t || MbscCard)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscListviewService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscCard.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscCard,\n    selectors: [[\"\", \"mbsc-card\", \"\"]],\n    hostAttrs: [1, \"mbsc-cloak\"],\n    inputs: {\n      collapsibleInput: [\"collapsible\", \"collapsibleInput\"],\n      open: \"open\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCard;\n}(MbscBase);\n\nvar MbscCardComponent = function (_super) {\n  __extends(MbscCardComponent, _super);\n\n  function MbscCardComponent(host, optionsService, lvService, zone) {\n    var _this = _super.call(this, host, optionsService, lvService, zone) || this;\n\n    _this.optionsService = optionsService;\n    return _this;\n  }\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscCardComponent.prototype, \"options\", void 0);\n\n  MbscCardComponent = __decorate([__param(1, Optional()), __param(2, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscListviewService, NgZone])], MbscCardComponent);\n\n  MbscCardComponent.ɵfac = function MbscCardComponent_Factory(t) {\n    return new (t || MbscCardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscListviewService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscCardComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscCardComponent,\n    selectors: [[\"mbsc-card\"]],\n    inputs: {\n      options: \"options\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscCardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCardComponent;\n}(MbscCard);\n\nvar MbscCardHeader = function () {\n  function MbscCardHeader() {}\n\n  MbscCardHeader.ɵfac = function MbscCardHeader_Factory(t) {\n    return new (t || MbscCardHeader)();\n  };\n\n  MbscCardHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscCardHeader,\n    selectors: [[\"mbsc-card-header\"]],\n    hostAttrs: [1, \"mbsc-card-header\"],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscCardHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCardHeader;\n}();\n\nvar MbscCardContent = function () {\n  function MbscCardContent() {}\n\n  MbscCardContent.ɵfac = function MbscCardContent_Factory(t) {\n    return new (t || MbscCardContent)();\n  };\n\n  MbscCardContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscCardContent,\n    selectors: [[\"mbsc-card-content\"]],\n    hostAttrs: [1, \"mbsc-card-content\"],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscCardContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCardContent;\n}();\n\nvar MbscCardFooter = function () {\n  function MbscCardFooter() {}\n\n  MbscCardFooter.ɵfac = function MbscCardFooter_Factory(t) {\n    return new (t || MbscCardFooter)();\n  };\n\n  MbscCardFooter.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscCardFooter,\n    selectors: [[\"mbsc-card-footer\"]],\n    hostAttrs: [1, \"mbsc-card-footer\"],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscCardFooter_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCardFooter;\n}();\n\nvar MbscCardTitle = function () {\n  function MbscCardTitle() {}\n\n  MbscCardTitle.ɵfac = function MbscCardTitle_Factory(t) {\n    return new (t || MbscCardTitle)();\n  };\n\n  MbscCardTitle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscCardTitle,\n    selectors: [[\"mbsc-card-title\"]],\n    hostAttrs: [1, \"mbsc-card-title\"],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscCardTitle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCardTitle;\n}();\n\nvar MbscCardSubtitle = function () {\n  function MbscCardSubtitle() {}\n\n  MbscCardSubtitle.ɵfac = function MbscCardSubtitle_Factory(t) {\n    return new (t || MbscCardSubtitle)();\n  };\n\n  MbscCardSubtitle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscCardSubtitle,\n    selectors: [[\"mbsc-card-subtitle\"]],\n    hostAttrs: [1, \"mbsc-card-subtitle\"],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscCardSubtitle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCardSubtitle;\n}();\n\nvar comp$1 = [MbscCard, MbscCardComponent, MbscCardHeader, MbscCardContent, MbscCardFooter, MbscCardTitle, MbscCardSubtitle];\n\nvar MbscCardModule = function () {\n  function MbscCardModule() {}\n\n  MbscCardModule.ɵfac = function MbscCardModule_Factory(t) {\n    return new (t || MbscCardModule)();\n  };\n\n  MbscCardModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscCardModule\n  });\n  MbscCardModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MbscBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscCardModule, {\n      declarations: [MbscCard, MbscCardComponent, MbscCardHeader, MbscCardContent, MbscCardFooter, MbscCardTitle, MbscCardSubtitle],\n      imports: [MbscBaseModule],\n      exports: [MbscCard, MbscCardComponent, MbscCardHeader, MbscCardContent, MbscCardFooter, MbscCardTitle, MbscCardSubtitle]\n    });\n  })();\n\n  return MbscCardModule;\n}();\n/**\r\n * Convert rgb color to hex\r\n */\n\n\nfunction rgb2hex(rgb) {\n  var hex = [Math.round(rgb.r).toString(16), Math.round(rgb.g).toString(16), Math.round(rgb.b).toString(16)];\n  $$1.each(hex, function (nr, val) {\n    if (val.length == 1) {\n      hex[nr] = '0' + val;\n    }\n  });\n  return '#' + hex.join('');\n}\n/**\r\n * Convert hex color to rgb\r\n */\n\n\nfunction hex2rgb(hex) {\n  hex = parseInt(hex.indexOf('#') > -1 ? hex.substring(1) : hex, 16);\n  return {\n    r: hex >> 16,\n    g: (hex & 0x00FF00) >> 8,\n    b: hex & 0x0000FF,\n    toString: function toString() {\n      return 'rgb(' + this.r + ',' + this.g + ',' + this.b + ')';\n    }\n  };\n}\n/**\r\n * Convert hsv color to rgb\r\n */\n\n\nfunction hsv2rgb(hsv) {\n  var r,\n      g,\n      b,\n      h = hsv.h,\n      s = hsv.s * 255 / 100,\n      v = hsv.v * 255 / 100;\n\n  if (s === 0) {\n    r = g = b = v;\n  } else {\n    var t1 = v,\n        t2 = (255 - s) * v / 255,\n        t3 = (t1 - t2) * (h % 60) / 60;\n\n    if (h == 360) {\n      h = 0;\n    }\n\n    if (h < 60) {\n      r = t1;\n      b = t2;\n      g = t2 + t3;\n    } else if (h < 120) {\n      g = t1;\n      b = t2;\n      r = t1 - t3;\n    } else if (h < 180) {\n      g = t1;\n      r = t2;\n      b = t2 + t3;\n    } else if (h < 240) {\n      b = t1;\n      r = t2;\n      g = t1 - t3;\n    } else if (h < 300) {\n      b = t1;\n      g = t2;\n      r = t2 + t3;\n    } else if (h < 360) {\n      r = t1;\n      g = t2;\n      b = t1 - t3;\n    } else {\n      r = g = b = 0;\n    }\n  }\n\n  return {\n    r: r,\n    g: g,\n    b: b,\n    toString: function toString() {\n      return 'rgb(' + this.r + ',' + this.g + ',' + this.b + ')';\n    }\n  };\n}\n/**\r\n * Convert rgb color to hsv\r\n */\n\n\nfunction rgb2hsv(rgb) {\n  var h = 0,\n      s,\n      v,\n      min = Math.min(rgb.r, rgb.g, rgb.b),\n      max = Math.max(rgb.r, rgb.g, rgb.b),\n      delta = max - min;\n  v = max;\n  s = max ? 255 * delta / max : 0;\n\n  if (s) {\n    if (rgb.r == max) {\n      h = (rgb.g - rgb.b) / delta;\n    } else if (rgb.g == max) {\n      h = 2 + (rgb.b - rgb.r) / delta;\n    } else {\n      h = 4 + (rgb.r - rgb.g) / delta;\n    }\n  } else {\n    h = -1;\n  }\n\n  h *= 60;\n\n  if (h < 0) {\n    h += 360;\n  }\n\n  s *= 100 / 255;\n  v *= 100 / 255;\n  return {\n    h: h,\n    s: s,\n    v: v,\n    toString: function toString() {\n      return 'hsv(' + Math.round(this.h) + ',' + Math.round(this.s) + '%,' + Math.round(this.v) + '%)';\n    }\n  };\n}\n/**\r\n * Convert rgb color to hsl\r\n */\n\n\nfunction rgb2hsl(rgb) {\n  var r = rgb.r / 255,\n      g = rgb.g / 255,\n      b = rgb.b / 255,\n      max = Math.max(r, g, b),\n      min = Math.min(r, g, b),\n      l = (max + min) / 2,\n      h,\n      s;\n\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / d + 2;\n        break;\n\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: Math.round(h * 360),\n    s: Math.round(s * 100),\n    l: Math.round(l * 100),\n    toString: function toString() {\n      return 'hsl(' + this.h + ',' + this.s + '%,' + this.l + '%)';\n    }\n  };\n}\n/**\r\n * Convert hsl color to rgb\r\n */\n\n\nfunction hsl2rgb(hsl) {\n  var r,\n      g,\n      b,\n      m,\n      c,\n      x,\n      h = hsl.h,\n      s = hsl.s,\n      l = hsl.l;\n\n  if (!isFinite(h)) {\n    h = 0;\n  }\n\n  if (!isFinite(s)) {\n    s = 0;\n  }\n\n  if (!isFinite(l)) {\n    l = 0;\n  }\n\n  h /= 60;\n\n  if (h < 0) {\n    h = 6 - -h % 6;\n  }\n\n  h %= 6;\n  s = Math.max(0, Math.min(1, s / 100));\n  l = Math.max(0, Math.min(1, l / 100));\n  c = (1 - Math.abs(2 * l - 1)) * s;\n  x = c * (1 - Math.abs(h % 2 - 1));\n\n  if (h < 1) {\n    r = c;\n    g = x;\n    b = 0;\n  } else if (h < 2) {\n    r = x;\n    g = c;\n    b = 0;\n  } else if (h < 3) {\n    r = 0;\n    g = c;\n    b = x;\n  } else if (h < 4) {\n    r = 0;\n    g = x;\n    b = c;\n  } else if (h < 5) {\n    r = x;\n    g = 0;\n    b = c;\n  } else {\n    r = c;\n    g = 0;\n    b = x;\n  }\n\n  m = l - c / 2;\n  return {\n    r: Math.round((r + m) * 255),\n    g: Math.round((g + m) * 255),\n    b: Math.round((b + m) * 255),\n    toString: function toString() {\n      return 'rgb(' + this.r + ',' + this.g + ',' + this.b + ')';\n    }\n  };\n}\n/**\r\n * Convert hex color to hsl\r\n */\n\n\nfunction hex2hsl(hex) {\n  return rgb2hsl(hex2rgb(hex));\n}\n/**\r\n * Convert hsl color to hex\r\n */\n\n\nfunction hsl2hex(hsl) {\n  return rgb2hex(hsl2rgb(hsl));\n}\n/**\r\n * Convert hsv color to hex\r\n */\n\n\nfunction hsv2hex(hsv) {\n  return rgb2hex(hsv2rgb(hsv));\n}\n/**\r\n * Convert hex color to hsv\r\n */\n\n\nfunction hex2hsv(hex) {\n  return rgb2hsv(hex2rgb(hex));\n}\n\nvar Color = function Color(el, settings, inherit) {\n  var s,\n      def,\n      tempColors,\n      trigger,\n      scrollView,\n      previewScrollView,\n      hasClear,\n      currValue,\n      currHslValue,\n      isHorizontalScroll,\n      hasPreview,\n      sliderTrack,\n      refineMode,\n      rowItems,\n      slider,\n      colorIndex,\n      enhanceInput,\n      singleSelect,\n      maxSelect,\n      returnObj,\n      $input,\n      $colorItems,\n      $colorPreviewItems,\n      $currItem,\n      $sliderElm,\n      that = this,\n      $elm = $$1(el),\n      colorPreviewInd = 0,\n      previewValues = {},\n      tempPreviewValues = {};\n\n  function setValue(fill, change, temp) {\n    if (!temp) {\n      that._value = that._hasValue ? that._tempValue.slice(0) : null;\n\n      for (var i = 0; i < tempColors.length; ++i) {\n        if (tempColors[i].tempChangedColor && that._value && that._value.indexOf(tempColors[i].tempChangedColor) != -1) {\n          // set changed color if was set\n          tempColors[i].changedColor = tempColors[i].tempChangedColor;\n        } // else if (tempColors[i].changedColor && that._value.indexOf(tempColors[i].changedColor) == -1) { // delete changed color if was unset\n        //    delete tempColors[i].changedColor;\n        //}\n\n\n        delete tempColors[i].tempChangedColor;\n      }\n    }\n\n    if (fill) {\n      if (that._isInput) {\n        $elm.val(that._hasValue ? that._tempValue : '');\n      }\n\n      trigger('onFill', {\n        valueText: that._hasValue ? that._tempValue : '',\n        change: change\n      });\n\n      if (change) {\n        previewValues = extend$1(true, {}, tempPreviewValues);\n        that._preventChange = true;\n        $elm.trigger('change');\n      }\n\n      refreshSelectedValues(that._value, true);\n    }\n  }\n\n  function getInputColorItem(value, index) {\n    index = index !== undefined ? index : getColorIndex(value);\n    return '<div class=\"mbsc-color-input-item\" data-color=\"' + (index !== undefined ? index : value) + '\" style=\"background: ' + value + ';\">' + (singleSelect ? '' : '<div class=\"mbsc-color-input-item-close mbsc-ic mbsc-ic-material-close\"></div>') + '</div>';\n  }\n\n  function changeSliderStepsColor(color) {\n    sliderTrack[0].style.background = color ? cssPrefix + 'linear-gradient(left, ' + (s.rtl ? '#000000' : '#FFFFFF') + ' 0%, ' + color + ' 50%, ' + (s.rtl ? '#FFFFFF' : '#000000') + ' 100%)' : '';\n  }\n\n  function getColorIndex(color) {\n    if (Object.keys(tempPreviewValues).length && !isNaN(color)) {\n      return color;\n    }\n\n    for (var c in tempColors) {\n      if (color == tempColors[c].color || color == tempColors[c].changedColor) {\n        return c;\n      }\n    }\n  }\n\n  function generateInputItems() {\n    if (enhanceInput) {\n      var i,\n          inputColorItems = '';\n      $input.empty();\n\n      if (that._hasValue) {\n        if (singleSelect) {\n          inputColorItems += getInputColorItem(that._value, colorIndex);\n        } else {\n          for (i = 0; i < that._value.length; ++i) {\n            inputColorItems += getInputColorItem(that._value[i], Object.keys(tempPreviewValues).length && tempPreviewValues[i].colorIndex ? tempPreviewValues[i].colorIndex : getColorIndex(that._value[i]));\n          }\n        }\n\n        $input.append(inputColorItems);\n        that.tap($$1('.mbsc-color-input-item', $input), function (ev) {\n          if ($$1(ev.target).hasClass('mbsc-color-input-item-close')) {\n            var indx = $$1(this).index();\n            ev.stopPropagation();\n            ev.preventDefault();\n\n            if (colorIndex === undefined) {\n              colorIndex = $$1(ev.target).parent().attr('data-color');\n            }\n\n            if (hasPreview && tempColors[colorIndex]) {\n              colorPreviewInd = tempColors[colorIndex].previewInd;\n              $colorPreviewItems.eq(colorPreviewInd).parent().removeClass('mbsc-color-active');\n              previewValues[indx] = {};\n              tempPreviewValues[indx] = {};\n            }\n\n            that._value.splice(indx, 1);\n\n            that.setVal(that._value, true, true);\n          } else if (refineMode && s.display !== 'inline') {\n            colorIndex = $$1(ev.target).attr('data-color');\n\n            if (isNaN(colorIndex)) {\n              colorIndex = getColorIndex(colorIndex);\n            }\n\n            if (colorIndex && tempColors[colorIndex]) {\n              tempColors[colorIndex].selected = true;\n              colorPreviewInd = tempColors[colorIndex].previewInd; // scroll to view, if the selected color is not resent in the view\n\n              setTimeout(function () {\n                scrollView.scroll($colorItems.eq(colorIndex), 400);\n\n                if (hasPreview) {\n                  previewScrollView.scroll($colorPreviewItems.eq(colorPreviewInd), 400);\n                }\n              }, 200);\n            }\n          }\n        });\n      }\n    }\n  }\n\n  function convertToFormat(color, type) {\n    var colorHex,\n        colorValues = color.match(/\\d+/gmi);\n\n    switch (true) {\n      case color.indexOf('rgb') > -1:\n        colorHex = rgb2hex({\n          r: colorValues[0],\n          g: colorValues[1],\n          b: colorValues[2]\n        });\n        break;\n\n      case color.indexOf('hsl') > -1:\n        colorHex = hsl2hex({\n          h: colorValues[0],\n          s: colorValues[1],\n          l: colorValues[2]\n        });\n        break;\n\n      case color.indexOf('hsv') > -1:\n        colorHex = hsv2hex({\n          h: colorValues[0],\n          s: colorValues[1],\n          v: colorValues[2]\n        });\n        break;\n\n      case color.indexOf('#') > -1:\n        colorHex = color;\n        break;\n    }\n\n    return convertFromHex(colorHex, type || s.format);\n  }\n\n  function convertFromHex(color, type) {\n    switch (type) {\n      case 'rgb':\n        return hex2rgb(color);\n\n      case 'hsl':\n        return hex2hsl(color);\n\n      case 'hsv':\n        return hex2hsv(color);\n\n      default:\n        return color;\n    }\n  }\n\n  function getFirstEmptyPreviewIndex() {\n    var i;\n\n    for (i = 0; i < s.select; ++i) {\n      if (tempPreviewValues[i].colorIndex === undefined) {\n        return i;\n      }\n    }\n  }\n\n  function highlightActiveColor($color, ctx) {\n    $$1('.mbsc-color-active', ctx).removeClass('mbsc-color-active');\n\n    if (refineMode) {\n      $color.parent().addClass('mbsc-color-active');\n\n      if (hasPreview && $color) {\n        if (colorPreviewInd !== undefined) {\n          $colorPreviewItems.eq(colorPreviewInd).parent().addClass('mbsc-color-active');\n        }\n      }\n    }\n  }\n\n  function refreshSelectedValues(newtempColors, updateInput) {\n    var i,\n        temp,\n        indexes = [],\n        prevInd = 0,\n        colorValues = $$1.map(tempColors, function (v) {\n      return v.changedColor || v.color;\n    }); // check the indexes in the tempColors\n\n    if (singleSelect) {\n      newtempColors = $$1.isArray(newtempColors) ? newtempColors[0] : newtempColors;\n      temp = colorValues.indexOf(newtempColors);\n\n      if (temp > -1) {\n        indexes.push(temp);\n      }\n\n      if (newtempColors && !indexes.length && refineMode) {\n        var inputIndex = +$$1('.mbsc-color-input-item', $input).attr('data-color');\n\n        if (isNaN(inputIndex)) {\n          inputIndex = undefined;\n        } else {\n          indexes.push(inputIndex);\n        }\n\n        colorIndex = inputIndex;\n      }\n    } else if (newtempColors) {\n      if (hasPreview && refineMode) {\n        for (var c in previewValues) {\n          if (previewValues[c].colorIndex !== undefined) {\n            indexes.push(+previewValues[c].colorIndex);\n          }\n        }\n      } else {\n        for (i = 0; i < newtempColors.length; ++i) {\n          temp = colorValues.indexOf(newtempColors[i]);\n\n          if (temp > -1) {\n            indexes.push(temp);\n            colorValues[temp] = 'temp' + i;\n          }\n        }\n      }\n    } // loop trough new color indexes and check the colors\n\n\n    for (i = 0; i < indexes.length; ++i) {\n      if (tempColors[indexes[i]]) {\n        toggleColor(true, indexes[i], prevInd++, tempColors[indexes[i]].changedColor || tempColors[indexes[i]].color, true);\n      }\n    } // loop trough other color indexes and uncheck the colors\n\n\n    for (i = 0; i < tempColors.length; ++i) {\n      if (indexes.indexOf(i) == -1) {\n        toggleColor(false, i, undefined, tempColors[i].changedColor || tempColors[i].color, false);\n      }\n    } // generate new preview object\n\n\n    if (hasPreview) {\n      for (i = prevInd; i < s.select; ++i) {\n        tempPreviewValues[i] = {};\n\n        if ($colorPreviewItems) {\n          $colorPreviewItems.eq(i).addClass('mbsc-color-preview-item-empty').css({\n            background: 'transparent'\n          });\n        }\n      }\n    }\n\n    previewValues = extend$1(true, {}, tempPreviewValues);\n\n    if (updateInput !== false) {\n      generateInputItems();\n    }\n  }\n\n  function toggleColor(add, colorIndex, colorPreviewInd, currValue, updatePreview, updateValue) {\n    if (hasPreview && updatePreview) {\n      tempPreviewValues[colorPreviewInd].colorIndex = add ? colorIndex : undefined;\n      tempPreviewValues[colorPreviewInd].color = add ? currValue : undefined;\n\n      if ($colorPreviewItems) {\n        var colorPrevItem = $colorPreviewItems.eq(colorPreviewInd);\n        colorPrevItem.removeClass('mbsc-color-preview-item-empty').css({\n          background: add ? currValue : 'transparent'\n        });\n\n        if (!add) {\n          colorPrevItem.addClass('mbsc-color-preview-item-empty').parent().removeClass('mbsc-color-active');\n        }\n      }\n    }\n\n    if (updateValue) {\n      if (add) {\n        that._tempValue.splice(colorPreviewInd, 0, currValue);\n      } else {\n        that._tempValue.splice(that._tempValue.indexOf(currValue), 1);\n      }\n    }\n\n    if ($colorItems) {\n      if (add) {\n        $colorItems.eq(colorIndex).addClass('mbsc-color-selected');\n      } else {\n        $colorItems.eq(colorIndex).removeClass('mbsc-color-selected').parent().removeClass('mbsc-color-active');\n      }\n    }\n\n    tempColors[colorIndex].previewInd = add ? colorPreviewInd : undefined;\n    tempColors[colorIndex].selected = add;\n  }\n\n  function setDefaultValues(colorInd, ctx) {\n    if (colorInd !== undefined && (singleSelect || tempColors[colorInd] && tempColors[colorInd].selected)) {\n      colorIndex = colorInd;\n\n      if (tempColors[colorInd]) {\n        currValue = tempColors[colorInd].changedColor || tempColors[colorInd].color;\n        $currItem = $colorItems.eq(colorInd); // refresh slider tempColors\n\n        if (refineMode) {\n          highlightActiveColor($colorItems.eq(colorInd), ctx || '');\n          currHslValue = convertToFormat(tempColors[colorInd].color, 'hsl');\n          currHslValue.l = convertToFormat(currValue, 'hsl').l;\n          changeSliderStepsColor(tempColors[colorInd].color);\n          slider.setVal(100 - currHslValue.l, false, false);\n        }\n      }\n    } else if (refineMode) {\n      changeSliderStepsColor();\n    }\n  }\n\n  function getColorObjects() {\n    var i,\n        arr = [];\n\n    for (i = 0; i < tempColors.length; ++i) {\n      if (tempColors[i].selected) {\n        arr.push(tempColors[i]);\n      }\n    }\n\n    return arr;\n  }\n\n  function colorPreviewTap(ev, $m) {\n    var index = $$1(ev.target).index();\n    colorIndex = tempPreviewValues[index].colorIndex;\n    $currItem = $colorItems.eq(colorIndex); // refresh values\n\n    colorPreviewInd = index;\n    setDefaultValues(colorIndex, $m);\n    scrollView.scroll($currItem, 250);\n    trigger('onPreviewItemTap', {\n      target: ev.target,\n      value: tempPreviewValues[index].color,\n      index: index\n    });\n  }\n\n  function colorTap(ev, $m) {\n    var hasSelect = false,\n        $selectedtempColors = $$1('.mbsc-color-selected', $m);\n    $currItem = $$1(ev.target);\n\n    if ($currItem.hasClass('mbsc-color-clear-item')) {\n      currValue = '';\n      that.clear();\n      return;\n    }\n\n    if (singleSelect || maxSelect > +$selectedtempColors.length || $currItem.hasClass('mbsc-color-selected'))\n      /* TRIALCOND */\n      {\n        colorIndex = $currItem.attr('data-index');\n\n        if (hasPreview) {\n          colorPreviewInd = tempColors[colorIndex].previewInd !== undefined ? tempColors[colorIndex].previewInd : getFirstEmptyPreviewIndex();\n          hasSelect = refineMode && $currItem.hasClass('mbsc-color-selected') && !$currItem.parent().hasClass('mbsc-color-active'); // scroll to the preview color\n\n          if ($colorPreviewItems.length > 6) {\n            previewScrollView.scroll($colorPreviewItems.eq(colorPreviewInd));\n          }\n        }\n\n        currValue = tempColors[colorIndex].changedColor || tempColors[colorIndex].color;\n\n        if (singleSelect) {\n          $selectedtempColors.removeClass('mbsc-color-selected');\n          that._tempValue = currValue;\n\n          if (currValue) {\n            $currItem.toggleClass('mbsc-color-selected');\n          }\n\n          highlightActiveColor($currItem, $m);\n        } else {\n          highlightActiveColor($currItem, $m);\n\n          if (!hasSelect) {\n            toggleColor(!tempColors[colorIndex].selected, colorIndex, colorPreviewInd, currValue, true, true);\n          }\n        }\n\n        setDefaultValues(colorIndex, $m);\n\n        if (that.live) {\n          that._fillValue();\n\n          trigger('onSet', {\n            value: that._value\n          });\n        }\n\n        trigger('onItemTap', {\n          target: ev.target,\n          value: currValue,\n          selected: tempColors[colorIndex].selected,\n          index: colorIndex\n        });\n\n        that._updateHeader();\n      }\n  } // Call the parent constructor\n\n\n  Frame.call(this, el, settings, true); // Public functions\n\n  /* TRIALFUNC */\n\n  /**\r\n   * Sets the value\r\n   */\n\n  that.setVal = that._setVal = function (val, fill, change, temp) {\n    that._hasValue = val !== null && val !== undefined;\n    that._tempValue = singleSelect ? $$1.isArray(val) ? val[0] : val : $$1.isArray(val) ? val : val ? [val] : [];\n    setValue(fill, change === undefined ? fill : change, temp);\n  };\n  /**\r\n   * Returns the selected value\r\n   */\n\n\n  that.getVal = that._getVal = function (temp) {\n    return that._hasValue || temp ? returnObj ? getColorObjects() : that[temp ? '_tempValue' : '_value'] : null;\n  };\n\n  that._readValue = function () {\n    var v = $elm.val() || '';\n    that._hasValue = false;\n\n    if (v.length !== 0 && v !== '') {\n      that._hasValue = true;\n    }\n\n    if (that._hasValue) {\n      that._tempValue = singleSelect ? v : s.format == 'hex' ? v.split(',') : v.match(/[a-z]{3}\\((\\d+\\.?\\d{0,}?),\\s*([\\d.]+)%{0,},\\s*([\\d.]+)%{0,}\\)/gmi);\n      setValue(true);\n    } else {\n      that._tempValue = [];\n    }\n\n    refreshSelectedValues(that._tempValue, that._hasValue);\n  };\n\n  that._fillValue = function () {\n    that._hasValue = true;\n    setValue(true, true);\n  };\n\n  that._generateContent = function () {\n    var i,\n        html,\n        currColor,\n        colorOffset = hasClear ? 1 : 0;\n    rowItems = isHorizontalScroll ? Math.ceil((tempColors.length + colorOffset) / s.rows) : s.rows; // generate color content\n\n    html = '<div class=\"mbsc-color-scroll-cont mbsc-w-p ' + (isHorizontalScroll ? '' : 'mbsc-color-vertical') + '\"><div class=\"mbsc-color-cont\">' + (isHorizontalScroll ? '<div class=\"mbsc-color-row\">' : '');\n\n    for (i = 0; i < tempColors.length; ++i) {\n      currColor = tempColors[i].changedColor || tempColors[i].color;\n\n      if (hasClear && i === 0) {\n        html += '<div class=\"mbsc-color-item-c\"><div tabindex=\"0\" class=\"mbsc-color-clear-item mbsc-btn-e mbsc-color-selected\"><div class=\"mbsc-color-clear-cross\"></div></div></div>';\n      }\n\n      if (i !== 0 && (i + colorOffset) % rowItems === 0) {\n        html += isHorizontalScroll ? '</div><div class=\"mbsc-color-row\">' : '';\n      }\n\n      html += '<div class=\"mbsc-color-item-c\"><div tabindex=\"0\" data-index=\"' + i + '\" class=\"mbsc-color-item mbsc-btn-e mbsc-ic mbsc-ic-material-check mbsc-color-btn-e ' + (tempColors[i].selected ? 'mbsc-color-selected' : '') + '\"  style=\"background:' + currColor + '\"></div>'\n      /* TRIAL */\n      + '</div>';\n    }\n\n    html += '</div></div>' + (isHorizontalScroll ? '</div>' : '');\n\n    if (refineMode) {\n      // add refine slider \n      html += '<div class=\"mbsc-color-slider-cont\"><input class=\"mbsc-color-slider\" type=\"range\" data-highlight=\"false\" value=\"50\" min=\"0\" max=\"100\"/></div>';\n    } // add preview container \n\n\n    if (hasPreview) {\n      html += '<div class=\"mbsc-color-preview-cont\"><div class=\"mbsc-color-refine-preview\">';\n\n      for (var c in previewValues) {\n        html += '<div class=\"mbsc-color-preview-item-c mbsc-btn-e mbsc-color-btn-e\" tabindex=\"0\"><div class=\"mbsc-color-preview-item ' + (previewValues[c].color ? '' : 'mbsc-color-preview-item-empty') + '\" style=\"background: ' + (previewValues[c].color || 'initial') + ';\"></div></div>';\n      }\n\n      html += '</div></div>';\n    }\n\n    return html;\n  };\n\n  that._position = function ($m) {\n    var colorCont, colorItemWidth;\n\n    if (!isHorizontalScroll) {\n      colorCont = $m.find('.mbsc-color-cont');\n      colorItemWidth = Math.ceil(colorCont.find('.mbsc-color-item-c')[0].offsetWidth);\n      colorCont.width(Math.min(Math.floor($m.find('.mbsc-fr-c').width() / colorItemWidth), Math.round(tempColors.length / s.rows)) * colorItemWidth + 1);\n    }\n\n    if (scrollView) {\n      scrollView.refresh();\n    }\n\n    if (previewScrollView) {\n      previewScrollView.refresh();\n    }\n  };\n\n  that._markupInserted = function ($markup) {\n    if (!isHorizontalScroll) {\n      $markup.find('.mbsc-color-scroll-cont').css('max-height', $markup.find('.mbsc-color-item-c')[0].offsetHeight * s.rows);\n    } // init color scrollView\n\n\n    scrollView = new ScrollViewBase($markup.find('.mbsc-color-scroll-cont')[0], {\n      axis: isHorizontalScroll ? 'X' : 'Y',\n      rtl: s.rtl,\n      elastic: 60,\n      stopProp: false,\n      mousewheel: s.mousewheel,\n      onBtnTap: function onBtnTap(ev) {\n        colorTap(ev, $markup);\n      }\n    });\n  };\n\n  that._attachEvents = function ($markup) {\n    var modifiedColor;\n    $colorItems = $$1('.mbsc-color-item', $markup); // handle color selection with space\n\n    $markup.on('keydown', '.mbsc-color-btn-e', function (ev) {\n      ev.stopPropagation();\n\n      if (ev.keyCode == 32) {\n        // Space \n        if (ev.target.classList.contains('mbsc-color-item')) {\n          colorTap(ev, $markup);\n        } else {\n          colorPreviewTap(ev, $markup);\n        }\n      }\n    });\n\n    if (hasPreview) {\n      $colorPreviewItems = $$1('.mbsc-color-preview-item', $markup);\n    } // refine mode \n\n\n    if (refineMode) {\n      $markup.addClass('mbsc-color-refine');\n      $sliderElm = $$1('.mbsc-color-slider', $markup);\n      slider = new Slider($sliderElm[0], {\n        theme: s.theme,\n        rtl: s.rtl\n      });\n      sliderTrack = $markup.find('.mbsc-progress-track'); // change slider track step color\n\n      if (colorIndex && that._value) {\n        setDefaultValues(colorIndex, $markup);\n      }\n\n      $sliderElm.on('change', function () {\n        if (colorIndex !== undefined && (singleSelect || tempColors[colorIndex] && tempColors[colorIndex].selected)) {\n          currHslValue.l = 100 - this.value;\n          modifiedColor = convertToFormat(currHslValue.toString()).toString();\n\n          if (singleSelect) {\n            that._tempValue = modifiedColor;\n          } else {\n            that._tempValue[colorPreviewInd !== undefined ? colorPreviewInd : that._tempValue.length] = modifiedColor;\n          }\n\n          tempColors[colorIndex].tempChangedColor = modifiedColor;\n          $colorItems.eq(colorIndex).css('background', modifiedColor);\n\n          if (hasPreview) {\n            tempPreviewValues[colorPreviewInd].color = modifiedColor;\n            $colorPreviewItems.eq(colorPreviewInd).removeClass('mbsc-color-preview-item-empty').css({\n              'background': modifiedColor\n            });\n          }\n\n          if (that.live) {\n            throttle(that._fillValue());\n          }\n        }\n      });\n    }\n\n    if (hasPreview) {\n      // init colorprevirew scrollview\n      previewScrollView = new ScrollViewBase($markup.find('.mbsc-color-preview-cont')[0], {\n        axis: 'X',\n        rtl: s.rtl,\n        stopProp: false,\n        mousewheel: s.mousewheel,\n        onBtnTap: function onBtnTap(ev) {\n          colorPreviewTap(ev, $markup);\n        }\n      });\n    }\n\n    that._updateHeader();\n  };\n\n  that._markupRemove = function () {\n    if (scrollView) {\n      scrollView.destroy();\n    }\n\n    if (slider) {\n      slider.destroy();\n    }\n\n    if (previewScrollView) {\n      previewScrollView.destroy();\n    }\n  };\n\n  that.__processSettings = function () {\n    var i, data;\n    s = that.settings;\n    trigger = that.trigger;\n    isHorizontalScroll = s.navigation == 'horizontal';\n    that._value = [];\n    that._tempValue = [];\n    singleSelect = s.select == 'single';\n    hasClear = s.clear !== undefined ? s.clear : singleSelect;\n    data = s.data || [];\n\n    if (!data.length) {\n      switch (s.format) {\n        case 'rgb':\n          data = [\"rgb(255,235,60)\", \"rgb(255,153,0)\", \"rgb(244,68,55)\", \"rgb(234,30,99)\", \"rgb(156,38,176)\", \"rgb(104,58,183)\", \"rgb(63,81,181)\", \"rgb(33,150,243)\", \"rgb(0,151,136)\", \"rgb(75,175,79)\", \"rgb(126,93,78)\", \"rgb(158,158,158)\"];\n\n          if (hasClear) {\n            data.splice(10, 0, 'rgb(83, 71, 65)');\n          }\n\n          break;\n\n        case 'hsl':\n          data = [\"hsl(54,100%,62%)\", \"hsl(36,100%,50%)\", \"hsl(4,90%,59%)\", \"hsl(340,83%,52%)\", \"hsl(291,64%,42%)\", \"hsl(262,52%,47%)\", \"hsl(231,48%,48%)\", \"hsl(207,90%,54%)\", \"hsl(174,100%,30%)\", \"hsl(122,40%,49%)\", \"hsl(19,24%,40%)\", \"hsl(0,0%,62%)\"];\n\n          if (hasClear) {\n            data.splice(10, 0, 'hsl(20, 12%, 29%)');\n          }\n\n          break;\n\n        default:\n          data = ['#ffeb3c', '#ff9900', '#f44437', '#ea1e63', '#9c26b0', '#683ab7', '#3f51b5', '#2196f3', '#009788', '#4baf4f', '#7e5d4e', '#9e9e9e'];\n\n          if (hasClear) {\n            data.splice(10, 0, '#534741');\n          }\n\n      }\n    }\n\n    refineMode = s.mode == 'refine';\n    hasPreview = !isNaN(s.select);\n    maxSelect = isNaN(s.select) ? singleSelect ? 2 : data.length : s.select;\n    returnObj = $$1.isPlainObject(data[0]); // generate preview object\n\n    if (hasPreview && !Object.keys(previewValues).length) {\n      for (i = 0; i < s.select; ++i) {\n        previewValues[i] = {};\n        tempPreviewValues[i] = {};\n      }\n    }\n\n    tempColors = data.slice(0); // convert tempColors into objects\n\n    for (i = 0; i < tempColors.length; ++i) {\n      if (!$$1.isPlainObject(data[i])) {\n        data[i] = data[i].toLowerCase();\n        tempColors[i] = {\n          key: i,\n          name: data[i],\n          color: data[i]\n        };\n      } else {\n        tempColors[i].color = data[i].color;\n      }\n    }\n\n    def = s.defaultValue || tempColors[0].color;\n    currValue = def;\n    currHslValue = convertToFormat(currValue, 'hsl');\n    enhanceInput = s.enhance && $elm.is('input'); // Create dummy input\n\n    if (enhanceInput) {\n      if ($elm.hasClass('mbsc-color-input-hdn')) {\n        $input = $elm.prev();\n      } else {\n        $input = $$1('<div ' + (el.placeholder ? 'data-placeholder=\"' + el.placeholder + '\"' : '') + ' class=\"mbsc-control mbsc-color-input ' + (s.inputClass || '') + '\" readonly ></div>');\n        $input.insertBefore($elm);\n        $elm.addClass('mbsc-color-input-hdn').attr('tabindex', -1);\n      }\n\n      s.anchor = $input;\n      that.attachShow($input);\n    }\n  };\n\n  that.__destroy = function () {\n    if (enhanceInput) {\n      $elm.removeClass('mbsc-color-input-hdn');\n      $input.remove();\n    }\n  };\n\n  that._checkSize = true; // Constructor\n\n  if (!inherit) {\n    that.init();\n  }\n}; // Extend defaults\n\n\nColor.prototype = {\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _class: 'color',\n  _defaults: extend$1({}, Frame.prototype._defaults, {\n    headerText: false,\n    validate: noop,\n    parseValue: noop,\n    enhance: true,\n    rows: 2,\n    select: 'single',\n    format: 'hex',\n    navigation: 'horizontal',\n    compClass: 'mbsc-color'\n  })\n};\nclasses.Color = Color;\nmobiscroll.themes.color = mobiscroll.themes.frame; // Expose utility functions\n\nutil.color = {\n  hsv2hex: hsv2hex,\n  hsv2rgb: hsv2rgb,\n  rgb2hsv: rgb2hsv,\n  rgb2hex: rgb2hex,\n  rgb2hsl: rgb2hsl,\n  hex2rgb: hex2rgb,\n  hex2hsv: hex2hsv,\n  hex2hsl: hex2hsl\n};\n\nvar MbscColor = function (_super) {\n  __extends(MbscColor, _super);\n\n  function MbscColor(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.enhance = false;\n    _this.onSet = new EventEmitter();\n    _this.onClear = new EventEmitter();\n    _this.onItemTap = new EventEmitter();\n    _this.onPreviewItemTap = new EventEmitter();\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscColor.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscColor.prototype.refreshData = function (newData) {\n    this.instance.option('data', newData);\n  };\n\n  MbscColor.prototype.initControl = function () {\n    var options = extend$1({}, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Color(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  MbscColor.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var changed = void 0;\n\n      if (this.isMulti) {\n        changed = !deepEqualsArray(v, this.instance.getVal());\n      } else {\n        var innerValue = this.instance.getVal();\n        changed = innerValue !== v;\n      }\n\n      if (changed) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscColor.prototype.ngOnInit = function () {\n    this.isMulti = this.options && this.options.select && this.options.select !== 'single';\n    this.cloneDictionary.data = [];\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscColor.prototype, \"clear\", void 0);\n\n  __decorate([Input$1('mbsc-data'), __metadata(\"design:type\", Array)], MbscColor.prototype, \"data\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscColor.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscColor.prototype, \"enhance\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscColor.prototype, \"format\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscColor.prototype, \"inputClass\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscColor.prototype, \"mode\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscColor.prototype, \"navigation\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscColor.prototype, \"preview\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscColor.prototype, \"previewText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscColor.prototype, \"rows\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscColor.prototype, \"valueText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscColor.prototype, \"select\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscColor.prototype, \"onSet\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscColor.prototype, \"onClear\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscColor.prototype, \"onItemTap\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscColor.prototype, \"onPreviewItemTap\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscColor.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-color'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscColor.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-colorChange'), __metadata(\"design:type\", EventEmitter)], MbscColor.prototype, \"onChangeEmitter\", void 0);\n\n  MbscColor = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscColor);\n\n  MbscColor.ɵfac = function MbscColor_Factory(t) {\n    return new (t || MbscColor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscColor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscColor,\n    selectors: [[\"\", \"mbsc-color\", \"\"]],\n    inputs: {\n      value: [\"mbsc-color\", \"value\"],\n      clear: \"clear\",\n      data: [\"mbsc-data\", \"data\"],\n      defaultValue: \"defaultValue\",\n      enhance: \"enhance\",\n      format: \"format\",\n      inputClass: \"inputClass\",\n      mode: \"mode\",\n      navigation: \"navigation\",\n      preview: \"preview\",\n      previewText: \"previewText\",\n      rows: \"rows\",\n      valueText: \"valueText\",\n      select: \"select\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onSet: \"onSet\",\n      onClear: \"onClear\",\n      onItemTap: \"onItemTap\",\n      onPreviewItemTap: \"onPreviewItemTap\",\n      onChangeEmitter: \"mbsc-colorChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscColor;\n}(MbscFrameBase);\n\nvar MbscColorComponent = function (_super) {\n  __extends(MbscColorComponent, _super);\n\n  function MbscColorComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    _this.enhance = true;\n    return _this;\n  }\n\n  MbscColorComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscColorComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscColorComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscColorComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscColorComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscColorComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscColorComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscColorComponent.prototype, \"placeholder\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscColorComponent.prototype, \"data\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscColorComponent.prototype, \"enhance\", void 0);\n\n  MbscColorComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscColorComponent);\n\n  MbscColorComponent.ɵfac = function MbscColorComponent_Factory(t) {\n    return new (t || MbscColorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscColorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscColorComponent,\n    selectors: [[\"mbsc-color\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\",\n      data: \"data\",\n      enhance: \"enhance\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscColorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscColorComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscColorComponent;\n}(MbscColor);\n\nvar MbscColorModule = function () {\n  function MbscColorModule() {}\n\n  MbscColorModule.ɵfac = function MbscColorModule_Factory(t) {\n    return new (t || MbscColorModule)();\n  };\n\n  MbscColorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscColorModule\n  });\n  MbscColorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscFrameBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscColorModule, {\n      declarations: function () {\n        return [MbscColor, MbscColorComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscFrameBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscColor, MbscColorComponent];\n      }\n    });\n  })();\n\n  return MbscColorModule;\n}();\n\nvar DateTime$1 = Scroller;\npresets.date = DateTime;\npresets.time = DateTime;\npresets.datetime = DateTime;\n\nvar MbscDateBase = function (_super) {\n  __extends(MbscDateBase, _super);\n\n  function MbscDateBase(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.options = {};\n    _this.preset = 'date';\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscDateBase.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscDateBase.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var innerValue = this.instance.getVal();\n\n      if (!innerValue && v || innerValue && !v || innerValue && v && innerValue.toString() !== v.toString()) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscDateBase.prototype.initControl = function () {\n    var options = extend$1({\n      preset: this.preset\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new DateTime$1(this.element, options);\n\n    if (this.initialValue !== undefined && this.initialValue !== \"\") {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscDateBase.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-date'), __metadata(\"design:type\", Date), __metadata(\"design:paramtypes\", [Date])], MbscDateBase.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-dateChange'), __metadata(\"design:type\", EventEmitter)], MbscDateBase.prototype, \"onChangeEmitter\", void 0);\n\n  MbscDateBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscDateBase);\n\n  MbscDateBase.ɵfac = function MbscDateBase_Factory(t) {\n    return new (t || MbscDateBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscDateBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscDateBase,\n    selectors: [[\"\", \"mbsc-dt-b\", \"\"]],\n    inputs: {\n      value: [\"mbsc-date\", \"value\"],\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-dateChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscDateBase;\n}(MbscDatetimeBase);\n\nvar MbscDate = function (_super) {\n  __extends(MbscDate, _super);\n\n  function MbscDate(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.preset = 'date';\n    return _this;\n  }\n\n  MbscDate = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscDate);\n\n  MbscDate.ɵfac = function MbscDate_Factory(t) {\n    return new (t || MbscDate)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscDate.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscDate,\n    selectors: [[\"\", \"mbsc-date\", \"\"]],\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscDate;\n}(MbscDateBase);\n\nvar MbscDateComponent = function (_super) {\n  __extends(MbscDateComponent, _super);\n\n  function MbscDateComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscDateComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscDateComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscDateComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDateComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscDateComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDateComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscDateComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDateComponent.prototype, \"placeholder\", void 0);\n\n  MbscDateComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscDateComponent);\n\n  MbscDateComponent.ɵfac = function MbscDateComponent_Factory(t) {\n    return new (t || MbscDateComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscDateComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscDateComponent,\n    selectors: [[\"mbsc-date\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscDateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscDateComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscDateComponent;\n}(MbscDate);\n\nvar MbscTime = function (_super) {\n  __extends(MbscTime, _super);\n\n  function MbscTime(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.onChangeEmitter = new EventEmitter();\n    _this.preset = 'time';\n    return _this;\n  }\n\n  Object.defineProperty(MbscTime.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([Input$1('mbsc-time'), __metadata(\"design:type\", Date), __metadata(\"design:paramtypes\", [Date])], MbscTime.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-timeChange'), __metadata(\"design:type\", EventEmitter)], MbscTime.prototype, \"onChangeEmitter\", void 0);\n\n  MbscTime = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscTime);\n\n  MbscTime.ɵfac = function MbscTime_Factory(t) {\n    return new (t || MbscTime)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscTime.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscTime,\n    selectors: [[\"\", \"mbsc-time\", \"\"]],\n    inputs: {\n      value: [\"mbsc-time\", \"value\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-timeChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTime;\n}(MbscDateBase);\n\nvar MbscTimeComponent = function (_super) {\n  __extends(MbscTimeComponent, _super);\n\n  function MbscTimeComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscTimeComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscTimeComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscTimeComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimeComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscTimeComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimeComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscTimeComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimeComponent.prototype, \"placeholder\", void 0);\n\n  MbscTimeComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscTimeComponent);\n\n  MbscTimeComponent.ɵfac = function MbscTimeComponent_Factory(t) {\n    return new (t || MbscTimeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscTimeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscTimeComponent,\n    selectors: [[\"mbsc-time\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscTimeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscTimeComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTimeComponent;\n}(MbscTime);\n\nvar MbscDatetime = function (_super) {\n  __extends(MbscDatetime, _super);\n\n  function MbscDatetime(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.onChangeEmitter = new EventEmitter();\n    _this.preset = 'datetime';\n    return _this;\n  }\n\n  Object.defineProperty(MbscDatetime.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([Input$1('mbsc-datetime'), __metadata(\"design:type\", Date), __metadata(\"design:paramtypes\", [Date])], MbscDatetime.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-datetimeChange'), __metadata(\"design:type\", EventEmitter)], MbscDatetime.prototype, \"onChangeEmitter\", void 0);\n\n  MbscDatetime = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscDatetime);\n\n  MbscDatetime.ɵfac = function MbscDatetime_Factory(t) {\n    return new (t || MbscDatetime)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscDatetime.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscDatetime,\n    selectors: [[\"\", \"mbsc-datetime\", \"\"]],\n    inputs: {\n      value: [\"mbsc-datetime\", \"value\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-datetimeChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscDatetime;\n}(MbscDateBase);\n\nvar MbscDatetimeComponent = function (_super) {\n  __extends(MbscDatetimeComponent, _super);\n\n  function MbscDatetimeComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscDatetimeComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscDatetimeComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscDatetimeComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscDatetimeComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscDatetimeComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDatetimeComponent.prototype, \"placeholder\", void 0);\n\n  MbscDatetimeComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscDatetimeComponent);\n\n  MbscDatetimeComponent.ɵfac = function MbscDatetimeComponent_Factory(t) {\n    return new (t || MbscDatetimeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscDatetimeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscDatetimeComponent,\n    selectors: [[\"mbsc-datetime\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscDatetimeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscDatetimeComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscDatetimeComponent;\n}(MbscDatetime);\n\nvar comp$2 = [MbscDateBase, MbscDate, MbscDateComponent, MbscTime, MbscTimeComponent, MbscDatetime, MbscDatetimeComponent];\n\nvar MbscDatetimeModule = function () {\n  function MbscDatetimeModule() {}\n\n  MbscDatetimeModule.ɵfac = function MbscDatetimeModule_Factory(t) {\n    return new (t || MbscDatetimeModule)();\n  };\n\n  MbscDatetimeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscDatetimeModule\n  });\n  MbscDatetimeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscDatetimeBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscDatetimeModule, {\n      declarations: function () {\n        return [MbscDateBase, MbscDate, MbscDateComponent, MbscTime, MbscTimeComponent, MbscDatetime, MbscDatetimeComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscDatetimeBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscDateBase, MbscDate, MbscDateComponent, MbscTime, MbscTimeComponent, MbscDatetime, MbscDatetimeComponent];\n      }\n    });\n  })();\n\n  return MbscDatetimeModule;\n}();\n\nvar Popup = function Popup(el, settings, inherit) {\n  function addContent($m) {\n    /* TRIAL */\n    if (!$$1('.mbsc-fr-c', $m).hasClass('mbsc-wdg-c')\n    /* TRIALCOND */\n    ) {\n      $$1('.mbsc-fr-c', $m).addClass('mbsc-wdg-c').append($elm.show());\n\n      if (!$$1('.mbsc-w-p', $m).length) {\n        $$1('.mbsc-fr-c', $m).addClass('mbsc-w-p');\n      }\n    }\n  }\n\n  var s,\n      $prev,\n      $elm = $$1(el),\n      that = this; // Call the parent constructor\n\n  Frame.call(this, el, settings, true);\n  /* TRIALFUNC */\n\n  that._generateContent = function () {\n    return '';\n  };\n\n  that._markupReady = function ($m) {\n    if (s.display != 'inline') {\n      addContent($m);\n    }\n  };\n\n  that._markupInserted = function ($m) {\n    if (s.display == 'inline') {\n      addContent($m);\n    }\n\n    $m.trigger('mbsc-enhance', [{\n      theme: s.theme,\n      lang: s.lang\n    }]);\n  };\n\n  that._markupRemove = function () {\n    $elm.hide();\n\n    if ($prev && $prev.parent().length) {\n      $prev.after($elm);\n    }\n  };\n\n  that.__processSettings = function () {\n    s = that.settings;\n    that.buttons.ok = {\n      text: s.okText,\n      icon: s.okIcon,\n      handler: 'set'\n    };\n    s.buttons = s.buttons || (s.display == 'inline' ? [] : ['ok']);\n\n    if (!$prev && $elm.parent().length) {\n      $prev = $$1(document.createComment('popup'));\n      $elm.before($prev);\n    }\n\n    $elm.hide();\n  }; // Constructor\n\n\n  if (!inherit) {\n    that.init();\n  }\n};\n\nPopup.prototype = {\n  _hasDef: true,\n  _hasTheme: true,\n  _hasContent: true,\n  _hasLang: true,\n  _responsive: true,\n  _class: 'popup',\n  _defaults: extend$1({}, Frame.prototype._defaults, {\n    compClass: 'mbsc-wdg',\n    okText: 'OK',\n    headerText: false\n  })\n};\nclasses.Popup = Popup;\nclasses.Widget = Popup;\nmobiscroll.themes.popup = mobiscroll.themes.frame; // eslint-disable-next-line no-unused-vars\n\nvar Eventcalendar = Scroller;\n\nfunction getHeight(el) {\n  var style = getComputedStyle(el);\n  return el.innerHeight || el.clientHeight - parseFloat(style.paddingTop) - parseFloat(style.paddingBottom);\n}\n\nvar defaults$4 = {\n  view: {\n    calendar: {\n      type: 'month',\n      popover: true\n    }\n  },\n  // Localization\n  allDayText: 'All-day',\n  labelsShort: ['Yrs', 'Mths', 'Days', 'Hrs', 'Mins', 'Secs'],\n  eventText: 'event',\n  eventsText: 'events',\n  noEventsText: 'No events'\n},\n    overrides = {\n  yearChange: false,\n  weekDays: 'short'\n};\n\npresets.eventcalendar = function (inst, settings) {\n  // Private functions\n  // ---\n  function processSettings() {\n    var view = s.view,\n        calendar = view.calendar,\n        list = view.eventList,\n        months = s.months,\n        weeks = s.weeks;\n\n    if (calendar) {\n      if (calendar.type == 'week') {\n        weeks = calendar.size || 1;\n      } else if (calendar.size) {\n        months = calendar.size;\n      }\n\n      isListOnly = false;\n    } else {\n      weeks = 0;\n      isListOnly = true;\n    }\n\n    if (list) {\n      listType = list.type;\n      listSize = list.size || 1;\n    }\n\n    multiLabel = calendar && calendar.labels;\n    scrollEventList = list && list.scrollable;\n    showEventList = view.eventList;\n    showEventBubble = s.eventBubble === undefined ? calendar && calendar.popover : s.eventBubble;\n    s.weeks = weeks;\n    s.months = months;\n  }\n\n  function updateTitle(firstDay, lastDay) {\n    var title,\n        monthIndex = (s.dateWheels || s.dateFormat).search(/m/i),\n        yearIndex = (s.dateWheels || s.dateFormat).search(/y/i),\n        firstYear = s.getYear(firstDay),\n        firstMonth = s.getMonth(firstDay),\n        lastYear = s.getYear(lastDay),\n        lastMonth = s.getMonth(lastDay);\n\n    inst._checkBtn($$1('.mbsc-cal-prev-m', $ctx), getDateOnly(firstDay) <= inst._minDate);\n\n    inst._checkBtn($$1('.mbsc-cal-next-m', $ctx), getDateOnly(lastDay) >= inst._maxDate);\n\n    if (listType == 'day') {\n      title = formatDate(s.dateFormat, firstDay, s) + (listSize > 1 ? ' - ' + formatDate(s.dateFormat, lastDay, s) : '');\n    } else if (listType == 'week') {\n      title = formatDate(s.dateFormat, firstDay, s) + ' - ' + formatDate(s.dateFormat, lastDay, s);\n    } else if (listType == 'month') {\n      if (listSize == 1) {\n        title = yearIndex < monthIndex ? firstYear + ' ' + s.monthNames[firstMonth] : s.monthNames[firstMonth] + ' ' + firstYear;\n      } else {\n        title = yearIndex < monthIndex ? firstYear + ' ' + s.monthNamesShort[firstMonth] + ' - ' + lastYear + ' ' + s.monthNamesShort[lastMonth] : s.monthNamesShort[firstMonth] + ' ' + firstYear + ' - ' + s.monthNamesShort[lastMonth] + ' ' + lastYear;\n      }\n    } else if (listType == 'year') {\n      title = firstYear + (listSize > 1 ? \" - \" + lastYear : '');\n    }\n\n    $viewTitle.html(title);\n  }\n\n  function createEventList(firstDay, lastDay, eventObj) {\n    var d,\n        i,\n        j,\n        ev,\n        $items,\n        count = 0,\n        allEvents = [],\n        eventHtml = '',\n        events = [];\n\n    if (!eventObj) {\n      eventObj = inst._prepareObj(eventList, firstDay, lastDay);\n    }\n\n    for (d = getDateOnly(firstDay); d <= lastDay; d.setDate(d.getDate() + 1)) {\n      ev = eventObj[getDateOnly(d)];\n\n      if (ev && ev.length) {\n        events.push({\n          d: new Date(d),\n          list: sortEvents(ev)\n        });\n      }\n    }\n\n    if (events.length > 0) {\n      for (i = 0; i < events.length; i++) {\n        ev = events[i];\n        eventHtml += '<div><div class=\"mbsc-lv-gr-title mbsc-event-day\" data-full=\"' + getDateStr(ev.d) + '\">' + formatDate(s.dateFormat, ev.d, s) + '</div>';\n\n        for (j = 0; j < ev.list.length; j++) {\n          var event = ev.list[j],\n              start = event.start ? makeDate(event.start) : null,\n              end = event.end ? makeDate(event.end) : null,\n              color = event.color,\n              isRepeating = DAY_OF_WEEK.test(event.d) || DAY_OF_MONTH.test(event.d),\n              isMultiDay = start && end && !isSameDay(start, end),\n              isFirstDay = isMultiDay ? isSameDay(start, ev.d) : true,\n              isLastDay = isMultiDay ? isSameDay(end, ev.d) : true,\n              dt = event.d ? isRepeating ? event.d : makeDate(event.d) : start,\n              allDay = event.allDay || isRepeating || isMultiDay && !isFirstDay && !isLastDay;\n          allEvents.push({\n            d: ev.d,\n            e: event\n          });\n          eventHtml += '<div tabindex=\"0\" role=\"button\" class=\"mbsc-lv-item mbsc-lv-item-actionable\" data-index=\"' + count + '\"><div class=\"mbsc-event-time\">' + (allDay ? s.allDayText : isFirstDay && dt && dt.getTime ? formatDate(s.timeFormat, dt) : isMultiDay && isLastDay ? s.toText : '') + (!allDay && isLastDay && end && end.getTime ? '<br/>' + formatDate(s.timeFormat, end) : '') + '</div>' + '<div class=\"mbsc-event-color\"' + (color ? ' style=\"background:' + color + ';\"' : '') + '></div>' + '<div class=\"mbsc-event-txt\">' + event.text + '</div>'\n          /* TRIAL */\n          + '</div>';\n          count++;\n        }\n\n        eventHtml += '</div>';\n      }\n    } else {\n      eventHtml += '<div class=\"mbsc-lv-gr-title mbsc-event-empty\"><div class=\"mbsc-empty\"><h3>' + s.noEventsText + '</h3></div></div>';\n    }\n\n    preventScrollWatch++;\n    $eventListCont.html('<div class=\"mbsc-lv mbsc-lv-v\">' + eventHtml + '</div>').scrollTop(0);\n    setTimeout(function () {\n      // Need setTimeout since scroll listener is throtteled\n      preventScrollWatch--;\n    }, 150);\n    $items = $$1('.mbsc-lv-item', $eventListCont); // Assign event click\n\n    inst.tap($items, function (e) {\n      var data = allEvents[$$1(this).attr('data-index')];\n      trigger('onEventSelect', {\n        domEvent: e,\n        event: data.e,\n        date: data.d\n      });\n    });\n    handleFocus($items);\n  }\n\n  function handleFocus($items) {\n    $items.on('keydown', function (ev) {\n      if (ev.keyCode === 13 || ev.keyCode === 32) {\n        this.click();\n      }\n    }).on('focus', function () {\n      if (window.__mbscFocusVisible) {\n        $$1(this).addClass('mbsc-focus');\n      }\n    }).on('blur', function () {\n      $$1(this).removeClass('mbsc-focus');\n    });\n  }\n\n  function createEventPopover() {\n    if (popoverData) {\n      var d = getDateOnly(popoverData.d),\n          events = popoverData.events || eventObj[d],\n          cell = popoverData.cell || $$1('.mbsc-cal-slide-a .mbsc-cal-day[data-full=\"' + getDateStr(d) + '\"]', inst._markup)[0];\n      showEvents(events, d, cell);\n      popoverData = null;\n    }\n  }\n\n  function formatDuration(start, end) {\n    var lbl = s.labelsShort,\n        time = end - start,\n        seconds = Math.abs(time) / 1000,\n        minutes = seconds / 60,\n        hours = minutes / 60,\n        days = hours / 24,\n        years = days / 365;\n    return seconds < 45 && Math.round(seconds) + ' ' + lbl[5].toLowerCase() || //seconds < 90 && '1 minute' ||\n    minutes < 45 && Math.round(minutes) + ' ' + lbl[4].toLowerCase() || //minutes < 90 && '1 hour' ||\n    hours < 24 && Math.round(hours) + ' ' + lbl[3].toLowerCase() || //hours < 42 && '1 day' ||\n    days < 30 && Math.round(days) + ' ' + lbl[2].toLowerCase() || //days < 45 && '1 month' ||\n    days < 365 && Math.round(days / 30) + ' ' + lbl[1].toLowerCase() || //years < 1.5 && '1 year' ||\n    Math.round(years) + ' ' + lbl[0].toLowerCase();\n  }\n\n  function sortEvents(events) {\n    return events.slice(0).sort(function (a, b) {\n      var start1 = a.start ? makeDate(a.start) : null,\n          start2 = b.start ? makeDate(b.start) : null,\n          end1 = a.end ? makeDate(a.end) : null,\n          end2 = b.end ? makeDate(b.end) : null,\n          isRepeating1 = DAY_OF_WEEK.test(a.d) || DAY_OF_MONTH.test(a.d),\n          isRepeating2 = DAY_OF_WEEK.test(b.d) || DAY_OF_MONTH.test(b.d),\n          dt1 = a.d ? isRepeating1 ? a.d : makeDate(a.d) : start1,\n          dt2 = b.d ? isRepeating2 ? b.d : makeDate(b.d) : start2,\n          weight1 = !dt1.getTime ? 0 : start1 && end1 && start1.toDateString() !== end1.toDateString() ? 1 : a.allDay ? 2 : dt1.getTime(),\n          weight2 = !dt2.getTime ? 0 : start2 && end2 && start2.toDateString() !== end2.toDateString() ? 1 : b.allDay ? 2 : dt2.getTime();\n\n      if (weight1 == weight2) {\n        return a.text > b.text ? 1 : -1;\n      }\n\n      return weight1 - weight2;\n    });\n  }\n\n  function showEvents(events, d, cell) {\n    if (events) {\n      var $eventCont,\n          $eventContInner,\n          $eventScroller,\n          eventScroller,\n          $items,\n          html = '<div class=\"mbsc-cal-event-list\">';\n      $eventCont = $$1('<div class=\"mbsc-cal-events ' + (s.eventBubbleClass || '') + '\">' + '<div class=\"mbsc-cal-events-i\"><div class=\"mbsc-cal-events-sc\">' + '</div><div class=\"mbsc-sc-bar-c\"><div class=\"mbsc-sc-bar\"></div></div></div></div>');\n      $eventContInner = $$1('.mbsc-cal-events-i', $eventCont);\n      $eventScroller = $$1('.mbsc-cal-events-sc', $eventCont);\n      inst.tap($eventContInner, function () {\n        if (!eventScroller.scrolled) {\n          hideEvents();\n        }\n      });\n      popup = new Popup($eventCont[0], {\n        display: 'bubble',\n        theme: s.theme,\n        lang: s.lang,\n        context: s.context,\n        buttons: [],\n        anchor: cell,\n        showOverlay: false,\n        cssClass: 'mbsc-no-padding mbsc-cal-events-popup',\n        onShow: function onShow() {\n          eventScroller = new ScrollViewBase($eventContInner[0], {\n            scrollbar: $$1('.mbsc-sc-bar-c', $eventCont),\n            stopProp: false\n          });\n          $$1(document).on('click', hideEventsOnClick);\n        },\n        onClose: function onClose(event, inst) {\n          inst.destroy();\n\n          if (eventScroller) {\n            eventScroller.destroy();\n          }\n\n          $$1(document).off('click', hideEventsOnClick);\n        }\n      }); // Store the popup on the instance, we need to destroy it in case of an option call or re-init\n\n      inst._popup = popup;\n      eventDay = cell;\n      events = sortEvents(events);\n      $$1.each(events, function (i, e) {\n        var start = e.start ? makeDate(e.start) : null,\n            end = e.end ? makeDate(e.end) : null,\n            isRepeating = DAY_OF_WEEK.test(e.d) || DAY_OF_MONTH.test(e.d),\n            dt = e.d ? isRepeating ? e.d : makeDate(e.d) : start,\n            isMultiDay = start && end && !isSameDay(start, end),\n            isFirstDay = isMultiDay ? isSameDay(start, d) : true,\n            isLastDay = isMultiDay ? isSameDay(end, d) : true,\n            allDay = e.allDay || isRepeating || isMultiDay && !isFirstDay && !isLastDay,\n            bg = e.color,\n            ariaFrom = '',\n            ariaTo = '',\n            ariaLabel = $$1('<div>' + e.text + '</div>').text();\n\n        if (dt.getTime) {\n          ariaFrom = formatDate((isMultiDay ? 'MM d yy ' : '') + s.timeFormat, dt);\n        }\n\n        if (end) {\n          ariaTo = formatDate((isMultiDay ? 'MM d yy ' : '') + s.timeFormat, end);\n        }\n\n        html += '<div tabindex=\"0\" role=\"button\" title=\"' + ariaLabel + '\" aria-label=\"' + ariaLabel + (ariaFrom ? ', ' + s.fromText + ': ' + ariaFrom : '') + (ariaTo ? ', ' + s.toText + ': ' + ariaTo : '') + '\" class=\"mbsc-cal-event mbsc-lv-item mbsc-lv-item-actionable\">' + '<div class=\"mbsc-cal-event-color\" style=\"' + (bg ? 'background:' + bg + ';' : '') + '\"></div>' + '<div class=\"mbsc-cal-event-text\">' + '<div class=\"mbsc-cal-event-time\">' + (allDay ? s.allDayText : isFirstDay && dt.getTime ? formatDate(s.timeFormat, dt) : '') + '</div>' + e.text + '</div>' + (start && end && !e.allDay ? '<div class=\"mbsc-cal-event-dur\">' + s.formatDuration(start, end, e) + '</div>' : '') + '</div>';\n      });\n      html += '</div>';\n      $eventScroller.html(html);\n      popup.show();\n      trigger('onEventBubbleShow', {\n        target: eventDay,\n        eventList: $eventCont[0]\n      });\n      $items = $$1('.mbsc-cal-event', $eventScroller); // Assign event click\n\n      inst.tap($items, function (e) {\n        if (!eventScroller.scrolled) {\n          trigger('onEventSelect', {\n            domEvent: e,\n            event: events[$$1(this).index()],\n            date: d\n          });\n        }\n      });\n      handleFocus($items);\n      hasEventBubble = true;\n    }\n  }\n\n  function onScroll() {\n    var d, top, parts;\n\n    if (!preventScrollWatch) {\n      $$1('.mbsc-event-day', this).each(function () {\n        top = this.offsetTop - eventListCont.scrollTop;\n\n        if (top >= 0 && top < 35) {\n          parts = $$1(this).attr('data-full').split('-');\n          d = adjustedDate(parts[0], parts[1] - 1, parts[2]);\n\n          if (!isSameDay(d, currDay)) {\n            preventEventScroll = true;\n            inst.setVal(d);\n          }\n\n          return false;\n        }\n      });\n    }\n  }\n\n  function hideEvents() {\n    if (popup && hasEventBubble) {\n      popup.hide();\n    }\n\n    eventDay = null;\n    hasEventBubble = false;\n  }\n\n  function hideEventsOnClick(e) {\n    if ($$1(e.target).closest('.mbsc-cal-day').length == 0) {\n      hideEvents();\n    }\n  }\n\n  function refresh() {\n    hideEvents();\n    inst.redraw();\n  }\n\n  function getFirstLast(day) {\n    var y = s.getYear(day),\n        m = s.getMonth(day),\n        d = s.getDay(day);\n    currFirstDay = day;\n\n    if (listType == 'day') {\n      currLastDay = s.getDate(y, m, d + listSize - 1);\n    } else if (listType == 'week') {\n      // get first day of week\n      var diff,\n          weekDay = currFirstDay.getDay();\n      diff = d + s.firstDay - (s.firstDay - weekDay > 0 ? 7 : 0) - weekDay;\n      currFirstDay = s.getDate(y, m, diff);\n      currLastDay = s.getDate(y, m, diff + listSize * 7 - 1);\n    } else if (listType == 'month') {\n      currFirstDay = s.getDate(y, m, 1);\n      currLastDay = s.getDate(y, m + listSize, 0);\n    } else if (listType == 'year') {\n      currFirstDay = s.getDate(y, 0, 1);\n      currLastDay = s.getDate(y + listSize, 0, 0);\n    }\n  }\n\n  function scrollToDay(d, prevAnim) {\n    // Scroll to the day in the list, if any\n    if (showEventList && !preventEventScroll) {\n      var $day = $$1('.mbsc-event-day[data-full=\"' + getDateStr(d) + '\"]', $eventListCont);\n\n      if ($day.length) {\n        preventScrollWatch++;\n        smoothScroll(eventListCont, $day.parent()[0].offsetTop, prevAnim, function () {\n          // Need setTimeout since scroll listener is throtteled\n          setTimeout(function () {\n            preventScrollWatch--;\n          }, 150);\n        });\n      }\n    }\n  }\n\n  function triggerLoading(change, render) {\n    if (change) {\n      trigger('onPageChange', {\n        firstDay: currFirstDay,\n        lastDay: currLastDay\n      });\n    }\n\n    if (!render) {\n      trigger('onPageLoading', {\n        firstDay: currFirstDay,\n        lastDay: currLastDay\n      });\n    }\n\n    trigger('onPageLoaded', {\n      firstDay: currFirstDay,\n      lastDay: currLastDay\n    });\n  } // ---\n\n\n  var base,\n      $ctx,\n      $eventListCont,\n      $viewTitle,\n      currDay,\n      currFirstDay,\n      currLastDay,\n      eventDay,\n      eventListCont,\n      eventObj,\n      hasEventBubble,\n      isChanging,\n      isLabelTap,\n      isListOnly,\n      listType,\n      listSize,\n      multiLabel,\n      popoverData,\n      popup,\n      preventEventScroll,\n      preventScrollAnim,\n      prevFirstDay,\n      prevLastDay,\n      scrollEventList,\n      showEventList,\n      showEventBubble,\n      showMore,\n      elm = this,\n      orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, defaults$4, orig, overrides, settings),\n      preventScrollWatch = 0,\n      eventID = 0,\n      eventList = extend$1(true, [], s.data),\n      firstLoad = true,\n      trigger = inst.trigger; // Keep tracking events in settings,\n  // otherwise changes will be lost on an eventual option call\n\n  s.data = eventList;\n  $$1.each(eventList, function (i, e) {\n    if (e._id === undefined) {\n      e._id = eventID++;\n    }\n  });\n  processSettings();\n  base = CalendarBase.call(this, inst); // Extended methods\n  // ---\n\n  inst._onGenMonth = function (start, end) {\n    eventObj = inst._prepareObj(eventList, start, end);\n    inst._labels = multiLabel ? eventObj : null;\n  };\n\n  inst._onRefresh = function (render) {\n    preventScrollAnim = true; // Will re-create the list\n\n    prevFirstDay = null;\n    prevLastDay = null;\n\n    if (isListOnly) {\n      triggerLoading(false, render);\n    }\n  };\n\n  inst._onSetDate = function (d, diff) {\n    currDay = d;\n\n    if (isListOnly) {\n      if (!preventEventScroll && !isChanging) {\n        getFirstLast(d);\n\n        if (!prevFirstDay || !prevLastDay || !isSameDay(prevFirstDay, currFirstDay) || !isSameDay(prevLastDay, currLastDay)) {\n          triggerLoading(true);\n        }\n      }\n    } else if (!diff && !isChanging) {\n      hideEvents();\n\n      if (showEventList && listType == 'day') {\n        // List events for the day\n        createEventList(d, d, eventObj);\n      }\n\n      if ((showEventBubble || showMore) && !isLabelTap) {\n        // Show event popover\n        createEventPopover();\n      }\n\n      scrollToDay(d);\n    }\n\n    preventEventScroll = false;\n    showMore = false;\n    isLabelTap = false;\n  };\n\n  inst._getDayProps = function (d) {\n    var events = eventObj[d],\n        ret = {\n      events: events\n    };\n\n    if (!s.marked && !s.labels && !multiLabel) {\n      if (events) {\n        ret.background = events[0] && events[0].background;\n        ret.marked = events; // For backward compatibility\n\n        ret.markup = s.showEventCount ? '<div class=\"mbsc-cal-txt\">' + events.length + ' ' + (events.length > 1 ? s.eventsText : s.eventText) + '</div>' : '<div class=\"mbsc-cal-marks\"><div class=\"mbsc-cal-mark\"></div></div>';\n      } else {\n        ret.markup = s.showEventCount ? '<div class=\"mbsc-cal-txt-ph\"></div>' : '';\n      }\n    }\n\n    return ret;\n  };\n\n  inst.addEvent = function (events) {\n    var ret = [];\n    events = extend$1(true, [], $$1.isArray(events) ? events : [events]);\n    $$1.each(events, function (i, e) {\n      if (e._id === undefined) {\n        e._id = eventID++;\n      }\n\n      eventList.push(e);\n      ret.push(e._id);\n    });\n    refresh();\n    return ret;\n  };\n\n  inst.updateEvent = function (event) {\n    $$1.each(eventList, function (j, e) {\n      if (e._id === event._id) {\n        eventList.splice(j, 1, event);\n        return false;\n      }\n    });\n    refresh();\n  };\n\n  inst.removeEvent = function (eids) {\n    eids = $$1.isArray(eids) ? eids : [eids];\n    $$1.each(eids, function (i, eid) {\n      $$1.each(eventList, function (j, e) {\n        if (e._id === eid) {\n          eventList.splice(j, 1);\n          return false;\n        }\n      });\n    });\n    refresh();\n  };\n\n  inst.getEvents = function (d) {\n    var obj;\n\n    if (d) {\n      d.setHours(0, 0, 0, 0);\n      obj = inst._prepareObj(eventList, d, d);\n      return obj[d] ? sortEvents(obj[d]) : [];\n    }\n\n    return extend$1(true, [], eventList);\n  };\n\n  inst.setEvents = function (events) {\n    var ret = [];\n    s.data = eventList = extend$1(true, [], events);\n    $$1.each(eventList, function (i, e) {\n      if (e._id === undefined) {\n        e._id = eventID++;\n      }\n\n      ret.push(e._id);\n    });\n    refresh();\n    return ret;\n  };\n\n  inst.navigate = function (d, anim, pop) {\n    d = makeDate(d, inst._format, s);\n    popoverData = pop ? {\n      d: d\n    } : null;\n    inst.setVal(d, true, true, false, anim ? 200 : 0);\n  }; // ---\n\n\n  return extend$1({}, base, {\n    multiLabel: multiLabel,\n    headerText: false,\n    buttons: s.display !== 'inline' ? ['close'] : s.buttons,\n    compClass: 'mbsc-ev-cal mbsc-calendar mbsc-dt mbsc-sc',\n    formatDuration: formatDuration,\n    onMarkupReady: function onMarkupReady(ev, inst) {\n      $ctx = $$1(ev.target);\n      currDay = inst.getDate(true);\n\n      if (showEventList) {\n        $eventListCont = $$1('<div class=\"mbsc-lv-cont mbsc-lv-' + s.theme + (s.baseTheme ? ' mbsc-lv-' + s.baseTheme : '') + (scrollEventList ? ' mbsc-event-list-h' : '') + ' mbsc-event-list\"></div>').appendTo($$1('.mbsc-fr-w', $ctx));\n        $eventListCont.on('scroll', throttle(onScroll));\n        eventListCont = $eventListCont[0];\n      }\n\n      base.onMarkupReady.call(this, ev);\n      $viewTitle = $$1('.mbsc-cal-month', $ctx);\n      hasEventBubble = false;\n      getFirstLast(currDay);\n\n      if (showEventList && isListOnly) {\n        triggerLoading(); // Init navigation arrows\n\n        createStepper($$1('.mbsc-cal-btn', $ctx), function (i, diff) {\n          var y = s.getYear(currFirstDay),\n              m = s.getMonth(currFirstDay),\n              d = s.getDay(currFirstDay);\n\n          if (listType == 'day') {\n            currFirstDay = s.getDate(y, m, d + diff * listSize);\n            currLastDay = s.getDate(y, m, d + (diff + 1) * listSize - 1);\n          } else if (listType == 'week') {\n            currFirstDay = s.getDate(y, m, d + diff * listSize * 7);\n            currLastDay = s.getDate(y, m, d + (diff + 1) * listSize * 7 - 1);\n          } else if (listType == 'month') {\n            currFirstDay = s.getDate(y, m + diff * listSize, 1);\n            currLastDay = s.getDate(y, m + (diff + 1) * listSize, 0);\n          } else if (listType == 'year') {\n            currFirstDay = s.getDate(y + diff * listSize, 0, 1);\n            currLastDay = s.getDate(y + (diff + 1) * listSize, 0, 0);\n          }\n\n          triggerLoading(true);\n        }, 200);\n      }\n\n      addWindowFocus();\n    },\n    onDayChange: function onDayChange(day) {\n      var cell = day.target,\n          show = cell !== eventDay;\n\n      if (show) {\n        showMore = showEventBubble !== false && $$1('.mbsc-cal-txt-more', cell).length;\n        popoverData = {\n          d: day.date,\n          cell: s.outerMonthChange && $$1(cell).hasClass('mbsc-cal-day-diff') ? null : cell,\n          events: day.events\n        };\n      }\n    },\n    onLabelTap: function onLabelTap(ev) {\n      if (ev.label) {\n        trigger('onEventSelect', {\n          domEvent: ev.domEvent,\n          event: ev.label,\n          date: ev.date\n        });\n        isLabelTap = true;\n      }\n    },\n    onPageChange: function onPageChange(ev) {\n      hideEvents();\n      isChanging = true;\n\n      if (!inst._isSetDate) {\n        inst.setVal(ev.firstDay);\n      }\n    },\n    onPageLoaded: function onPageLoaded(ev) {\n      var firstDay = ev.firstDay,\n          lastDay = ev.lastDay;\n\n      if (showEventList) {\n        if (isListOnly) {\n          if (!prevFirstDay || !prevLastDay || !isSameDay(prevFirstDay, firstDay) || !isSameDay(prevLastDay, lastDay)) {\n            prevFirstDay = firstDay;\n            prevLastDay = lastDay;\n            createEventList(firstDay, lastDay);\n            updateTitle(firstDay, lastDay);\n          }\n        } else {\n          if (listType == 'month') {\n            // month view\n            lastDay = s.getDate(s.getYear(firstDay), s.getMonth(firstDay) + listSize, 0);\n          } else if (listType == 'week') {\n            // week view\n            lastDay = s.getDate(s.getYear(firstDay), s.getMonth(firstDay), s.getDay(firstDay) + listSize * 7 - 1);\n          } else {\n            firstDay = inst.getVal(true);\n            lastDay = firstDay;\n          }\n\n          createEventList(firstDay, lastDay, eventObj);\n        }\n\n        if (!firstLoad && !isSameDay(currDay, firstDay)) {\n          scrollToDay(currDay, preventScrollAnim);\n          preventScrollAnim = false;\n        }\n      }\n\n      if (showEventBubble) {\n        createEventPopover();\n      }\n\n      isChanging = false;\n    },\n    onPosition: function onPosition(ev) {\n      base.onPosition.call(this, ev);\n\n      if (popup) {\n        popup.position();\n      }\n\n      if (showEventList && scrollEventList) {\n        $eventListCont.addClass('mbsc-event-list-h');\n        var context = s.display == 'inline' ? elm.parentNode : window,\n            availableHeight = getHeight(context),\n            listHeight = availableHeight - ev.popup.offsetHeight;\n        eventListCont.style.height = listHeight > 200 ? listHeight + 'px' : '';\n        $eventListCont.removeClass('mbsc-event-list-h');\n\n        if (firstLoad && listHeight) {\n          scrollToDay(currDay, true);\n          firstLoad = false;\n        }\n      }\n    },\n    onHide: function onHide() {\n      base.onHide.call(this); // Destroy the popup stored on the instance,\n      // the local variable is lost in case of option call or re-init\n\n      if (inst._popup) {\n        inst._popup.destroy();\n      }\n\n      removeWindowFocus();\n    }\n  });\n};\n\nvar MbscEventcalendar = function (_super) {\n  __extends(MbscEventcalendar, _super);\n\n  function MbscEventcalendar(initialElem, zone, optionService) {\n    var _this = _super.call(this, initialElem, zone, null, null, null) || this;\n\n    _this.optionService = optionService;\n    _this.onEventSelect = new EventEmitter();\n    _this.onCellHoverIn = new EventEmitter();\n    _this.onCellHoverOut = new EventEmitter();\n    _this.onDayChange = new EventEmitter();\n    _this.onSetDate = new EventEmitter();\n    _this.options = {};\n    return _this;\n  }\n\n  MbscEventcalendar.prototype.refreshData = function (newData) {\n    this.instance.setEvents(newData);\n  };\n\n  MbscEventcalendar.prototype.initControl = function () {\n    var options = extend$1({\n      preset: 'eventcalendar'\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Eventcalendar(this.element, options);\n  };\n\n  MbscEventcalendar.prototype.ngOnInit = function () {\n    this.cloneDictionary.data = [];\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  MbscEventcalendar.prototype.setNewValue = function () {};\n\n  __decorate([Input$1('mbsc-data'), __metadata(\"design:type\", Array)], MbscEventcalendar.prototype, \"data\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscEventcalendar.prototype, \"layout\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscEventcalendar.prototype, \"showEventCount\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscEventcalendar.prototype, \"eventBubble\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Function)], MbscEventcalendar.prototype, \"formatDuration\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscEventcalendar.prototype, \"view\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscEventcalendar.prototype, \"allDayText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscEventcalendar.prototype, \"eventText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscEventcalendar.prototype, \"eventsText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscEventcalendar.prototype, \"labelsShort\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscEventcalendar.prototype, \"noEventsText\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscEventcalendar.prototype, \"onEventSelect\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscEventcalendar.prototype, \"onCellHoverIn\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscEventcalendar.prototype, \"onCellHoverOut\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscEventcalendar.prototype, \"onDayChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscEventcalendar.prototype, \"onSetDate\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscEventcalendar.prototype, \"options\", void 0);\n\n  MbscEventcalendar = __decorate([__param(2, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscOptionsService])], MbscEventcalendar);\n\n  MbscEventcalendar.ɵfac = function MbscEventcalendar_Factory(t) {\n    return new (t || MbscEventcalendar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscEventcalendar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscEventcalendar,\n    selectors: [[\"\", \"mbsc-eventcalendar\", \"\"]],\n    inputs: {\n      data: [\"mbsc-data\", \"data\"],\n      layout: \"layout\",\n      showEventCount: \"showEventCount\",\n      eventBubble: \"eventBubble\",\n      formatDuration: \"formatDuration\",\n      view: \"view\",\n      allDayText: \"allDayText\",\n      eventText: \"eventText\",\n      eventsText: \"eventsText\",\n      labelsShort: \"labelsShort\",\n      noEventsText: \"noEventsText\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onEventSelect: \"onEventSelect\",\n      onCellHoverIn: \"onCellHoverIn\",\n      onCellHoverOut: \"onCellHoverOut\",\n      onDayChange: \"onDayChange\",\n      onSetDate: \"onSetDate\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscEventcalendar;\n}(MbscCalBase);\n\nvar MbscEventcalendarComponent = function (_super) {\n  __extends(MbscEventcalendarComponent, _super);\n\n  function MbscEventcalendarComponent(initialElem, zone, optionService) {\n    var _this = _super.call(this, initialElem, zone, optionService) || this;\n\n    _this.options = {};\n    return _this;\n  }\n\n  MbscEventcalendarComponent.prototype.ngOnInit = function () {\n    var display = this.options && this.options.display || this.display;\n\n    if (!display) {\n      this.display = 'inline';\n      this.inlineOptionsObj.display = 'inline';\n    }\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  MbscEventcalendarComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscEventcalendarComponent.prototype, \"data\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscEventcalendarComponent.prototype, \"options\", void 0);\n\n  MbscEventcalendarComponent = __decorate([__param(2, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscOptionsService])], MbscEventcalendarComponent);\n\n  MbscEventcalendarComponent.ɵfac = function MbscEventcalendarComponent_Factory(t) {\n    return new (t || MbscEventcalendarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscEventcalendarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscEventcalendarComponent,\n    selectors: [[\"mbsc-eventcalendar\"]],\n    inputs: {\n      data: \"data\",\n      options: \"options\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    template: function MbscEventcalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\");\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscEventcalendarComponent;\n}(MbscEventcalendar);\n\nvar MbscEventcalendarModule = function () {\n  function MbscEventcalendarModule() {}\n\n  MbscEventcalendarModule.ɵfac = function MbscEventcalendarModule_Factory(t) {\n    return new (t || MbscEventcalendarModule)();\n  };\n\n  MbscEventcalendarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscEventcalendarModule\n  });\n  MbscEventcalendarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MbscCalBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscEventcalendarModule, {\n      declarations: [MbscEventcalendar, MbscEventcalendarComponent],\n      imports: [MbscCalBaseModule],\n      exports: [MbscEventcalendar, MbscEventcalendarComponent]\n    });\n  })();\n\n  return MbscEventcalendarModule;\n}();\n\nvar hasPromise = isBrowser && !!window.Promise;\nvar popupQueue = [];\nvar notificationQueue = [];\nvar activeNotification;\n\nfunction showPopup(popup) {\n  if (!popupQueue.length) {\n    popup.show();\n  }\n\n  popupQueue.push(popup);\n}\n\nfunction showNotification(notification) {\n  var isAny = notificationQueue.length;\n  notificationQueue.push(notification); // Only show notification if no popup is visible\n  // otherwise postpone it until popup is closed\n\n  if (!popupQueue.length) {\n    // If there's a visible notification, hide it.\n    // The notification will be shown after hide animation is complete\n    if (isAny) {\n      notificationQueue[0].hide();\n    } else {\n      // Prevent focus on show for notifications\n      notification.show(false, true);\n    }\n  }\n}\n\nfunction getSettings(queue, settings, resolve, more) {\n  //const active = mobiscroll.activeInstance;\n  return extend$1({\n    display: settings.display || 'center',\n    cssClass: 'mbsc-alert',\n    okText: settings.okText,\n    cancelText: settings.cancelText,\n    context: settings.context,\n    theme: settings.theme,\n    closeOnOverlayTap: false,\n    onBeforeClose: function onBeforeClose() {\n      queue.shift();\n    },\n    onHide: function onHide(ev, inst) {\n      //mobiscroll.activeInstance = active;\n      if (resolve) {\n        resolve(inst._resolve);\n      }\n\n      if (settings.callback) {\n        settings.callback(inst._resolve);\n      }\n\n      if (inst) {\n        inst.destroy();\n      } // Show next\n\n\n      if (popupQueue.length) {\n        popupQueue[0].show();\n      } else if (notificationQueue.length) {\n        // Prevent focus on show for notifications\n        notificationQueue[0].show(false, true);\n      }\n    }\n  }, more);\n}\n\nfunction getMessage(settings) {\n  return (settings.title ? '<h2>' + settings.title + '</h2>' : '') + '<p>' + (settings.message || '') + '</p>';\n}\n\nfunction showAlert(popup, settings, resolve) {\n  var inst = new Popup(popup, getSettings(popupQueue, settings, resolve));\n  showPopup(inst);\n}\n\nfunction showConfirm(popup, settings, resolve) {\n  var inst = new Popup(popup, getSettings(popupQueue, settings, resolve, {\n    buttons: ['cancel', 'ok'],\n    onSet: function onSet() {\n      inst._resolve = true;\n    }\n  }));\n  inst._resolve = false;\n  showPopup(inst);\n}\n\nfunction showPrompt(popup, settings, resolve) {\n  var input, label;\n  var inst = new Popup(popup, getSettings(popupQueue, settings, resolve, {\n    buttons: ['cancel', 'ok'],\n    onMarkupReady: function onMarkupReady(event, inst) {\n      var s = inst.settings;\n      label = inst._markup.find('label');\n      label.addClass('mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : ''));\n      input = inst._markup.find('input')[0];\n      setTimeout(function () {\n        input.focus();\n        input.setSelectionRange(0, input.value.length);\n      }, 300);\n    },\n    onSet: function onSet() {\n      inst._resolve = input.value;\n    }\n  }));\n  inst._resolve = null;\n  showPopup(inst);\n}\n\nfunction showSnackbar(popup, settings, resolve, cssClass, animation) {\n  var notificationTimer;\n  var inst = new Popup(popup, getSettings(notificationQueue, settings, resolve, {\n    display: settings.display || 'bottom',\n    animate: animation,\n    cssClass: (cssClass || 'mbsc-snackbar') + (settings.color ? ' mbsc-' + settings.color : ''),\n    scrollLock: false,\n    focusTrap: false,\n    buttons: [],\n    onMarkupReady: function onMarkupReady(event, inst) {\n      var s = inst.settings;\n\n      var button = inst._markup.find('button');\n\n      button.addClass('mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : ''));\n    },\n    onShow: function onShow(ev, inst) {\n      activeNotification = inst;\n\n      if (settings.duration !== false) {\n        notificationTimer = setTimeout(function () {\n          if (inst) {\n            inst.hide();\n          }\n        }, settings.duration || 3000);\n      }\n\n      if (settings.button) {\n        inst.tap($$1('.mbsc-snackbar-btn', ev.target), function () {\n          inst.hide();\n\n          if (settings.button.action) {\n            settings.button.action.call(this);\n          }\n        });\n      }\n    },\n    onClose: function onClose() {\n      activeNotification = null;\n      clearTimeout(notificationTimer);\n    }\n  }));\n  showNotification(inst);\n}\n\nfunction showToast(popup, settings, resolve) {\n  showSnackbar(popup, settings, resolve, 'mbsc-toast', 'fade');\n}\n\nfunction show(func, popup, settings) {\n  var p;\n\n  if (hasPromise) {\n    p = new Promise(function (resolve) {\n      func(popup, settings, resolve);\n    });\n  } else {\n    func(popup, settings);\n  }\n\n  return p;\n}\n\nmobiscroll.alert = function (settings) {\n  var popup = document.createElement('div');\n  popup.innerHTML = getMessage(settings);\n  return show(showAlert, popup, settings);\n};\n\nmobiscroll.confirm = function (settings) {\n  var popup = document.createElement('div');\n  popup.innerHTML = getMessage(settings);\n  return show(showConfirm, popup, settings);\n};\n\nmobiscroll.prompt = function (settings) {\n  var popup = document.createElement('div');\n  popup.innerHTML = getMessage(settings) + '<label class=\"mbsc-input\">' + (settings.label ? '<span class=\"mbsc-label\">' + settings.label + '</span>' : '') + '<input class=\"mbsc-control\" tabindex=\"0\" type=\"' + (settings.inputType || 'text') + '\" placeholder=\"' + (settings.placeholder || '') + '\" value=\"' + (settings.value || '') + '\">' + '</label>';\n  return show(showPrompt, popup, settings);\n};\n\nmobiscroll.snackbar = function (settings) {\n  var popup = document.createElement('div'),\n      btn = settings.button;\n  popup.innerHTML = '<div class=\"mbsc-snackbar-cont\"><div class=\"mbsc-snackbar-msg\">' + (settings.message || '') + '</div>' + (btn ? '<button class=\"mbsc-snackbar-btn mbsc-btn mbsc-btn-flat\">' + (btn.icon ? '<span class=\"mbsc-ic ' + (btn.text ? 'mbsc-btn-ic ' : '') + 'mbsc-ic-' + btn.icon + '\"></span>' : '') + (btn.text || '') + '</button>' : '') + '</div>';\n  return show(showSnackbar, popup, settings);\n};\n\nmobiscroll.toast = function (settings) {\n  var popup = document.createElement('div');\n  popup.innerHTML = '<div class=\"mbsc-toast-msg\">' + (settings.message || '') + '</div>';\n  return show(showToast, popup, settings);\n};\n\nmobiscroll.notification = {\n  dismiss: function dismiss() {\n    if (activeNotification) {\n      activeNotification.hide();\n    }\n  }\n};\nvar halfBorder$3 = os == 'ios' && majorVersion > 7;\n\nvar Form = function Form(el, settings) {\n  var s,\n      cssClass = '',\n      $ctx = $$1(el),\n      controls = {},\n      that = this;\n\n  function touched() {\n    $ctx.removeClass('mbsc-no-touch');\n  } // Call the parent constructor\n\n\n  Base.call(this, el, settings, true);\n\n  that.refresh = function (shallow) {\n    if (s.enhance) {\n      initControls($ctx, controls, s, shallow);\n    }\n  };\n  /**\r\n   * Form initialization.\r\n   */\n\n\n  that._init = function () {\n    if (!mobiscroll.themes.form[s.theme]) {\n      s.theme = 'mobiscroll';\n    }\n\n    if (!$ctx.hasClass('mbsc-form')) {\n      $ctx.show();\n      listen($ctx[0], 'touchstart', touched, {\n        passive: true\n      });\n    }\n\n    if (cssClass) {\n      $ctx.removeClass(cssClass);\n    } // --- TRIAL SERVER CODE START ---\n\n\n    cssClass = 'mbsc-form mbsc-no-touch mbsc-' + s.theme + (halfBorder$3 ? ' mbsc-form-hb' : '') + (s.baseTheme ? ' mbsc-' + s.baseTheme : '') + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr') + (s.inputStyle == 'box' ? ' mbsc-form-box' : '') + (s.inputStyle == 'outline' ? ' mbsc-form-outline' : ''); // --- TRIAL SERVER CODE END ---\n\n    $ctx.addClass(cssClass).removeClass('mbsc-cloak');\n    that.refresh();\n  };\n  /**\r\n   * Destroys the mobiscroll instance.\r\n   */\n\n\n  that._destroy = function () {\n    $ctx.removeClass(cssClass);\n    unlisten($ctx[0], 'touchstart', touched, {\n      passive: true\n    });\n\n    for (var id in controls) {\n      controls[id].destroy();\n    }\n  };\n  /**\r\n   * Object with the underlying form control instances\r\n   * keys are the element id's\r\n   */\n\n\n  that.controls = controls; // Constructor\n\n  s = that.settings;\n  that.init();\n}; // Extend defaults\n\n\nForm.prototype = {\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _class: 'form',\n  _defaults: {\n    tap: hasGhostClick,\n    stopProp: true,\n    rtl: false,\n    enhance: true\n  }\n};\nclasses.Form = Form; // Init mbsc-form elements on page load\n\nautoInit('[mbsc-enhance],[mbsc-form]', Form, true);\n\nvar MbscForm = function (_super) {\n  __extends(MbscForm, _super);\n\n  function MbscForm(initialElem, _formService, zone) {\n    var _this = _super.call(this, initialElem, zone) || this;\n\n    _this._formService = _formService;\n    _this.enhance = false;\n    return _this;\n  }\n\n  MbscForm.prototype.ngOnInit = function () {\n    this.optionsObj = extend$1({}, this.options, this.inlineOptionsObj);\n    this._formService.options = this.optionsObj;\n  };\n\n  MbscForm.prototype.initControl = function () {\n    var opt = this.options;\n\n    if (opt && opt.enhance === undefined) {\n      opt.enhance = false;\n    }\n\n    var options = extend$1({}, opt, this.inlineOptionsObj);\n    this.instance = new Form(this.rootElem.nativeElement, options);\n  };\n\n  __decorate([Input$1('options'), __metadata(\"design:type\", Object)], MbscForm.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscForm.prototype, \"enhance\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscForm.prototype, \"context\", void 0);\n\n  __decorate([Input$1('input-style'), __metadata(\"design:type\", String)], MbscForm.prototype, \"inputStyle\", void 0);\n\n  __decorate([Input$1('label-style'), __metadata(\"design:type\", String)], MbscForm.prototype, \"labelStyle\", void 0);\n\n  __decorate([ViewChild('rootElement', {\n    static: false\n  }), __metadata(\"design:type\", ElementRef)], MbscForm.prototype, \"rootElem\", void 0);\n\n  MbscForm = __decorate([__metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, NgZone])], MbscForm);\n\n  MbscForm.ɵfac = function MbscForm_Factory(t) {\n    return new (t || MbscForm)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscForm.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscForm,\n    selectors: [[\"mbsc-form\"]],\n    viewQuery: function MbscForm_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rootElem = _t.first);\n      }\n    },\n    inputs: {\n      options: \"options\",\n      enhance: \"enhance\",\n      context: \"context\",\n      inputStyle: [\"input-style\", \"inputStyle\"],\n      labelStyle: [\"label-style\", \"labelStyle\"]\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscOptionsService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 0,\n    consts: [[\"rootElement\", \"\"]],\n    template: function MbscForm_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", null, 0);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscForm;\n}(MbscBase);\n\nvar MbscTextarea = function (_super) {\n  __extends(MbscTextarea, _super);\n\n  function MbscTextarea(initialElem, _formService, _inputService, _control, zone) {\n    var _this = _super.call(this, initialElem, _formService, _inputService, _control, zone) || this;\n\n    _this._inputService = _inputService;\n    _inputService.input = _this;\n    return _this;\n  }\n\n  MbscTextarea.prototype.initControl = function () {\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new TextArea(this._initElem.nativeElement, options);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscTextarea.prototype, \"rows\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTextarea.prototype, \"wrap\", void 0);\n\n  MbscTextarea = __decorate([__param(1, Optional()), __param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscInputService, NgControl, NgZone])], MbscTextarea);\n\n  MbscTextarea.ɵfac = function MbscTextarea_Factory(t) {\n    return new (t || MbscTextarea)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscTextarea.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscTextarea,\n    selectors: [[\"mbsc-textarea\"]],\n    hostAttrs: [1, \"mbsc-control-ng\"],\n    inputs: {\n      rows: \"rows\",\n      wrap: \"wrap\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscInputService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 30,\n    consts: [[1, \"mbsc-input-wrap\"], [3, \"placeholder\", \"ngModel\", \"disabled\", \"readonly\", \"ngModelChange\", \"blur\"], [\"initElement\", \"\"], [\"class\", \"mbsc-err-msg\", 4, \"ngIf\"], [1, \"mbsc-err-msg\"]],\n    template: function MbscTextarea_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 0)(3, \"textarea\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function MbscTextarea_Template_textarea_ngModelChange_3_listener($event) {\n          return ctx.innerValue = $event;\n        })(\"blur\", function MbscTextarea_Template_textarea_blur_3_listener($event) {\n          return ctx.onTouch($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(5, MbscTextarea_span_5_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mbsc-err\", ctx.error)(\"mbsc-input-box\", ctx.inputStyle == \"box\")(\"mbsc-input-outline\", ctx.inputStyle == \"outline\")(\"mbsc-label-stacked\", ctx.labelStyle == \"stacked\")(\"mbsc-label-inline\", ctx.labelStyle == \"inline\")(\"mbsc-label-floating\", ctx.labelStyle == \"floating\");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"placeholder\", ctx.placeholder)(\"ngModel\", ctx.innerValue)(\"disabled\", ctx.disabled)(\"readonly\", ctx._readonly);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"rows\", ctx.rows)(\"wrap\", ctx.wrap)(\"minlength\", ctx.minlength)(\"maxlength\", ctx.maxlength)(\"autocomplete\", ctx.autocomplete)(\"autocapitalize\", ctx.autocapitalize)(\"autocorrect\", ctx.autocorrect)(\"spellcheck\", ctx.spellcheck)(\"autofocus\", ctx.autofocus)(\"required\", ctx.required)(\"data-icon\", ctx.icon ? ctx.icon : null)(\"data-icon-align\", ctx.iconAlign ? ctx.iconAlign : null);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.error && ctx.errorMessage);\n      }\n    },\n    directives: [ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc1.MinLengthValidator, ɵngcc1.MaxLengthValidator, ɵngcc1.RequiredValidator, ɵngcc2.NgIf],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTextarea;\n}(MbscInputBase);\n\nvar MbscDropdown = function (_super) {\n  __extends(MbscDropdown, _super);\n\n  function MbscDropdown(hostElem, formService, _inputService, control, zone) {\n    var _this = _super.call(this, hostElem, formService, _inputService, control, zone) || this;\n\n    _this._inputService = _inputService;\n    _inputService.input = _this;\n    return _this;\n  }\n\n  Object.defineProperty(MbscDropdown.prototype, \"value\", {\n    set: function (v) {\n      var _this = this;\n\n      this._value = v;\n      setTimeout(function () {\n        _this.instance._setText();\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscDropdown.prototype.initControl = function () {\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new Select(this._initElem.nativeElement, options);\n    var that = this;\n    setTimeout(function () {\n      that.instance._setText();\n    });\n  };\n\n  MbscDropdown.prototype.writeValue = function (v) {\n    this._value = v;\n\n    if (this.instance) {\n      var that_1 = this;\n      setTimeout(function () {\n        that_1.instance._setText();\n      });\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDropdown.prototype, \"label\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDropdown.prototype, \"icon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscDropdown.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscDropdown.prototype, \"value\", null);\n\n  __decorate([Input$1('input-style'), __metadata(\"design:type\", String)], MbscDropdown.prototype, \"inputStyle\", void 0);\n\n  __decorate([Input$1('label-style'), __metadata(\"design:type\", String)], MbscDropdown.prototype, \"labelStyle\", void 0);\n\n  MbscDropdown = __decorate([__param(1, Optional()), __param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscInputService, NgControl, NgZone])], MbscDropdown);\n\n  MbscDropdown.ɵfac = function MbscDropdown_Factory(t) {\n    return new (t || MbscDropdown)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscDropdown.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscDropdown,\n    selectors: [[\"mbsc-dropdown\"]],\n    hostAttrs: [1, \"mbsc-control-ng\"],\n    inputs: {\n      value: \"value\",\n      label: \"label\",\n      icon: \"icon\",\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      inputStyle: [\"input-style\", \"inputStyle\"],\n      labelStyle: [\"label-style\", \"labelStyle\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscInputService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 7,\n    vars: 19,\n    consts: [[1, \"mbsc-input-wrap\"], [3, \"ngModel\", \"disabled\", \"ngModelChange\", \"blur\"], [\"initElement\", \"\"], [\"class\", \"mbsc-err-msg\", 4, \"ngIf\"], [1, \"mbsc-err-msg\"]],\n    template: function MbscDropdown_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 0)(3, \"select\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function MbscDropdown_Template_select_ngModelChange_3_listener($event) {\n          return ctx.innerValue = $event;\n        })(\"blur\", function MbscDropdown_Template_select_blur_3_listener($event) {\n          return ctx.onTouch($event);\n        });\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, MbscDropdown_span_6_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mbsc-err\", ctx.error)(\"mbsc-input-box\", ctx.inputStyle == \"box\")(\"mbsc-input-outline\", ctx.inputStyle == \"outline\")(\"mbsc-label-stacked\", ctx.labelStyle == \"stacked\")(\"mbsc-label-inline\", ctx.labelStyle == \"inline\")(\"mbsc-label-floating\", ctx.labelStyle == \"floating\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngModel\", ctx.innerValue)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"data-icon\", ctx.icon ? ctx.icon : null)(\"data-icon-align\", ctx.iconAlign ? ctx.iconAlign : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.error && ctx.errorMessage);\n      }\n    },\n    directives: [ɵngcc1.SelectControlValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc2.NgIf],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscDropdown;\n}(MbscFormValueBase);\n\nvar MbscButton = function (_super) {\n  __extends(MbscButton, _super);\n\n  function MbscButton(hostElem, formService, zone) {\n    var _this = _super.call(this, hostElem, formService, zone) || this;\n\n    _this._flat = false;\n    _this._block = false;\n    _this._outline = false;\n    _this._classesObj = {};\n    _this.type = 'button';\n    return _this;\n  }\n\n  Object.defineProperty(MbscButton.prototype, \"cssClasses\", {\n    get: function () {\n      for (var k in this._classesObj) {\n        delete this._classesObj[k];\n      }\n\n      this._classesObj['mbsc-btn-flat'] = this._flat;\n      this._classesObj['mbsc-btn-block'] = this._block;\n      this._classesObj['mbsc-btn-outline'] = this._outline;\n\n      if (this.classes) {\n        var cssClasses = this.classes.split(' ');\n\n        if (cssClasses.length) {\n          for (var i = 0; i < cssClasses.length; i++) {\n            if (cssClasses[i]) {\n              this._classesObj[cssClasses[i]] = true;\n            }\n          }\n        }\n      }\n\n      if (this.color) {\n        this._classesObj['mbsc-btn-' + this.color] = true;\n      }\n\n      return this._classesObj;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscButton.prototype, \"flat\", {\n    set: function (val) {\n      this._flat = emptyOrTrue(val);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscButton.prototype, \"block\", {\n    set: function (val) {\n      this._block = emptyOrTrue(val);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscButton.prototype, \"outline\", {\n    set: function (val) {\n      this._outline = emptyOrTrue(val);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscButton.prototype.initControl = function () {\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new Button(this._initElem.nativeElement, options);\n  };\n\n  __decorate([Input$1('class'), __metadata(\"design:type\", String)], MbscButton.prototype, \"classes\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscButton.prototype, \"type\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscButton.prototype, \"icon\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscButton.prototype, \"flat\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscButton.prototype, \"block\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscButton.prototype, \"outline\", null);\n\n  MbscButton = __decorate([__param(1, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, NgZone])], MbscButton);\n\n  MbscButton.ɵfac = function MbscButton_Factory(t) {\n    return new (t || MbscButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscButton,\n    selectors: [[\"mbsc-button\"]],\n    inputs: {\n      flat: \"flat\",\n      block: \"block\",\n      outline: \"outline\",\n      classes: [\"class\", \"classes\"],\n      type: \"type\",\n      icon: \"icon\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 5,\n    consts: [[3, \"type\", \"ngClass\", \"disabled\"], [\"initElement\", \"\"]],\n    template: function MbscButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"type\", ctx.type)(\"ngClass\", ctx.cssClasses)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"data-icon\", ctx.icon ? ctx.icon : null);\n      }\n    },\n    directives: [ɵngcc2.NgClass],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscButton;\n}(MbscFormBase);\n\nvar MbscCheckbox = function (_super) {\n  __extends(MbscCheckbox, _super);\n\n  function MbscCheckbox(hostElem, cdr, formService, _inputService, control, zone) {\n    var _this = _super.call(this, hostElem, formService, _inputService, control, zone) || this;\n\n    _this.cdr = cdr;\n    _this._colorClass = {};\n    return _this;\n  }\n\n  Object.defineProperty(MbscCheckbox.prototype, \"colorClass\", {\n    get: function () {\n      for (var k in this._colorClass) {\n        delete this._colorClass[k];\n      }\n\n      if (this.color) {\n        this._colorClass['mbsc-checkbox-' + this.color] = true;\n      }\n\n      if (this.error) {\n        this._colorClass['mbsc-err'] = true;\n      }\n\n      return this._colorClass;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscCheckbox.prototype.initControl = function () {\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new CheckBox(this._initElem.nativeElement, options);\n  };\n\n  MbscCheckbox.prototype.writeValue = function (v) {\n    this._value = v;\n    this.cdr.detectChanges();\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscCheckbox.prototype, \"color\", void 0);\n\n  __decorate([Input$1('input-style'), __metadata(\"design:type\", String)], MbscCheckbox.prototype, \"inputStyle\", void 0);\n\n  __decorate([Input$1('label-style'), __metadata(\"design:type\", String)], MbscCheckbox.prototype, \"labelStyle\", void 0);\n\n  MbscCheckbox = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, ChangeDetectorRef, MbscOptionsService, MbscInputService, NgControl, NgZone])], MbscCheckbox);\n\n  MbscCheckbox.ɵfac = function MbscCheckbox_Factory(t) {\n    return new (t || MbscCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscCheckbox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscCheckbox,\n    selectors: [[\"mbsc-checkbox\"]],\n    hostAttrs: [1, \"mbsc-control-ng\"],\n    inputs: {\n      color: \"color\",\n      inputStyle: [\"input-style\", \"inputStyle\"],\n      labelStyle: [\"label-style\", \"labelStyle\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 7,\n    consts: [[3, \"ngClass\"], [\"type\", \"checkbox\", 3, \"disabled\", \"ngModel\", \"ngModelChange\", \"blur\"], [\"initElement\", \"\"], [\"class\", \"mbsc-err-msg\", 4, \"ngIf\"], [1, \"mbsc-err-msg\"]],\n    template: function MbscCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0)(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function MbscCheckbox_Template_input_ngModelChange_1_listener($event) {\n          return ctx.innerValue = $event;\n        })(\"blur\", function MbscCheckbox_Template_input_blur_1_listener($event) {\n          return ctx.onTouch($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵtemplate(4, MbscCheckbox_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.colorClass);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"ngModel\", ctx.innerValue);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"data-label-style\", ctx.labelStyle)(\"data-input-style\", ctx.inputStyle);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.error && ctx.errorMessage);\n      }\n    },\n    directives: [ɵngcc2.NgClass, ɵngcc1.CheckboxControlValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc2.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscCheckbox;\n}(MbscFormValueBase);\n\nvar MbscSwitch = function (_super) {\n  __extends(MbscSwitch, _super);\n\n  function MbscSwitch(hostElem, zone, _formService, control) {\n    var _this = _super.call(this, hostElem, zone, control, null, null) || this;\n\n    _this._formService = _formService;\n    _this.disabled = false;\n    _this.onChangeEmitter = new EventEmitter();\n    _this._colorClass = {};\n    return _this;\n  }\n\n  Object.defineProperty(MbscSwitch.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscSwitch.prototype, \"colorClass\", {\n    get: function () {\n      for (var k in this._colorClass) {\n        delete this._colorClass[k];\n      }\n\n      if (this.color) {\n        this._colorClass['mbsc-switch-' + this.color] = true;\n      }\n\n      if (this.error) {\n        this._colorClass['mbsc-err'] = true;\n      }\n\n      return this._colorClass;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscSwitch.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      if (this.instance.getVal() !== v) {\n        this.instance.setVal(v, true, false);\n      }\n    }\n  };\n\n  MbscSwitch.prototype.ngOnInit = function () {\n    this._inheritedOptions = this._formService ? this._formService.options : {};\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  MbscSwitch.prototype.initControl = function () {\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new Switch(this._initElem.nativeElement, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1('options'), __metadata(\"design:type\", Object)], MbscSwitch.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSwitch.prototype, \"disabled\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSwitch.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSwitch.prototype, \"color\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSwitch.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSwitch.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1('value'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], MbscSwitch.prototype, \"value\", null);\n\n  __decorate([Output('valueChange'), __metadata(\"design:type\", EventEmitter)], MbscSwitch.prototype, \"onChangeEmitter\", void 0);\n\n  __decorate([ViewChild('initElement', {\n    static: false\n  }), __metadata(\"design:type\", ElementRef)], MbscSwitch.prototype, \"_initElem\", void 0);\n\n  MbscSwitch = __decorate([__param(2, Optional()), __param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscOptionsService, NgControl])], MbscSwitch);\n\n  MbscSwitch.ɵfac = function MbscSwitch_Factory(t) {\n    return new (t || MbscSwitch)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8));\n  };\n\n  MbscSwitch.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscSwitch,\n    selectors: [[\"mbsc-switch\"]],\n    viewQuery: function MbscSwitch_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._initElem = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mbsc-control-ng\"],\n    inputs: {\n      value: \"value\",\n      options: \"options\",\n      disabled: \"disabled\",\n      name: \"name\",\n      color: \"color\",\n      error: \"error\",\n      errorMessage: \"errorMessage\"\n    },\n    outputs: {\n      onChangeEmitter: \"valueChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 6,\n    consts: [[3, \"ngClass\"], [\"class\", \"mbsc-err-msg\", 4, \"ngIf\"], [\"type\", \"checkbox\", \"data-role\", \"switch\", 3, \"disabled\", \"blur\"], [\"initElement\", \"\"], [1, \"mbsc-err-msg\"]],\n    template: function MbscSwitch_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, MbscSwitch_span_2_Template, 2, 1, \"span\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 2, 3);\n        ɵngcc0.ɵɵlistener(\"blur\", function MbscSwitch_Template_input_blur_3_listener($event) {\n          return ctx.onTouch($event);\n        });\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.colorClass);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.error && ctx.errorMessage);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"data-label-style\", ctx.labelStyle)(\"data-input-style\", ctx.inputStyle);\n      }\n    },\n    directives: [ɵngcc2.NgClass, ɵngcc2.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscSwitch;\n}(MbscControlBase);\n\nvar MbscStepper = function (_super) {\n  __extends(MbscStepper, _super);\n\n  function MbscStepper(hostElement, zone, _formService, control) {\n    var _this = _super.call(this, hostElement, zone, control, null, null) || this;\n\n    _this._formService = _formService;\n    _this.min = undefined;\n    _this.max = undefined;\n    _this.step = undefined;\n    _this.val = undefined;\n    _this.disabled = false;\n    _this._colorClass = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscStepper.prototype, \"readonly\", {\n    set: function (val) {\n      this._readonly = emptyOrTrue(val);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscStepper.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscStepper.prototype, \"colorClass\", {\n    get: function () {\n      for (var k in this._colorClass) {\n        delete this._colorClass[k];\n      }\n\n      if (this.color) {\n        this._colorClass['mbsc-stepper-' + this.color] = true;\n      }\n\n      return this._colorClass;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscStepper.prototype.setNewValue = function (v) {\n    if (this.instance && this.instance.getVal() !== v) {\n      this.instance.setVal(v, true, false);\n    }\n  };\n\n  MbscStepper.prototype.ngOnInit = function () {\n    this._inheritedOptions = this._formService ? this._formService.options : {};\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  MbscStepper.prototype.initControl = function () {\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new Stepper(this._initElem.nativeElement, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscStepper.prototype, \"readonly\", null);\n\n  __decorate([Input$1('options'), __metadata(\"design:type\", Object)], MbscStepper.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], MbscStepper.prototype, \"value\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscStepper.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscStepper.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscStepper.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscStepper.prototype, \"step\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscStepper.prototype, \"val\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscStepper.prototype, \"disabled\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscStepper.prototype, \"color\", void 0);\n\n  __decorate([Output('valueChange'), __metadata(\"design:type\", EventEmitter)], MbscStepper.prototype, \"onChangeEmitter\", void 0);\n\n  __decorate([ViewChild('initElement', {\n    static: false\n  }), __metadata(\"design:type\", ElementRef)], MbscStepper.prototype, \"_initElem\", void 0);\n\n  MbscStepper = __decorate([__param(2, Optional()), __param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscOptionsService, NgControl])], MbscStepper);\n\n  MbscStepper.ɵfac = function MbscStepper_Factory(t) {\n    return new (t || MbscStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8));\n  };\n\n  MbscStepper.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscStepper,\n    selectors: [[\"mbsc-stepper\"]],\n    viewQuery: function MbscStepper_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._initElem = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mbsc-control-ng\"],\n    inputs: {\n      readonly: \"readonly\",\n      value: \"value\",\n      options: \"options\",\n      name: \"name\",\n      min: \"min\",\n      max: \"max\",\n      step: \"step\",\n      val: \"val\",\n      disabled: \"disabled\",\n      color: \"color\"\n    },\n    outputs: {\n      onChangeEmitter: \"valueChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 10,\n    consts: [[3, \"ngClass\"], [\"data-role\", \"stepper\", 3, \"disabled\", \"readonly\"], [\"initElement\", \"\"]],\n    template: function MbscStepper_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelement(2, \"input\", 1, 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.colorClass);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"readonly\", ctx._readonly);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"min\", ctx.min !== undefined ? ctx.min : null)(\"max\", ctx.max !== undefined ? ctx.max : null)(\"step\", ctx.step !== undefined ? ctx.step : null)(\"data-val\", ctx.val ? ctx.val : null)(\"data-label-style\", ctx.labelStyle)(\"data-input-style\", ctx.inputStyle);\n      }\n    },\n    directives: [ɵngcc2.NgClass],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscStepper;\n}(MbscControlBase);\n\nvar MbscProgress = function (_super) {\n  __extends(MbscProgress, _super);\n\n  function MbscProgress(hostElement, zone, _formService, control) {\n    var _this = _super.call(this, hostElement, zone, control, null, null) || this;\n\n    _this._formService = _formService;\n    _this.max = undefined;\n    _this.icon = undefined;\n    _this.iconAlign = undefined;\n    _this.val = undefined;\n    _this.disabled = false;\n    _this._colorClass = {};\n    return _this;\n  }\n\n  Object.defineProperty(MbscProgress.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscProgress.prototype, \"dataStepLabels\", {\n    get: function () {\n      if (typeof this.stepLabels === 'string') {\n        return this.stepLabels;\n      } else {\n        return null;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscProgress.prototype, \"colorClass\", {\n    get: function () {\n      for (var k in this._colorClass) {\n        delete this._colorClass[k];\n      }\n\n      if (this.color) {\n        this._colorClass['mbsc-progress-' + this.color] = true;\n      }\n\n      return this._colorClass;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscProgress.prototype.setNewValue = function (v) {\n    if (this.instance && this.instance.getVal() !== v) {\n      this.instance.setVal(v, true, false);\n    }\n  };\n\n  MbscProgress.prototype.ngOnInit = function () {\n    this._inheritedOptions = this._formService ? this._formService.options : {};\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  MbscProgress.prototype.initControl = function () {\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new Progress(this._initElem.nativeElement, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1('options'), __metadata(\"design:type\", Object)], MbscProgress.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], MbscProgress.prototype, \"value\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscProgress.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscProgress.prototype, \"icon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscProgress.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscProgress.prototype, \"val\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscProgress.prototype, \"disabled\", void 0);\n\n  __decorate([Input$1('step-labels'), __metadata(\"design:type\", Array)], MbscProgress.prototype, \"stepLabels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscProgress.prototype, \"color\", void 0);\n\n  __decorate([ViewChild('initElement', {\n    static: false\n  }), __metadata(\"design:type\", ElementRef)], MbscProgress.prototype, \"_initElem\", void 0);\n\n  MbscProgress = __decorate([__param(2, Optional()), __param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscOptionsService, NgControl])], MbscProgress);\n\n  MbscProgress.ɵfac = function MbscProgress_Factory(t) {\n    return new (t || MbscProgress)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8));\n  };\n\n  MbscProgress.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscProgress,\n    selectors: [[\"mbsc-progress\"]],\n    viewQuery: function MbscProgress_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._initElem = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mbsc-control-ng\"],\n    inputs: {\n      value: \"value\",\n      options: \"options\",\n      max: \"max\",\n      icon: \"icon\",\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      val: \"val\",\n      disabled: \"disabled\",\n      stepLabels: [\"step-labels\", \"stepLabels\"],\n      color: \"color\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 8,\n    consts: [[3, \"ngClass\"], [\"initElement\", \"\"]],\n    template: function MbscProgress_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelement(2, \"progress\", null, 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.colorClass);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"data-step-labels\", ctx.dataStepLabels)(\"data-icon\", ctx.icon ? ctx.icon : null)(\"data-icon-align\", ctx.iconAlign ? ctx.iconAlign : null)(\"data-label-style\", ctx.labelStyle)(\"data-input-style\", ctx.inputStyle)(\"max\", ctx.max !== undefined ? ctx.max : null)(\"data-val\", ctx.val !== undefined ? ctx.val : null);\n      }\n    },\n    directives: [ɵngcc2.NgClass],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscProgress;\n}(MbscControlBase);\n\nvar groupName = 1;\n\nvar MbscRadioService = function () {\n  function MbscRadioService() {\n    this._lastValue = null;\n    this._valueObservable = new Observable();\n  }\n\n  Object.defineProperty(MbscRadioService.prototype, \"name\", {\n    get: function () {\n      if (!this._name) {\n        this._name = 'mbsc-radio-group-' + groupName++;\n      }\n\n      return this._name;\n    },\n    set: function (n) {\n      this._name = n;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscRadioService.prototype, \"multiSelect\", {\n    get: function () {\n      return this._multiSelect;\n    },\n    set: function (v) {\n      this._multiSelect = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscRadioService.prototype.onValueChanged = function () {\n    return this._valueObservable;\n  };\n\n  MbscRadioService.prototype.changeValue = function (v) {\n    this._valueObservable.next(v);\n\n    this._lastValue = v;\n  };\n\n  Object.defineProperty(MbscRadioService.prototype, \"getLastValue\", {\n    get: function () {\n      return this._lastValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscRadioService.prototype, \"color\", {\n    get: function () {\n      return this._color;\n    },\n    set: function (v) {\n      this._color = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscRadioService.ɵfac = function MbscRadioService_Factory(t) {\n    return new (t || MbscRadioService)();\n  };\n\n  MbscRadioService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MbscRadioService,\n    factory: function (t) {\n      return MbscRadioService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscRadioService;\n}();\n\nvar MbscRadioGroupBase = function (_super) {\n  __extends(MbscRadioGroupBase, _super);\n\n  function MbscRadioGroupBase(hostElement, formService, _inputService, _radioService, control, zone) {\n    var _this = _super.call(this, hostElement, formService, _inputService, control, zone) || this;\n\n    _this._radioService = _radioService;\n    _this.valueObserver = _this._radioService.onValueChanged().subscribe(function (v) {\n      _this.innerValue = v;\n\n      _this.onTouch();\n    });\n    return _this;\n  }\n\n  Object.defineProperty(MbscRadioGroupBase.prototype, \"value\", {\n    set: function (v) {\n      this._value = v;\n\n      this._radioService.changeValue(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscRadioGroupBase.prototype.ngOnInit = function () {\n    _super.prototype.ngOnInit.call(this);\n\n    if (this.name) {\n      this._radioService.name = this.name;\n    }\n\n    if (this.color) {\n      this._radioService.color = this.color;\n    }\n  };\n\n  MbscRadioGroupBase.prototype.writeValue = function (v) {\n    this._value = v;\n\n    this._radioService.changeValue(v);\n  };\n\n  MbscRadioGroupBase.prototype.updateOptions = function () {};\n\n  MbscRadioGroupBase.prototype.ngOnDestroy = function () {\n    this._radioService.onValueChanged().unsubscribe(this.valueObserver);\n\n    _super.prototype.ngOnDestroy.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRadioGroupBase.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscRadioGroupBase.prototype, \"value\", null);\n\n  MbscRadioGroupBase = __decorate([__param(1, Optional()), __param(2, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscInputService, MbscRadioService, NgControl, NgZone])], MbscRadioGroupBase);\n\n  MbscRadioGroupBase.ɵfac = function MbscRadioGroupBase_Factory(t) {\n    return new (t || MbscRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscRadioGroupBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscRadioGroupBase,\n    selectors: [[\"\", \"mbsc-rg-b\", \"\"]],\n    inputs: {\n      value: \"value\",\n      name: \"name\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscRadioGroupBase;\n}(MbscFormValueBase);\n\nvar MbscRadioGroup = function (_super) {\n  __extends(MbscRadioGroup, _super);\n\n  function MbscRadioGroup(hostElement, formService, _inputService, radioService, control, zone) {\n    return _super.call(this, hostElement, formService, _inputService, radioService, control, zone) || this;\n  }\n\n  MbscRadioGroup = __decorate([__param(1, Optional()), __param(2, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscInputService, MbscRadioService, NgControl, NgZone])], MbscRadioGroup);\n\n  MbscRadioGroup.ɵfac = function MbscRadioGroup_Factory(t) {\n    return new (t || MbscRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscRadioGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscRadioGroup,\n    selectors: [[\"mbsc-radio-group\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscRadioService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscRadioGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscRadioGroup;\n}(MbscRadioGroupBase);\n\nvar MbscRadio = function (_super) {\n  __extends(MbscRadio, _super);\n\n  function MbscRadio(hostElement, formService, _radioService, zone) {\n    var _this = _super.call(this, hostElement, formService, zone) || this;\n\n    _this._radioService = _radioService;\n    _this._colorClass = {};\n    var v = _this._radioService.getLastValue;\n\n    if (v !== null) {\n      _this.modelValue = v;\n    }\n\n    _this.valueObserver = _this._radioService.onValueChanged().subscribe(function (v) {\n      _this.modelValue = v;\n    });\n    return _this;\n  }\n\n  Object.defineProperty(MbscRadio.prototype, \"checked\", {\n    get: function () {\n      return this.value == this.modelValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscRadio.prototype, \"colorClass\", {\n    get: function () {\n      for (var k in this._colorClass) {\n        delete this._colorClass[k];\n      }\n\n      if (this.color) {\n        this._colorClass['mbsc-radio-' + this.color] = true;\n      }\n\n      if (this.error) {\n        this._colorClass['mbsc-err'] = true;\n      }\n\n      return this._colorClass;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscRadio.prototype.clicked = function (e) {\n    this._radioService.changeValue(this.value);\n  };\n\n  MbscRadio.prototype.initControl = function () {\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new Radio(this._initElem.nativeElement, options);\n  };\n\n  MbscRadio.prototype.ngOnInit = function () {\n    _super.prototype.ngOnInit.call(this);\n\n    this.name = this._radioService.name;\n    this.color = this._radioService.color;\n  };\n\n  MbscRadio.prototype.ngOnDestroy = function () {\n    this._radioService.onValueChanged().unsubscribe(this.valueObserver);\n\n    _super.prototype.ngOnDestroy.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscRadio.prototype, \"value\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscRadio.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRadio.prototype, \"errorMessage\", void 0);\n\n  MbscRadio = __decorate([__param(1, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscRadioService, NgZone])], MbscRadio);\n\n  MbscRadio.ɵfac = function MbscRadio_Factory(t) {\n    return new (t || MbscRadio)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscRadio.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscRadio,\n    selectors: [[\"mbsc-radio\"]],\n    hostAttrs: [1, \"mbsc-control-ng\"],\n    inputs: {\n      value: \"value\",\n      error: \"error\",\n      errorMessage: \"errorMessage\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 7,\n    consts: [[3, \"ngClass\"], [\"type\", \"radio\", 3, \"value\", \"checked\", \"disabled\", \"click\"], [\"initElement\", \"\"], [\"class\", \"mbsc-err-msg\", 4, \"ngIf\"], [1, \"mbsc-err-msg\"]],\n    template: function MbscRadio_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0)(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"click\", function MbscRadio_Template_input_click_1_listener($event) {\n          return ctx.clicked($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵtemplate(4, MbscRadio_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.colorClass);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"value\", ctx.value)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.error && ctx.errorMessage);\n      }\n    },\n    directives: [ɵngcc2.NgClass, ɵngcc2.NgIf],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscRadio;\n}(MbscFormBase);\n\nvar MbscSegmentedGroup = function (_super) {\n  __extends(MbscSegmentedGroup, _super);\n\n  function MbscSegmentedGroup(hostElement, formService, _inputService, radioService, control, zone) {\n    var _this = _super.call(this, hostElement, formService, _inputService, radioService, control, zone) || this;\n\n    _this.select = 'single';\n    return _this;\n  }\n\n  Object.defineProperty(MbscSegmentedGroup.prototype, \"multiSelect\", {\n    get: function () {\n      return this.select == 'multiple';\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscSegmentedGroup.prototype.ngOnInit = function () {\n    _super.prototype.ngOnInit.call(this);\n\n    this._radioService.multiSelect = this.multiSelect;\n\n    if (this.color) {\n      this._radioService.color = this.color;\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSegmentedGroup.prototype, \"select\", void 0);\n\n  MbscSegmentedGroup = __decorate([__param(1, Optional()), __param(2, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscInputService, MbscRadioService, NgControl, NgZone])], MbscSegmentedGroup);\n\n  MbscSegmentedGroup.ɵfac = function MbscSegmentedGroup_Factory(t) {\n    return new (t || MbscSegmentedGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscSegmentedGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscSegmentedGroup,\n    selectors: [[\"mbsc-segmented-group\"]],\n    inputs: {\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscRadioService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"mbsc-segmented\", \"mbsc-no-touch\"]],\n    template: function MbscSegmentedGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscSegmentedGroup;\n}(MbscRadioGroupBase);\n\nvar MbscSegmented = function (_super) {\n  __extends(MbscSegmented, _super);\n\n  function MbscSegmented(hostElement, formService, _radioService, zone) {\n    var _this = _super.call(this, hostElement, formService, zone) || this;\n\n    _this._radioService = _radioService;\n    _this.checkedChange = new EventEmitter();\n    var v = _this._radioService.getLastValue;\n\n    if (v !== null) {\n      _this.modelValue = v;\n    }\n\n    _this.valueObserver = _this._radioService.onValueChanged().subscribe(function (v) {\n      _this.modelValue = v;\n    });\n    return _this;\n  }\n\n  Object.defineProperty(MbscSegmented.prototype, \"isChecked\", {\n    get: function () {\n      if (this.multiSelect) {\n        if (this.checked !== undefined) {\n          return this.checked;\n        } else {\n          return this.modelValue && this.modelValue.includes(this.value);\n        }\n      } else {\n        return this.value == this.modelValue;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscSegmented.prototype.clicked = function (e) {\n    if (this.multiSelect && this.checked !== undefined) {\n      this.checkedChange.emit(!!!this.checked);\n    } else {\n      if (this.multiSelect) {\n        if (this.modelValue.includes(this.value)) {\n          var i = this.modelValue.indexOf(this.value);\n          this.modelValue.splice(i, 1);\n        } else {\n          this.modelValue.push(this.value);\n        }\n\n        this._radioService.changeValue(this.modelValue);\n      } else {\n        this._radioService.changeValue(this.value);\n      }\n    }\n  };\n\n  Object.defineProperty(MbscSegmented.prototype, \"cssClass\", {\n    get: function () {\n      var cl = 'mbsc-segmented-item';\n\n      if (this.color) {\n        cl += ' mbsc-segmented-' + this.color;\n      }\n\n      return cl;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscSegmented.prototype.initControl = function () {\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new SegmentedItem(this._initElem.nativeElement, options);\n  };\n\n  MbscSegmented.prototype.ngOnInit = function () {\n    _super.prototype.ngOnInit.call(this);\n\n    this.name = this._radioService.name;\n    this.multiSelect = this._radioService.multiSelect;\n    this.color = this._radioService.color;\n  };\n\n  MbscSegmented.prototype.ngOnDestroy = function () {\n    this._radioService.onValueChanged().unsubscribe(this.valueObserver);\n\n    _super.prototype.ngOnDestroy.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSegmented.prototype, \"icon\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscSegmented.prototype, \"value\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscSegmented.prototype, \"checked\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscSegmented.prototype, \"checkedChange\", void 0);\n\n  MbscSegmented = __decorate([__param(1, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, MbscRadioService, NgZone])], MbscSegmented);\n\n  MbscSegmented.ɵfac = function MbscSegmented_Factory(t) {\n    return new (t || MbscSegmented)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscSegmented.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscSegmented,\n    selectors: [[\"mbsc-segmented\"]],\n    hostVars: 2,\n    hostBindings: function MbscSegmented_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.cssClass);\n      }\n    },\n    inputs: {\n      icon: \"icon\",\n      value: \"value\",\n      checked: \"checked\"\n    },\n    outputs: {\n      checkedChange: \"checkedChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 8,\n    consts: [[1, \"mbsc-segmented-item-ready\"], [\"data-role\", \"segmented\", 3, \"type\", \"value\", \"checked\", \"disabled\", \"click\"], [\"initElement\", \"\"], [1, \"mbsc-segmented-content\"], [3, \"class\", 4, \"ngIf\"]],\n    template: function MbscSegmented_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0)(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"click\", function MbscSegmented_Template_input_click_1_listener($event) {\n          return ctx.clicked($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(4, MbscSegmented_span_4_Template, 1, 3, \"span\", 4);\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"type\", ctx.multiSelect ? \"checkbox\" : \"radio\")(\"value\", ctx.value)(\"checked\", ctx.isChecked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"data-icon\", ctx.icon ? ctx.icon : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.icon);\n      }\n    },\n    directives: [ɵngcc2.NgIf],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscSegmented;\n}(MbscFormBase);\n\nvar MbscSlider = function (_super) {\n  __extends(MbscSlider, _super);\n\n  function MbscSlider(hostElement, _formService, zone, control) {\n    var _this = _super.call(this, hostElement, zone, control, null, null) || this;\n\n    _this._formService = _formService;\n    _this._dummy = undefined;\n    _this._needsTimeout = false;\n    _this.disabled = false;\n    _this._colorClass = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscSlider.prototype, \"isMulti\", {\n    get: function () {\n      return this._lastValue instanceof Array;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscSlider.prototype, \"dummyArray\", {\n    get: function () {\n      if (!this._dummy || this.isMulti && this._lastValue && this._lastValue.length && this._dummy.length !== this._lastValue.length) {\n        this._dummy = Array(this.isMulti ? this._lastValue.length : 1).fill(0).map(function (x, i) {\n          return i;\n        });\n      }\n\n      return this._dummy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscSlider.prototype, \"dataStepLabels\", {\n    get: function () {\n      if (typeof this.stepLabels === 'string') {\n        return this.stepLabels;\n      } else {\n        return null;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscSlider.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscSlider.prototype, \"colorClass\", {\n    get: function () {\n      for (var k in this._colorClass) {\n        delete this._colorClass[k];\n      }\n\n      if (this.color) {\n        this._colorClass['mbsc-slider-' + this.color] = true;\n      }\n\n      return this._colorClass;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscSlider.prototype.reInitialize = function () {\n    var _this = this;\n\n    this.instance.destroy();\n    this.setElement();\n    this.inputElements.forEach(function (input, index) {\n      if (index) {\n        _this.handleChange(input.nativeElement);\n      }\n    });\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new Slider(this.inputElements.first.nativeElement, options);\n  };\n\n  MbscSlider.prototype.setNewValue = function (v) {\n    var _this = this;\n\n    this._lastValue = v;\n\n    if (this.instance) {\n      var innerValue = this.instance.getVal();\n\n      if (this.isMulti && (!innerValue || innerValue.length != v.length)) {\n        setTimeout(function () {\n          _this.reInitialize();\n\n          _this.instance.setVal(_this._lastValue, true, false);\n        });\n      } else {\n        var changed = this.isMulti && !deepEqualsArray(innerValue, v) || !this.isMulti && innerValue !== v;\n\n        if (changed) {\n          this.instance.setVal(v, true, false);\n        }\n      }\n    }\n  };\n\n  MbscSlider.prototype.ngOnInit = function () {\n    this._inheritedOptions = this._formService ? this._formService.options : {};\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  MbscSlider.prototype.initControl = function () {\n    var _this = this;\n\n    this.inputElements.forEach(function (input, index) {\n      if (index) {\n        _this.handleChange(input.nativeElement);\n      }\n    });\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new Slider(this.inputElements.first.nativeElement, options);\n\n    if (this.initialValue !== undefined && this.initialValue !== null) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1('options'), __metadata(\"design:type\", Object)], MbscSlider.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSlider.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSlider.prototype, \"tooltip\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSlider.prototype, \"highlight\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSlider.prototype, \"live\", void 0);\n\n  __decorate([Input$1('value-template'), __metadata(\"design:type\", String)], MbscSlider.prototype, \"valueTemplate\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSlider.prototype, \"icon\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSlider.prototype, \"val\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscSlider.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscSlider.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscSlider.prototype, \"step\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSlider.prototype, \"disabled\", void 0);\n\n  __decorate([Input$1('step-labels'), __metadata(\"design:type\", Object)], MbscSlider.prototype, \"stepLabels\", void 0);\n\n  __decorate([Input$1('value'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscSlider.prototype, \"value\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSlider.prototype, \"color\", void 0);\n\n  __decorate([Output('valueChange'), __metadata(\"design:type\", EventEmitter)], MbscSlider.prototype, \"onChangeEmitter\", void 0);\n\n  __decorate([ViewChildren('inputElements'), __metadata(\"design:type\", QueryList)], MbscSlider.prototype, \"inputElements\", void 0);\n\n  MbscSlider = __decorate([__param(1, Optional()), __param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, NgZone, NgControl])], MbscSlider);\n\n  MbscSlider.ɵfac = function MbscSlider_Factory(t) {\n    return new (t || MbscSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8));\n  };\n\n  MbscSlider.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscSlider,\n    selectors: [[\"mbsc-slider\"]],\n    viewQuery: function MbscSlider_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c3, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElements = _t);\n      }\n    },\n    hostAttrs: [1, \"mbsc-control-ng\"],\n    inputs: {\n      value: \"value\",\n      options: \"options\",\n      name: \"name\",\n      tooltip: \"tooltip\",\n      highlight: \"highlight\",\n      live: \"live\",\n      valueTemplate: [\"value-template\", \"valueTemplate\"],\n      icon: \"icon\",\n      val: \"val\",\n      max: \"max\",\n      min: \"min\",\n      step: \"step\",\n      disabled: \"disabled\",\n      stepLabels: [\"step-labels\", \"stepLabels\"],\n      color: \"color\"\n    },\n    outputs: {\n      onChangeEmitter: \"valueChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 2,\n    consts: [[3, \"ngClass\"], [\"type\", \"range\", 3, \"disabled\", \"blur\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"range\", 3, \"disabled\", \"blur\"], [\"inputElements\", \"\"]],\n    template: function MbscSlider_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, MbscSlider_input_2_Template, 2, 15, \"input\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.colorClass);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.dummyArray);\n      }\n    },\n    directives: [ɵngcc2.NgClass, ɵngcc2.NgForOf],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscSlider;\n}(MbscControlBase);\n\nvar MbscRating = function (_super) {\n  __extends(MbscRating, _super);\n\n  function MbscRating(hostElem, zone, formService, control) {\n    var _this = _super.call(this, hostElem, zone, control, null, null) || this;\n\n    _this.formService = formService;\n    _this.min = undefined;\n    _this.max = undefined;\n    _this.step = undefined;\n    _this.disabled = false;\n    _this.val = undefined;\n    _this.onChangeEmitter = new EventEmitter();\n    _this._colorClass = {};\n    return _this;\n  }\n\n  Object.defineProperty(MbscRating.prototype, \"readonly\", {\n    set: function (val) {\n      this._readonly = emptyOrTrue(val);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscRating.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscRating.prototype, \"colorClass\", {\n    get: function () {\n      for (var k in this._colorClass) {\n        delete this._colorClass[k];\n      }\n\n      if (this.color) {\n        this._colorClass['mbsc-rating-' + this.color] = true;\n      }\n\n      return this._colorClass;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscRating.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      if (this.instance.getVal() !== v) {\n        this.instance.setVal(v, true, false);\n      }\n    }\n  };\n\n  MbscRating.prototype.ngOnInit = function () {\n    this._inheritedOptions = this.formService ? this.formService.options : {};\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  MbscRating.prototype.initControl = function () {\n    var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);\n    this.instance = new Rating(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscRating.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRating.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscRating.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscRating.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscRating.prototype, \"step\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscRating.prototype, \"disabled\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRating.prototype, \"empty\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRating.prototype, \"filled\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscRating.prototype, \"readonly\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRating.prototype, \"val\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRating.prototype, \"template\", void 0);\n\n  __decorate([Input$1('value'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], MbscRating.prototype, \"value\", null);\n\n  __decorate([Output('valueChange'), __metadata(\"design:type\", EventEmitter)], MbscRating.prototype, \"onChangeEmitter\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRating.prototype, \"color\", void 0);\n\n  MbscRating = __decorate([__param(2, Optional()), __param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscOptionsService, NgControl])], MbscRating);\n\n  MbscRating.ɵfac = function MbscRating_Factory(t) {\n    return new (t || MbscRating)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8));\n  };\n\n  MbscRating.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscRating,\n    selectors: [[\"mbsc-rating\"]],\n    hostAttrs: [1, \"mbsc-control-ng\"],\n    inputs: {\n      readonly: \"readonly\",\n      value: \"value\",\n      options: \"options\",\n      name: \"name\",\n      min: \"min\",\n      max: \"max\",\n      step: \"step\",\n      disabled: \"disabled\",\n      empty: \"empty\",\n      filled: \"filled\",\n      val: \"val\",\n      template: \"template\",\n      color: \"color\"\n    },\n    outputs: {\n      onChangeEmitter: \"valueChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 13,\n    consts: [[3, \"ngClass\"], [\"type\", \"rating\", \"data-role\", \"rating\", 3, \"disabled\", \"readonly\", \"blur\"]],\n    template: function MbscRating_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementStart(2, \"input\", 1);\n        ɵngcc0.ɵɵlistener(\"blur\", function MbscRating_Template_input_blur_2_listener($event) {\n          return ctx.onTouch($event);\n        });\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.colorClass);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"readonly\", ctx._readonly);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"min\", ctx.min !== undefined ? ctx.min : null)(\"max\", ctx.max !== undefined ? ctx.max : null)(\"step\", ctx.step !== undefined ? ctx.step : null)(\"data-val\", ctx.val ? ctx.val : null)(\"data-template\", ctx.template ? ctx.template : null)(\"data-empty\", ctx.empty)(\"data-filled\", ctx.filled)(\"data-label-style\", ctx.labelStyle)(\"data-input-style\", ctx.inputStyle);\n      }\n    },\n    directives: [ɵngcc2.NgClass],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscRating;\n}(MbscControlBase);\n\nvar MbscFormGroup = function () {\n  function MbscFormGroup(initialElem) {\n    this.initialElem = initialElem;\n    this.collapsible = null;\n    this._open = false;\n    this.instance = null;\n    this.element = null;\n    this.element = initialElem;\n  }\n\n  Object.defineProperty(MbscFormGroup.prototype, \"open\", {\n    set: function (v) {\n      if (this._open != v && this.instance) {\n        if (v) {\n          this.instance.show();\n        } else {\n          this.instance.hide();\n        }\n      }\n\n      this._open = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscFormGroup.prototype.emptyOrTrue = function (v) {\n    return emptyOrTrue(v);\n  };\n\n  MbscFormGroup.prototype.ngAfterViewInit = function () {\n    if (this.collapsible !== null) {\n      this.instance = new CollapsibleBase(this.element.nativeElement, {\n        isOpen: this._open !== false\n      });\n    }\n  };\n\n  MbscFormGroup.prototype.ngOnDestroy = function () {\n    if (this.instance) {\n      this.instance.destroy();\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscFormGroup.prototype, \"collapsible\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], MbscFormGroup.prototype, \"open\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscFormGroup.prototype, \"inset\", void 0);\n\n  MbscFormGroup = __decorate([__metadata(\"design:paramtypes\", [ElementRef])], MbscFormGroup);\n\n  MbscFormGroup.ɵfac = function MbscFormGroup_Factory(t) {\n    return new (t || MbscFormGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MbscFormGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscFormGroup,\n    selectors: [[\"mbsc-form-group\"]],\n    hostVars: 4,\n    hostBindings: function MbscFormGroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mbsc-form-group-inset\", ctx.emptyOrTrue(ctx.inset))(\"mbsc-form-group\", !ctx.emptyOrTrue(ctx.inset));\n      }\n    },\n    inputs: {\n      collapsible: \"collapsible\",\n      open: \"open\",\n      inset: \"inset\"\n    },\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscFormGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscFormGroup;\n}();\n\nvar MbscFormGroupTitle = function () {\n  function MbscFormGroupTitle() {}\n\n  MbscFormGroupTitle.ɵfac = function MbscFormGroupTitle_Factory(t) {\n    return new (t || MbscFormGroupTitle)();\n  };\n\n  MbscFormGroupTitle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscFormGroupTitle,\n    selectors: [[\"mbsc-form-group-title\"]],\n    hostVars: 2,\n    hostBindings: function MbscFormGroupTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mbsc-form-group-title\", true);\n      }\n    },\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscFormGroupTitle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscFormGroupTitle;\n}();\n\nvar MbscFormGroupContent = function () {\n  function MbscFormGroupContent() {}\n\n  MbscFormGroupContent.ɵfac = function MbscFormGroupContent_Factory(t) {\n    return new (t || MbscFormGroupContent)();\n  };\n\n  MbscFormGroupContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscFormGroupContent,\n    selectors: [[\"mbsc-form-group-content\"]],\n    hostVars: 2,\n    hostBindings: function MbscFormGroupContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mbsc-form-group-content\", true);\n      }\n    },\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscFormGroupContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscFormGroupContent;\n}();\n\nvar MbscAccordion = function () {\n  function MbscAccordion() {}\n\n  MbscAccordion.ɵfac = function MbscAccordion_Factory(t) {\n    return new (t || MbscAccordion)();\n  };\n\n  MbscAccordion.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscAccordion,\n    selectors: [[\"mbsc-accordion\"]],\n    hostVars: 2,\n    hostBindings: function MbscAccordion_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mbsc-accordion\", true);\n      }\n    },\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscAccordion_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscAccordion;\n}();\n\nvar comp$3 = [MbscForm, MbscTextarea, MbscDropdown, MbscButton, MbscCheckbox, MbscSwitch, MbscStepper, MbscProgress, MbscRadioGroup, MbscRadioGroupBase, MbscRadio, MbscSegmentedGroup, MbscSegmented, MbscSlider, MbscRating, MbscFormGroup, MbscFormGroupTitle, MbscFormGroupContent, MbscAccordion];\n\nvar MbscFormsModule = function () {\n  function MbscFormsModule() {}\n\n  MbscFormsModule.ɵfac = function MbscFormsModule_Factory(t) {\n    return new (t || MbscFormsModule)();\n  };\n\n  MbscFormsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscFormsModule\n  });\n  MbscFormsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[FormsModule, CommonModule, MbscBaseModule, MbscInputModule], MbscInputModule]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscFormsModule, {\n      declarations: function () {\n        return [MbscForm, MbscTextarea, MbscDropdown, MbscButton, MbscCheckbox, MbscSwitch, MbscStepper, MbscProgress, MbscRadioGroup, MbscRadioGroupBase, MbscRadio, MbscSegmentedGroup, MbscSegmented, MbscSlider, MbscRating, MbscFormGroup, MbscFormGroupTitle, MbscFormGroupContent, MbscAccordion];\n      },\n      imports: function () {\n        return [FormsModule, CommonModule, MbscBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscForm, MbscTextarea, MbscDropdown, MbscButton, MbscCheckbox, MbscSwitch, MbscStepper, MbscProgress, MbscRadioGroup, MbscRadioGroupBase, MbscRadio, MbscSegmentedGroup, MbscSegmented, MbscSlider, MbscRating, MbscFormGroup, MbscFormGroupTitle, MbscFormGroupContent, MbscAccordion, MbscInputModule, MbscInput];\n      }\n    });\n  })();\n\n  return MbscFormsModule;\n}();\n\nvar defaults$5 = {\n  invalid: [],\n  showInput: true,\n  inputClass: '',\n  itemSelector: 'li'\n};\n\nvar List = function List(inst) {\n  var currLevel,\n      input,\n      prevent,\n      w,\n      orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, defaults$5, orig),\n      layout = s.layout || (/top|bottom/.test(s.display) ? 'liquid' : ''),\n      isLiquid = layout == 'liquid',\n      origReadOnly = s.readonly,\n      elm = $$1(this),\n      id = this.id + '_dummy',\n      lvl = 0,\n      currWheelVector = [],\n      wa = s.wheelArray || createWheelArray(elm),\n      fwv = firstWheelVector(wa);\n\n  function getDepth(tree, l) {\n    var i;\n    lvl = l > lvl ? l : lvl;\n\n    for (i = 0; i < tree.length; i++) {\n      if (tree[i].children) {\n        getDepth(tree[i].children, l + 1);\n      }\n    }\n  }\n  /**\r\n   * Disables the invalid items on the wheels\r\n   * @param {Object} dw - the jQuery mobiscroll object\r\n   * @param {Number} nrWheels - the number of the current wheels\r\n   * @param {Array} whArray - The wheel array objects containing the wheel tree\r\n   * @param {Array} whVector - the wheel vector containing the current keys\r\n   */\n\n\n  function getDisabled(nrWheels, whArray, whVector) {\n    var i = 0,\n        disabled = [];\n\n    while (i < nrWheels) {\n      disabled[i] = getInvalidKeys(whVector, i, whArray);\n      i++;\n    }\n\n    return disabled;\n  }\n  /**\r\n   * Returns the invalid keys of one wheel as an array\r\n   * @param {Array} whVector - the wheel vector used to search for the wheel in the wheel array\r\n   * @param {Number} index - index of the wheel in the wheel vector, that we are interested in\r\n   * @param {Array} whArray - the wheel array we are searching in\r\n   * @return {Array} - list of invalid keys\r\n   */\n\n\n  function getInvalidKeys(whVector, index, whArray) {\n    var i = 0,\n        n,\n        whObjA = whArray,\n        invalids = [];\n\n    while (i < index) {\n      var ii = whVector[i];\n\n      for (n in whObjA) {\n        if (whObjA[n].key == ii) {\n          whObjA = whObjA[n].children;\n          break;\n        }\n      }\n\n      i++;\n    }\n\n    i = 0;\n\n    while (i < whObjA.length) {\n      if (whObjA[i].invalid) {\n        invalids.push(whObjA[i].key);\n      }\n\n      i++;\n    }\n\n    return invalids;\n  }\n  /**\r\n   * Creates a Boolean vector with true values (except one) that can be used as the readonly vector\r\n   * n - the length of the vector\r\n   * i - the index of the value that's going to be false\r\n   */\n\n\n  function createROVector(n, i) {\n    var a = [];\n\n    while (n) {\n      a[--n] = true;\n    }\n\n    a[i] = false;\n    return a;\n  }\n  /**\r\n   * Creates the wheel array from the vector provided\r\n   * wv - wheel vector containing the values that should be selected on the wheels\r\n   * l - the length of the wheel array\r\n   */\n\n\n  function generateWheelsFromVector(wv, l, index) {\n    var nextLevel,\n        j,\n        i = 0,\n        hasChildren = true,\n        w = [[]],\n        wtObjA = wa;\n\n    if (l) {\n      // if length is defined we need to generate that many wheels (even if they are empty)\n      for (j = 0; j < l; j++) {\n        if (isLiquid) {\n          w[0][j] = {};\n        } else {\n          w[j] = [{}];\n        }\n      }\n    }\n\n    while (hasChildren) {\n      if (isLiquid) {\n        w[0][i] = getWheelFromObjA(wtObjA, i);\n      } else {\n        w[i] = [getWheelFromObjA(wtObjA, i)];\n      }\n\n      j = 0;\n      nextLevel = null;\n\n      while (j < wtObjA.length && !nextLevel) {\n        if (wtObjA[j].key == wv[i] && (index !== undefined && i <= index || index === undefined)) {\n          nextLevel = wtObjA[j];\n        }\n\n        j++;\n      }\n\n      if (!nextLevel) {\n        nextLevel = getFirstValidItemObjOrInd(wtObjA);\n      }\n\n      if (nextLevel && nextLevel.children) {\n        wtObjA = nextLevel.children;\n        i++;\n      } else {\n        hasChildren = false;\n      }\n    }\n\n    return w;\n  }\n  /**\r\n   * Returns the first valid Wheel Node Object or its index from a Wheel Node Object Array\r\n   * getInd - if it is true then the return value is going to be the index, otherwise the object itself\r\n   */\n\n\n  function getFirstValidItemObjOrInd(wtObjA, getInd) {\n    if (!wtObjA) {\n      return false;\n    }\n\n    var i = 0,\n        obj;\n\n    while (i < wtObjA.length) {\n      if (!(obj = wtObjA[i++]).invalid) {\n        return getInd ? i - 1 : obj;\n      }\n    }\n\n    return false;\n  }\n\n  function getWheelFromObjA(objA, i) {\n    var wheel = {\n      data: [],\n      label: s.labels && s.labels[i] ? s.labels[i] : i\n    },\n        j = 0;\n\n    while (j < objA.length) {\n      wheel.data.push({\n        value: objA[j].key,\n        display: objA[j].value\n      });\n      j++;\n    }\n\n    return wheel;\n  }\n  /**\r\n   * Hides the last i number of wheels\r\n   * i - the last number of wheels that has to be hidden\r\n   */\n\n\n  function hideWheels(i) {\n    if (inst._isVisible) {\n      $$1('.mbsc-sc-whl-w', inst._markup).css('display', '').slice(i).hide();\n    }\n  }\n  /**\r\n   * Generates the first wheel vector from the wheeltree\r\n   * wt - the wheel tree object\r\n   * uses the lvl global variable to determine the length of the vector\r\n   */\n\n\n  function firstWheelVector(wa) {\n    var t = [],\n        ndObjA = wa,\n        obj,\n        ok = true,\n        i = 0;\n\n    while (ok) {\n      obj = getFirstValidItemObjOrInd(ndObjA);\n      t[i++] = obj.key;\n      ok = obj.children;\n\n      if (ok) {\n        ndObjA = ok;\n      }\n    }\n\n    return t;\n  }\n  /**\r\n   * Calculates the level of a wheel vector and the new wheel vector, depending on current wheel vector and the index of the changed wheel\r\n   * wv - current wheel vector\r\n   * index - index of the changed wheel\r\n   */\n\n\n  function calcLevelOfVector2(wv, index) {\n    var childIdx,\n        childName,\n        i,\n        level = 0,\n        ndObjA = wa,\n        next = true,\n        t = [];\n\n    while (next) {\n      if (wv[level] !== undefined && level <= index) {\n        i = 0;\n        childName = wv[level];\n        childIdx = undefined;\n\n        while (i < ndObjA.length && childIdx === undefined) {\n          if (ndObjA[i].key == wv[level] && !ndObjA[i].invalid) {\n            childIdx = i;\n          }\n\n          i++;\n        }\n      } else {\n        childIdx = getFirstValidItemObjOrInd(ndObjA, true);\n        childName = ndObjA[childIdx] && ndObjA[childIdx].key;\n      }\n\n      t[level] = childName;\n      level++;\n      next = ndObjA[childIdx] ? ndObjA[childIdx].children : false;\n      ndObjA = ndObjA[childIdx] && ndObjA[childIdx].children;\n    } // return the calculated level and the wheel vector as an object\n\n\n    return {\n      lvl: level,\n      nVector: t\n    };\n  }\n\n  function createWheelArray(ul) {\n    var wheelArray = [];\n    var children = ul.length > 1 ? ul : ul.children(s.itemSelector);\n    children.each(function (index) {\n      var that = $$1(this),\n          c = that.clone();\n      c.children('ul,ol').remove();\n      c.children(s.itemSelector).remove();\n      var v = inst._processMarkup ? inst._processMarkup(c) : c.html().replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, ''),\n          inv = that.attr('data-invalid') ? true : false,\n          wheelObj = {\n        key: that.attr('data-val') === undefined || that.attr('data-val') === null ? index : that.attr('data-val'),\n        value: v,\n        invalid: inv,\n        children: null\n      },\n          nest = s.itemSelector === 'li' ? that.children('ul,ol') : that.children(s.itemSelector);\n\n      if (nest.length) {\n        wheelObj.children = createWheelArray(nest);\n      }\n\n      wheelArray.push(wheelObj);\n    });\n    return wheelArray;\n  }\n\n  function changeWheels(values, index, o) {\n    var j,\n        i = (index || 0) + 1,\n        args = [],\n        w = {},\n        wheels = {};\n    w = generateWheelsFromVector(values, null, index);\n\n    for (j = 0; j < values.length; j++) {\n      inst._tempWheelArray[j] = values[j] = o.nVector[j] || 0;\n    }\n\n    while (i < o.lvl) {\n      wheels[i] = isLiquid ? w[0][i] : w[i][0];\n      args.push(i++);\n    }\n\n    hideWheels(o.lvl);\n    currWheelVector = values.slice(0);\n\n    if (args.length) {\n      prevent = true;\n      inst.changeWheel(wheels);\n    }\n  } // Calculate the maximum depth of the tree\n\n\n  getDepth(wa, 1);\n  w = generateWheelsFromVector(fwv, lvl); // Remove input if exists\n\n  $$1('#' + id).remove();\n\n  if (s.input) {\n    input = $$1(s.input);\n  } else if (s.showInput) {\n    input = $$1('<input type=\"text\" id=\"' + id + '\" value=\"\" class=\"' + s.inputClass + '\" placeholder=\"' + (s.placeholder || '') + '\" readonly />').insertBefore(elm);\n  }\n\n  if (input) {\n    inst.attachShow(input);\n  }\n\n  if (!s.wheelArray) {\n    elm.hide();\n  }\n\n  return {\n    wheels: w,\n    anchor: input,\n    layout: layout,\n    headerText: false,\n    setOnTap: lvl == 1,\n    formatValue: function formatValue(d) {\n      if (currLevel === undefined) {\n        currLevel = calcLevelOfVector2(d, d.length).lvl;\n      }\n\n      return d.slice(0, currLevel).join(' ');\n    },\n    parseValue: function parseValue(value) {\n      return value ? (value + '').split(' ') : (s.defaultValue || fwv).slice(0);\n    },\n    onBeforeShow: function onBeforeShow() {\n      var t = inst.getArrayVal(true);\n      currWheelVector = t.slice(0);\n      s.wheels = generateWheelsFromVector(t, lvl, lvl);\n      prevent = true;\n    },\n    onWheelGestureStart: function onWheelGestureStart(ev) {\n      s.readonly = createROVector(lvl, ev.index);\n    },\n    onWheelAnimationEnd: function onWheelAnimationEnd(ev) {\n      var index = ev.index,\n          values = inst.getArrayVal(true),\n          o = calcLevelOfVector2(values, index);\n      currLevel = o.lvl;\n      s.readonly = origReadOnly;\n\n      if (values[index] != currWheelVector[index]) {\n        changeWheels(values, index, o);\n      }\n    },\n    onFill: function onFill(ev) {\n      currLevel = undefined;\n\n      if (input) {\n        input.val(ev.valueText);\n      }\n    },\n    validate: function validate(data) {\n      var values = data.values,\n          index = data.index,\n          o = calcLevelOfVector2(values, values.length);\n      currLevel = o.lvl;\n\n      if (index === undefined) {\n        hideWheels(o.lvl);\n\n        if (!prevent) {\n          changeWheels(values, index, o);\n        }\n      }\n\n      prevent = false;\n      return {\n        disabled: getDisabled(currLevel, wa, values)\n      };\n    },\n    onDestroy: function onDestroy() {\n      if (input) {\n        $$1('#' + id).remove();\n      }\n\n      elm.show();\n    }\n  };\n};\n\nvar ImageScroller = Scroller;\n\npresets.image = function (inst) {\n  if (inst.settings.enhance) {\n    inst._processMarkup = function (li) {\n      var hasIcon = li.attr('data-icon');\n      li.children().each(function (i, v) {\n        v = $$1(v);\n\n        if (v.is('img')) {\n          $$1('<div class=\"mbsc-img-c\"></div>').insertAfter(v).append(v.addClass('mbsc-img'));\n        } else if (v.is('p')) {\n          v.addClass('mbsc-img-txt');\n        }\n      });\n\n      if (hasIcon) {\n        li.prepend('<div class=\"mbsc-ic mbsc-ic-' + hasIcon + '\"></div');\n      }\n\n      li.html('<div class=\"mbsc-img-w\">' + li.html() + '</div>');\n      return li.html();\n    };\n  }\n\n  return List.call(this, inst);\n};\n\nvar MbscImage = function (_super) {\n  __extends(MbscImage, _super);\n\n  function MbscImage(initialElement, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElement, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.enhance = true;\n    _this.placeholder = '';\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscImage.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscImage.prototype.initControl = function () {\n    var _this = this;\n\n    var target = this.target;\n\n    if (target) {\n      if (typeof target !== 'string') {\n        if (target._elementRef && target._elementRef.nativeElement) {\n          target = target._elementRef.nativeElement;\n        } else if (target.getInputElement) {\n          target.getInputElement().then(function (inp) {\n            _this.updateOptions({\n              input: inp\n            }, true, false, false);\n          });\n        } else if (target.element) {\n          target = target.element;\n        }\n      }\n    }\n\n    var options = extend$1({\n      preset: 'image',\n      input: target\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new ImageScroller(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  MbscImage.prototype.setNewValue = function (v) {\n    if (this.instance && this.instance.getVal() !== v) {\n      this.instance.setVal(v, true, false);\n\n      if (this._inputService && this._inputService.input) {\n        this._inputService.input.innerValue = this.instance._value;\n      }\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscImage.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscImage.prototype, \"enhance\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscImage.prototype, \"inputClass\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscImage.prototype, \"invalid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscImage.prototype, \"labels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscImage.prototype, \"placeholder\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscImage.prototype, \"showInput\", void 0);\n\n  __decorate([Input$1('mbsc-data'), __metadata(\"design:type\", Array)], MbscImage.prototype, \"wheelArray\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscImage.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-target'), __metadata(\"design:type\", Object)], MbscImage.prototype, \"target\", void 0);\n\n  __decorate([Input$1('mbsc-image'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscImage.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-imageChange'), __metadata(\"design:type\", EventEmitter)], MbscImage.prototype, \"onChangeEmitter\", void 0);\n\n  MbscImage = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscImage);\n\n  MbscImage.ɵfac = function MbscImage_Factory(t) {\n    return new (t || MbscImage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscImage.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscImage,\n    selectors: [[\"\", \"mbsc-image\", \"\"]],\n    inputs: {\n      value: [\"mbsc-image\", \"value\"],\n      defaultValue: \"defaultValue\",\n      enhance: \"enhance\",\n      inputClass: \"inputClass\",\n      invalid: \"invalid\",\n      labels: \"labels\",\n      placeholder: \"placeholder\",\n      showInput: \"showInput\",\n      wheelArray: [\"mbsc-data\", \"wheelArray\"],\n      options: [\"mbsc-options\", \"options\"],\n      target: [\"mbsc-target\", \"target\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-imageChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscImage;\n}(MbscScrollerBase);\n\nvar MbscImageComponent = function (_super) {\n  __extends(MbscImageComponent, _super);\n\n  function MbscImageComponent(initialElem, zone, listService, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.listService = listService;\n    _this.errorMessage = '';\n    _this.label = '';\n    _this.placeholder = '';\n    _this.showInput = false;\n    _this.inlineOptionsObj = {\n      itemSelector: 'mbsc-image-item',\n      showInput: false\n    };\n    return _this;\n  }\n\n  MbscImageComponent.prototype.setElement = function () {\n    if (this.itemWrapper) {\n      this.element = this.itemWrapper.nativeElement;\n    } else {\n      this.element = this.initialElem.nativeElement;\n    }\n  };\n\n  MbscImageComponent.prototype.ngOnInit = function () {\n    var _this = this;\n\n    _super.prototype.ngOnInit.call(this);\n\n    this.addRemoveHandler = this.listService.onAddRemove().subscribe(function (item) {\n      if (_this.instance) {\n        _this.instance.option({});\n      }\n    });\n  };\n\n  MbscImageComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  MbscImageComponent.prototype.initControl = function () {\n    if (!this.target) {\n      this.target = $$1('mbsc-input', this.initialElem.nativeElement)[0];\n    }\n\n    _super.prototype.initControl.call(this);\n  };\n\n  MbscImageComponent.prototype.ngOnDestroy = function () {\n    this.listService.onAddRemove().unsubscribe(this.addRemoveHandler);\n\n    _super.prototype.ngOnDestroy.call(this);\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscImageComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscImageComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscImageComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscImageComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscImageComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscImageComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1('data'), __metadata(\"design:type\", Array)], MbscImageComponent.prototype, \"wheelArray\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscImageComponent.prototype, \"label\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscImageComponent.prototype, \"placeholder\", void 0);\n\n  __decorate([ViewChild('itemWrapper', {\n    static: false\n  }), __metadata(\"design:type\", ElementRef)], MbscImageComponent.prototype, \"itemWrapper\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscImageComponent.prototype, \"showInput\", void 0);\n\n  MbscImageComponent = __decorate([__param(3, Optional()), __param(4, Optional()), __param(5, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscListService, NgControl, MbscInputService, MbscOptionsService])], MbscImageComponent);\n\n  MbscImageComponent.ɵfac = function MbscImageComponent_Factory(t) {\n    return new (t || MbscImageComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscImageComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscImageComponent,\n    selectors: [[\"mbsc-image\"]],\n    viewQuery: function MbscImageComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c4, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemWrapper = _t.first);\n      }\n    },\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      wheelArray: [\"data\", \"wheelArray\"],\n      label: \"label\",\n      placeholder: \"placeholder\",\n      showInput: \"showInput\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscListService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 1,\n    consts: [[3, \"name\", \"theme\", \"disabled\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", \"placeholder\", \"controlNg\", 4, \"ngIf\"], [\"itemWrapper\", \"\"], [3, \"name\", \"theme\", \"disabled\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", \"placeholder\", \"controlNg\"]],\n    template: function MbscImageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscImageComponent_mbsc_input_0_Template, 2, 10, \"mbsc-input\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"span\", null, 1);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscImageComponent;\n}(MbscImage);\n\nvar MbscImageItem = function () {\n  function MbscImageItem(listService) {\n    this.listService = listService;\n  }\n\n  MbscImageItem.prototype.ngAfterViewInit = function () {\n    this.listService.notifyAddRemove(this);\n  };\n\n  MbscImageItem.prototype.ngOnDestroy = function () {\n    this.listService.notifyAddRemove(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscImageItem.prototype, \"value\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscImageItem.prototype, \"icon\", void 0);\n\n  MbscImageItem = __decorate([__metadata(\"design:paramtypes\", [MbscListService])], MbscImageItem);\n\n  MbscImageItem.ɵfac = function MbscImageItem_Factory(t) {\n    return new (t || MbscImageItem)(ɵngcc0.ɵɵdirectiveInject(MbscListService));\n  };\n\n  MbscImageItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscImageItem,\n    selectors: [[\"mbsc-image-item\"]],\n    hostVars: 2,\n    hostBindings: function MbscImageItem_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-val\", ctx.value)(\"data-icon\", ctx.icon);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      icon: \"icon\"\n    },\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscImageItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscImageItem;\n}();\n\nvar MbscImageModule = function () {\n  function MbscImageModule() {}\n\n  MbscImageModule.ɵfac = function MbscImageModule_Factory(t) {\n    return new (t || MbscImageModule)();\n  };\n\n  MbscImageModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscImageModule\n  });\n  MbscImageModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscScrollerBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscImageModule, {\n      declarations: function () {\n        return [MbscImage, MbscImageComponent, MbscImageItem];\n      },\n      imports: function () {\n        return [CommonModule, MbscScrollerBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscImage, MbscImageComponent, MbscImageItem];\n      }\n    });\n  })();\n\n  return MbscImageModule;\n}();\n\nvar Measurement = Scroller;\nvar defaults$6 = {\n  batch: 50,\n  min: 0,\n  max: 100,\n  defaultUnit: '',\n  units: null,\n  unitNames: null,\n  invalid: [],\n  sign: false,\n  step: 0.05,\n  scale: 2,\n  convert: function convert(val) {\n    return val;\n  },\n  // Localization\n  decimalSeparator: '.',\n  signText: '&nbsp;',\n  wholeText: 'Whole',\n  fractionText: 'Fraction',\n  unitText: 'Unit'\n};\n\npresets.measurement = function (inst) {\n  var orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, defaults$6, orig),\n      wheel = {},\n      w = [[]],\n      wholeInvalids = {},\n      wholeWheel = {},\n      fractionWheel = {},\n      fractions = [],\n      useSign = s.sign,\n      useUnits = s.units && s.units.length,\n      baseUnit = useUnits ? s.defaultUnit || s.units[0] : '',\n      units = [],\n      useFract = s.step < 1,\n      wholeStep = s.step > 1 ? s.step : 1,\n      fractLength = useFract ? Math.max(s.scale, (s.step + '').split('.')[1].length) : 1,\n      one = Math.pow(10, fractLength),\n      steps = Math.round(useFract ? s.step * one : s.step),\n      fractNr,\n      realValue,\n      oldUnit,\n      idxFract,\n      idxWhole,\n      idxUnit,\n      minVal,\n      maxVal,\n      minWhole,\n      maxWhole,\n      minFract,\n      maxFract,\n      wholeOffset = 0,\n      fractOffset = 0,\n      v,\n      j,\n      i = 0;\n\n  function getWhole(k) {\n    return Math.max(minWhole, Math.min(maxWhole, useFract ? k < 0 ? Math.ceil(k) : Math.floor(k) : step(Math.round(k - wholeOffset), steps) + wholeOffset));\n  }\n\n  function getFract(k) {\n    return useFract ? step((Math.abs(k) - Math.abs(getWhole(k))) * one - fractOffset, steps) + fractOffset : 0;\n  }\n\n  function getParts(v) {\n    var whole = getWhole(v),\n        fract = getFract(v),\n        sign = v < 0 ? '-' : '+';\n\n    if (fract >= one) {\n      if (v < 0) {\n        whole--;\n      } else {\n        whole++;\n      }\n\n      fract = 0;\n    }\n\n    return [sign, whole, fract];\n  }\n\n  function getNr(d) {\n    var whole = +d[idxWhole],\n        fract = useFract ? d[idxFract] / one * (whole < 0 ? -1 : 1) : 0;\n    return (useSign && d[0] == '-' ? -1 : 1) * (whole + fract);\n  }\n\n  function step(v, st) {\n    return Math.round(v / st) * st;\n  }\n\n  function convert(v, u1, u2) {\n    if (u1 === u2 || !s.convert) {\n      return v;\n    }\n\n    return s.convert.call(this, v, u1, u2);\n  }\n\n  function setMinMax(unit) {\n    var minv, maxv;\n    minVal = convert(s.min, baseUnit, unit);\n    maxVal = convert(s.max, baseUnit, unit);\n\n    if (useFract) {\n      minWhole = minVal < 0 ? Math.ceil(minVal) : Math.floor(minVal);\n      maxWhole = maxVal < 0 ? Math.ceil(maxVal) : Math.floor(maxVal);\n      minFract = getFract(minVal);\n      maxFract = getFract(maxVal);\n    } else {\n      minWhole = Math.round(minVal);\n      maxWhole = Math.round(maxVal);\n      maxWhole = minWhole + Math.floor((maxWhole - minWhole) / steps) * steps;\n      wholeOffset = minWhole % steps;\n    }\n\n    minv = minWhole;\n    maxv = maxWhole;\n\n    if (useSign) {\n      maxv = Math.abs(minv) > Math.abs(maxv) ? Math.abs(minv) : Math.abs(maxv);\n      minv = minv < 0 ? 0 : minv;\n    }\n\n    wholeWheel.min = minv < 0 ? Math.ceil(minv / wholeStep) : Math.floor(minv / wholeStep);\n    wholeWheel.max = maxv < 0 ? Math.ceil(maxv / wholeStep) : Math.floor(maxv / wholeStep);\n  }\n\n  function format(d) {\n    return getNr(d).toFixed(useFract ? fractLength : 0) + (useUnits ? ' ' + units[d[idxUnit]] : '');\n  } // Extended methods\n  // ---\n\n\n  inst.setVal = function (val, fill, change, temp, time) {\n    // Force parse if value is passed as an array\n    inst._setVal($$1.isArray(val) ? format(val) : val, fill, change, temp, time);\n  }; // ---\n  // Inits\n  // generate array from unitNames\n\n\n  if (s.units) {\n    for (j = 0; j < s.units.length; ++j) {\n      v = s.units[j];\n      units.push(s.unitNames ? s.unitNames[v] || v : v);\n    }\n  } // Check if sign is needed\n\n\n  if (useSign) {\n    useSign = false;\n\n    if (useUnits) {\n      for (j = 0; j < s.units.length; j++) {\n        if (convert(s.min, baseUnit, s.units[j]) < 0) {\n          useSign = true;\n        }\n      }\n    } else {\n      useSign = s.min < 0;\n    }\n  } // Sign wheel (if enabled)\n\n\n  if (useSign) {\n    w[0].push({\n      data: ['-', '+'],\n      label: s.signText\n    });\n    i++;\n  } // Whole wheel (later generated)\n\n\n  wholeWheel = {\n    label: s.wholeText,\n    data: function data(i) {\n      return minWhole % wholeStep + i * wholeStep;\n    },\n    getIndex: function getIndex(i) {\n      return Math.round((i - minWhole % wholeStep) / wholeStep);\n    }\n  };\n  w[0].push(wholeWheel);\n  idxWhole = i++;\n  setMinMax(baseUnit); // Fraction wheel\n\n  if (useFract) {\n    w[0].push(fractionWheel);\n    fractionWheel.data = [];\n    fractionWheel.label = s.fractionText;\n\n    for (j = fractOffset; j < one; j += steps) {\n      fractions.push(j);\n      fractionWheel.data.push({\n        value: j,\n        display: s.decimalSeparator + pad(j, fractLength)\n      });\n    }\n\n    idxFract = i++;\n    fractNr = Math.ceil(100 / steps);\n\n    if (s.invalid && s.invalid.length) {\n      // Calculate whole invalids\n      $$1.each(s.invalid, function (i, v) {\n        var w = v > 0 ? Math.floor(v) : Math.ceil(v);\n\n        if (w === 0) {\n          // We need to track +0 and -0 sepparately\n          w = v <= 0 ? -0.001 : 0.001;\n        }\n\n        wholeInvalids[w] = (wholeInvalids[w] || 0) + 1;\n\n        if (v === 0) {\n          w = 0.001;\n          wholeInvalids[w] = (wholeInvalids[w] || 0) + 1;\n        }\n      });\n      $$1.each(wholeInvalids, function (i, v) {\n        if (v < fractNr) {\n          delete wholeInvalids[i];\n        } else {\n          wholeInvalids[i] = i;\n        }\n      });\n    }\n  } // Unit wheel\n\n\n  if (useUnits) {\n    wheel = {\n      data: [],\n      label: s.unitText,\n      cssClass: 'mbsc-msr-whl-unit',\n      circular: false\n    };\n\n    for (j = 0; j < s.units.length; j++) {\n      wheel.data.push({\n        value: j,\n        display: units[j]\n      });\n    }\n\n    w[0].push(wheel);\n  }\n\n  idxUnit = i;\n  return {\n    wheels: w,\n    minWidth: useSign && useFract ? 70 : 80,\n    showLabel: false,\n    formatValue: format,\n    compClass: 'mbsc-msr mbsc-sc',\n    parseValue: function parseValue(v) {\n      var vv = (typeof v === 'number' ? v + '' : v) || s.defaultValue,\n          d = (vv + '').split(' '),\n          val = +d[0],\n          ret = [],\n          parts,\n          unit = '';\n\n      if (useUnits) {\n        unit = $$1.inArray(d[1], units);\n        unit = unit == -1 ? $$1.inArray(baseUnit, s.units) : unit;\n        unit = unit == -1 ? 0 : unit;\n      }\n\n      oldUnit = useUnits ? s.units[unit] : '';\n      setMinMax(oldUnit);\n      val = isNaN(val) ? 0 : val;\n      val = constrain(val, minVal, maxVal);\n      parts = getParts(val);\n      parts[1] = constrain(parts[1], minWhole, maxWhole);\n      realValue = val;\n\n      if (useSign) {\n        ret[0] = parts[0];\n        parts[1] = Math.abs(parts[1]);\n      }\n\n      ret[idxWhole] = parts[1];\n\n      if (useFract) {\n        ret[idxFract] = parts[2];\n      }\n\n      if (useUnits) {\n        ret[idxUnit] = unit;\n      }\n\n      return ret;\n    },\n    onCancel: function onCancel() {\n      realValue = undefined;\n    },\n    validate: function validate(data) {\n      var minus,\n          parts,\n          whole,\n          iparts,\n          from,\n          values = data.values,\n          index = data.index,\n          dir = data.direction,\n          dis = {},\n          disabled = [],\n          wheels = {},\n          newUnit = useUnits ? s.units[values[idxUnit]] : ''; // Sign changed\n\n      if (useSign && index === 0) {\n        realValue = Math.abs(realValue) * (values[0] == '-' ? -1 : 1);\n      } // Set real value if numbers changed\n\n\n      if (index === idxWhole || index === idxFract && useFract || realValue === undefined || index === undefined) {\n        realValue = getNr(values);\n        oldUnit = newUnit;\n      } // Convert value if unit changed\n\n\n      if (useUnits && index === idxUnit && oldUnit !== newUnit || index === undefined) {\n        setMinMax(newUnit);\n        realValue = convert(realValue, oldUnit, newUnit);\n        oldUnit = newUnit;\n        parts = getParts(realValue);\n\n        if (index !== undefined) {\n          //wholeWheel._refresh();\n          wheels[idxWhole] = wholeWheel;\n          inst.changeWheel(wheels);\n        }\n\n        if (useSign) {\n          values[0] = parts[0];\n        }\n      } // Disable invalid values\n\n\n      disabled[idxWhole] = [];\n\n      if (useSign) {\n        // Disable +/- signs\n        disabled[0] = [];\n\n        if (minVal > 0) {\n          disabled[0].push('-');\n          values[0] = '+';\n        }\n\n        if (maxVal < 0) {\n          disabled[0].push('+');\n          values[0] = '-';\n        }\n\n        from = Math.abs(values[0] == '-' ? minWhole : maxWhole);\n\n        for (i = from + wholeStep; i < from + 20 * wholeStep; i += wholeStep) {\n          disabled[idxWhole].push(i);\n          dis[i] = true;\n        }\n      }\n\n      realValue = constrain(realValue, minVal, maxVal);\n      parts = getParts(realValue);\n      whole = useSign ? Math.abs(parts[1]) : parts[1];\n      minus = useSign ? values[0] == '-' : realValue < 0;\n      values[idxWhole] = whole;\n\n      if (minus) {\n        // Need this for 0\n        parts[0] = '-';\n      }\n\n      if (useFract) {\n        values[idxFract] = parts[2];\n      } // Disable invalid values on whole wheel\n\n\n      $$1.each(useFract ? wholeInvalids : s.invalid, function (i, v) {\n        // disable whole user values\n        if (useSign && minus) {\n          if (v <= 0) {\n            v = Math.abs(v);\n          } else {\n            return;\n          }\n        }\n\n        v = step(convert(v, baseUnit, newUnit), useFract ? 1 : steps);\n        dis[v] = true;\n        disabled[idxWhole].push(v);\n      }); // Find nearest valid whole value\n\n      values[idxWhole] = inst.getValidValue(idxWhole, whole, dir, dis);\n      parts[1] = values[idxWhole] * (useSign && minus ? -1 : 1); // Validate fraction wheel values\n\n      if (useFract) {\n        disabled[idxFract] = []; // We need to make difference between +0 and -0, so we compare the strings instead of numbers\n\n        var p1 = useSign ? values[0] + values[1] : (realValue < 0 ? '-' : '+') + Math.abs(parts[1]),\n            p2 = (minVal < 0 ? '-' : '+') + Math.abs(minWhole),\n            p3 = (maxVal < 0 ? '-' : '+') + Math.abs(maxWhole); // Disable out of range fraction values\n\n        if (p1 === p2) {\n          $$1(fractions).each(function (i, v) {\n            if (minus ? v > minFract : v < minFract) {\n              disabled[idxFract].push(v);\n            }\n          });\n        }\n\n        if (p1 === p3) {\n          $$1(fractions).each(function (i, v) {\n            if (minus ? v < maxFract : v > maxFract) {\n              disabled[idxFract].push(v);\n            }\n          });\n        } // Disable invalid fraction values\n\n\n        $$1.each(s.invalid, function (i, v) {\n          iparts = getParts(convert(v, baseUnit, newUnit)); // Sign and whole part matches\n\n          if ((parts[0] === iparts[0] || parts[1] === 0 && iparts[1] === 0 && iparts[2] === 0) && parts[1] === iparts[1]) {\n            disabled[idxFract].push(iparts[2]);\n          }\n        });\n      }\n\n      return {\n        disabled: disabled,\n        valid: values\n      };\n    }\n  };\n};\n\nvar defaults$7 = {\n  min: -20,\n  max: 40,\n  defaultUnit: 'c',\n  units: ['c', 'k', 'f', 'r'],\n  unitNames: {\n    c: '°C',\n    k: 'K',\n    f: '°F',\n    r: '°R'\n  }\n},\n    cobj = {\n  c2k: function c2k(c) {\n    return c + 273.15;\n  },\n  c2f: function c2f(c) {\n    return c * 9 / 5 + 32;\n  },\n  c2r: function c2r(c) {\n    return (c + 273.15) * 9 / 5;\n  },\n  k2c: function k2c(k) {\n    return k - 273.15;\n  },\n  k2f: function k2f(k) {\n    return k * 9 / 5 - 459.67;\n  },\n  k2r: function k2r(k) {\n    return k * 9 / 5;\n  },\n  f2c: function f2c(f) {\n    return (f - 32) * 5 / 9;\n  },\n  f2k: function f2k(f) {\n    return (f + 459.67) * 5 / 9;\n  },\n  f2r: function f2r(f) {\n    return f + 459.67;\n  },\n  r2c: function r2c(r) {\n    return (r - 491.67) * 5 / 9;\n  },\n  r2k: function r2k(r) {\n    return r * 5 / 9;\n  },\n  r2f: function r2f(r) {\n    return r - 459.67;\n  }\n};\n\npresets.temperature = function (inst) {\n  var s = extend$1({}, defaults$7, inst.settings);\n  extend$1(inst.settings, s, {\n    sign: true,\n    convert: function convert(val, unit1, unit2) {\n      return cobj[unit1 + '2' + unit2](val);\n    }\n  });\n  return presets.measurement.call(this, inst);\n};\n\nvar defaults$8 = {\n  min: 0,\n  max: 100,\n  defaultUnit: 'km',\n  units: ['m', 'km', 'in', 'ft', 'yd', 'mi']\n},\n    cobj$1 = {\n  mm: 0.001,\n  cm: 0.01,\n  dm: 0.1,\n  m: 1,\n  dam: 10,\n  hm: 100,\n  km: 1000,\n  'in': 0.0254,\n  ft: 0.3048,\n  yd: 0.9144,\n  ch: 20.1168,\n  fur: 201.168,\n  mi: 1609.344,\n  lea: 4828.032\n};\n\npresets.distance = function (inst) {\n  var s = extend$1({}, defaults$8, inst.settings);\n  extend$1(inst.settings, s, {\n    sign: false,\n    convert: function convert(val, unit1, unit2) {\n      return val * cobj$1[unit1] / cobj$1[unit2];\n    }\n  });\n  return presets.measurement.call(this, inst);\n};\n\nvar defaults$9 = {\n  min: 0,\n  max: 100,\n  defaultUnit: 'kph',\n  units: ['kph', 'mph', 'mps', 'fps', 'knot'],\n  unitNames: {\n    kph: 'km/h',\n    mph: 'mi/h',\n    mps: 'm/s',\n    fps: 'ft/s',\n    knot: 'knot'\n  }\n},\n    cobj$2 = {\n  kph: 1,\n  mph: 1.60934,\n  mps: 3.6,\n  fps: 1.09728,\n  knot: 1.852\n};\n\npresets.speed = function (inst) {\n  var s = extend$1({}, defaults$9, inst.settings);\n  extend$1(inst.settings, s, {\n    sign: false,\n    convert: function convert(val, unit1, unit2) {\n      return val * cobj$2[unit1] / cobj$2[unit2];\n    }\n  });\n  return presets.measurement.call(this, inst);\n};\n\nvar defaults$a = {\n  min: 0,\n  max: 100,\n  defaultUnit: 'N',\n  units: ['N', 'kp', 'lbf', 'pdl']\n},\n    cobj$3 = {\n  N: 1,\n  kp: 9.80665,\n  lbf: 4.448222,\n  pdl: 0.138255\n};\n\npresets.force = function (inst) {\n  var s = extend$1({}, defaults$a, inst.settings);\n  extend$1(inst.settings, s, {\n    sign: false,\n    convert: function convert(val, unit1, unit2) {\n      return val * cobj$3[unit1] / cobj$3[unit2];\n    }\n  });\n  return presets.measurement.call(this, inst);\n};\n\nvar defaults$b = {\n  min: 0,\n  max: 1000,\n  defaultUnit: 'kg',\n  units: ['g', 'kg', 'oz', 'lb'],\n  unitNames: {\n    tlong: 't (long)',\n    tshort: 't (short)'\n  }\n},\n    cobj$4 = {\n  mg: 0.001,\n  cg: 0.01,\n  dg: 0.1,\n  g: 1,\n  dag: 10,\n  hg: 100,\n  kg: 1000,\n  t: 1000000,\n  drc: 1.7718452,\n  oz: 28.3495,\n  lb: 453.59237,\n  st: 6350.29318,\n  qtr: 12700.58636,\n  cwt: 50802.34544,\n  tlong: 1016046.9088,\n  tshort: 907184.74\n};\n\npresets.mass = function (inst) {\n  var s = extend$1({}, defaults$b, inst.settings);\n  extend$1(inst.settings, s, {\n    sign: false,\n    convert: function convert(val, unit1, unit2) {\n      return val * cobj$4[unit1] / cobj$4[unit2];\n    }\n  });\n  return presets.measurement.call(this, inst);\n};\n\nvar MbscMeasurementBase = function (_super) {\n  __extends(MbscMeasurementBase, _super);\n\n  function MbscMeasurementBase(initialElement, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElement, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.preset = 'measurement';\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscMeasurementBase.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscMeasurementBase.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var innerValue = this.instance.getVal();\n\n      if (innerValue !== v) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscMeasurementBase.prototype.initControl = function () {\n    var options = extend$1({\n      preset: this.preset\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Scroller(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscMeasurementBase.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscMeasurementBase.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMeasurementBase.prototype, \"decimalSeparator\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMeasurementBase.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscMeasurementBase.prototype, \"invalid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscMeasurementBase.prototype, \"scale\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscMeasurementBase.prototype, \"step\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMeasurementBase.prototype, \"defaultUnit\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscMeasurementBase.prototype, \"unitNames\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscMeasurementBase.prototype, \"units\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMeasurementBase.prototype, \"wholeText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMeasurementBase.prototype, \"fractionText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMeasurementBase.prototype, \"signText\", void 0);\n\n  __decorate([Input$1('mbsc-measurement'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscMeasurementBase.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-measurementChange'), __metadata(\"design:type\", EventEmitter)], MbscMeasurementBase.prototype, \"onChangeEmitter\", void 0);\n\n  MbscMeasurementBase = __decorate([__param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscMeasurementBase);\n\n  MbscMeasurementBase.ɵfac = function MbscMeasurementBase_Factory(t) {\n    return new (t || MbscMeasurementBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscMeasurementBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscMeasurementBase,\n    selectors: [[\"\", \"mbsc-m-b\", \"\"]],\n    inputs: {\n      value: [\"mbsc-measurement\", \"value\"],\n      max: \"max\",\n      min: \"min\",\n      decimalSeparator: \"decimalSeparator\",\n      defaultValue: \"defaultValue\",\n      invalid: \"invalid\",\n      scale: \"scale\",\n      step: \"step\",\n      defaultUnit: \"defaultUnit\",\n      unitNames: \"unitNames\",\n      units: \"units\",\n      wholeText: \"wholeText\",\n      fractionText: \"fractionText\",\n      signText: \"signText\"\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-measurementChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscMeasurementBase;\n}(MbscScrollerBase);\n\nvar MbscMeasurementChild = function (_super) {\n  __extends(MbscMeasurementChild, _super);\n\n  function MbscMeasurementChild(initialElement, zone, control, inputService, optionService, view) {\n    return _super.call(this, initialElement, zone, control, inputService, optionService, view) || this;\n  }\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscMeasurementChild.prototype, \"convert\", void 0);\n\n  MbscMeasurementChild = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscMeasurementChild);\n\n  MbscMeasurementChild.ɵfac = function MbscMeasurementChild_Factory(t) {\n    return new (t || MbscMeasurementChild)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscMeasurementChild.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscMeasurementChild,\n    selectors: [[\"\", \"mbsc-m-c\", \"\"]],\n    inputs: {\n      convert: \"convert\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscMeasurementChild;\n}(MbscMeasurementBase);\n\nvar MbscMeasurement = function (_super) {\n  __extends(MbscMeasurement, _super);\n\n  function MbscMeasurement(initialElem, zone, control, inputService, optionService, view) {\n    return _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n  }\n\n  __decorate([Input$1(), __metadata(\"design:type\", Function)], MbscMeasurement.prototype, \"convert\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscMeasurement.prototype, \"options\", void 0);\n\n  MbscMeasurement = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscMeasurement);\n\n  MbscMeasurement.ɵfac = function MbscMeasurement_Factory(t) {\n    return new (t || MbscMeasurement)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscMeasurement.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscMeasurement,\n    selectors: [[\"\", \"mbsc-measurement\", \"\"]],\n    inputs: {\n      convert: \"convert\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscMeasurement;\n}(MbscMeasurementBase);\n\nvar MbscMeasurementComponent = function (_super) {\n  __extends(MbscMeasurementComponent, _super);\n\n  function MbscMeasurementComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscMeasurementComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscMeasurementComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscMeasurementComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMeasurementComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscMeasurementComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMeasurementComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscMeasurementComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMeasurementComponent.prototype, \"placeholder\", void 0);\n\n  MbscMeasurementComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscMeasurementComponent);\n\n  MbscMeasurementComponent.ɵfac = function MbscMeasurementComponent_Factory(t) {\n    return new (t || MbscMeasurementComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscMeasurementComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscMeasurementComponent,\n    selectors: [[\"mbsc-measurement\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscMeasurementComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscMeasurementComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscMeasurementComponent;\n}(MbscMeasurement);\n\nvar MbscTemperature = function (_super) {\n  __extends(MbscTemperature, _super);\n\n  function MbscTemperature(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    _this.preset = 'temperature';\n    return _this;\n  }\n\n  Object.defineProperty(MbscTemperature.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscTemperature.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-temperature'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscTemperature.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-temperatureChange'), __metadata(\"design:type\", EventEmitter)], MbscTemperature.prototype, \"onChangeEmitter\", void 0);\n\n  MbscTemperature = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscTemperature);\n\n  MbscTemperature.ɵfac = function MbscTemperature_Factory(t) {\n    return new (t || MbscTemperature)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscTemperature.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscTemperature,\n    selectors: [[\"\", \"mbsc-temperature\", \"\"]],\n    inputs: {\n      value: [\"mbsc-temperature\", \"value\"],\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-temperatureChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTemperature;\n}(MbscMeasurementChild);\n\nvar MbscTemperatureComponent = function (_super) {\n  __extends(MbscTemperatureComponent, _super);\n\n  function MbscTemperatureComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscTemperatureComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscTemperatureComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscTemperatureComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTemperatureComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscTemperatureComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTemperatureComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscTemperatureComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTemperatureComponent.prototype, \"placeholder\", void 0);\n\n  MbscTemperatureComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscTemperatureComponent);\n\n  MbscTemperatureComponent.ɵfac = function MbscTemperatureComponent_Factory(t) {\n    return new (t || MbscTemperatureComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscTemperatureComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscTemperatureComponent,\n    selectors: [[\"mbsc-temperature\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscTemperatureComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscTemperatureComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTemperatureComponent;\n}(MbscTemperature);\n\nvar MbscDistance = function (_super) {\n  __extends(MbscDistance, _super);\n\n  function MbscDistance(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    _this.preset = 'distance';\n    return _this;\n  }\n\n  Object.defineProperty(MbscDistance.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscDistance.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-distance'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscDistance.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-distanceChange'), __metadata(\"design:type\", EventEmitter)], MbscDistance.prototype, \"onChangeEmitter\", void 0);\n\n  MbscDistance = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscDistance);\n\n  MbscDistance.ɵfac = function MbscDistance_Factory(t) {\n    return new (t || MbscDistance)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscDistance.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscDistance,\n    selectors: [[\"\", \"mbsc-distance\", \"\"]],\n    inputs: {\n      value: [\"mbsc-distance\", \"value\"],\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-distanceChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscDistance;\n}(MbscMeasurementBase);\n\nvar MbscDistanceComponent = function (_super) {\n  __extends(MbscDistanceComponent, _super);\n\n  function MbscDistanceComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscDistanceComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscDistanceComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscDistanceComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDistanceComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscDistanceComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDistanceComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscDistanceComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscDistanceComponent.prototype, \"placeholder\", void 0);\n\n  MbscDistanceComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscDistanceComponent);\n\n  MbscDistanceComponent.ɵfac = function MbscDistanceComponent_Factory(t) {\n    return new (t || MbscDistanceComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscDistanceComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscDistanceComponent,\n    selectors: [[\"mbsc-distance\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscDistanceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscDistanceComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscDistanceComponent;\n}(MbscDistance);\n\nvar MbscSpeed = function (_super) {\n  __extends(MbscSpeed, _super);\n\n  function MbscSpeed(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    _this.preset = 'speed';\n    return _this;\n  }\n\n  Object.defineProperty(MbscSpeed.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscSpeed.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-speed'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscSpeed.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-speedChange'), __metadata(\"design:type\", EventEmitter)], MbscSpeed.prototype, \"onChangeEmitter\", void 0);\n\n  MbscSpeed = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscSpeed);\n\n  MbscSpeed.ɵfac = function MbscSpeed_Factory(t) {\n    return new (t || MbscSpeed)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscSpeed.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscSpeed,\n    selectors: [[\"\", \"mbsc-speed\", \"\"]],\n    inputs: {\n      value: [\"mbsc-speed\", \"value\"],\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-speedChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscSpeed;\n}(MbscMeasurementBase);\n\nvar MbscSpeedComponent = function (_super) {\n  __extends(MbscSpeedComponent, _super);\n\n  function MbscSpeedComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscSpeedComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscSpeedComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscSpeedComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSpeedComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSpeedComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSpeedComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscSpeedComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSpeedComponent.prototype, \"placeholder\", void 0);\n\n  MbscSpeedComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscSpeedComponent);\n\n  MbscSpeedComponent.ɵfac = function MbscSpeedComponent_Factory(t) {\n    return new (t || MbscSpeedComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscSpeedComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscSpeedComponent,\n    selectors: [[\"mbsc-speed\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscSpeedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscSpeedComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscSpeedComponent;\n}(MbscSpeed);\n\nvar MbscForce = function (_super) {\n  __extends(MbscForce, _super);\n\n  function MbscForce(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    _this.preset = 'force';\n    return _this;\n  }\n\n  Object.defineProperty(MbscForce.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscForce.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-force'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscForce.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-forceChange'), __metadata(\"design:type\", EventEmitter)], MbscForce.prototype, \"onChangeEmitter\", void 0);\n\n  MbscForce = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscForce);\n\n  MbscForce.ɵfac = function MbscForce_Factory(t) {\n    return new (t || MbscForce)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscForce.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscForce,\n    selectors: [[\"\", \"mbsc-force\", \"\"]],\n    inputs: {\n      value: [\"mbsc-force\", \"value\"],\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-forceChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscForce;\n}(MbscMeasurementBase);\n\nvar MbscForceComponent = function (_super) {\n  __extends(MbscForceComponent, _super);\n\n  function MbscForceComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscForceComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscForceComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscForceComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscForceComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscForceComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscForceComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscForceComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscForceComponent.prototype, \"placeholder\", void 0);\n\n  MbscForceComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscForceComponent);\n\n  MbscForceComponent.ɵfac = function MbscForceComponent_Factory(t) {\n    return new (t || MbscForceComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscForceComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscForceComponent,\n    selectors: [[\"mbsc-force\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscForceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscForceComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscForceComponent;\n}(MbscForce);\n\nvar MbscMass = function (_super) {\n  __extends(MbscMass, _super);\n\n  function MbscMass(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    _this.preset = 'mass';\n    return _this;\n  }\n\n  Object.defineProperty(MbscMass.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscMass.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-mass'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscMass.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-massChange'), __metadata(\"design:type\", EventEmitter)], MbscMass.prototype, \"onChangeEmitter\", void 0);\n\n  MbscMass = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscMass);\n\n  MbscMass.ɵfac = function MbscMass_Factory(t) {\n    return new (t || MbscMass)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscMass.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscMass,\n    selectors: [[\"\", \"mbsc-mass\", \"\"]],\n    inputs: {\n      value: [\"mbsc-mass\", \"value\"],\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-massChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscMass;\n}(MbscMeasurementBase);\n\nvar MbscMassComponent = function (_super) {\n  __extends(MbscMassComponent, _super);\n\n  function MbscMassComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscMassComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscMassComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscMassComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMassComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscMassComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMassComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscMassComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscMassComponent.prototype, \"placeholder\", void 0);\n\n  MbscMassComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscMassComponent);\n\n  MbscMassComponent.ɵfac = function MbscMassComponent_Factory(t) {\n    return new (t || MbscMassComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscMassComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscMassComponent,\n    selectors: [[\"mbsc-mass\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscMassComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscMassComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscMassComponent;\n}(MbscMass);\n\nvar comp$4 = [MbscMeasurement, MbscMeasurementBase, MbscMeasurementChild, MbscMeasurementComponent, MbscTemperature, MbscTemperatureComponent, MbscDistance, MbscDistanceComponent, MbscSpeed, MbscSpeedComponent, MbscForce, MbscForceComponent, MbscMass, MbscMassComponent];\n\nvar MbscMeasurementModule = function () {\n  function MbscMeasurementModule() {}\n\n  MbscMeasurementModule.ɵfac = function MbscMeasurementModule_Factory(t) {\n    return new (t || MbscMeasurementModule)();\n  };\n\n  MbscMeasurementModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscMeasurementModule\n  });\n  MbscMeasurementModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscScrollerBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscMeasurementModule, {\n      declarations: function () {\n        return [MbscMeasurement, MbscMeasurementBase, MbscMeasurementChild, MbscMeasurementComponent, MbscTemperature, MbscTemperatureComponent, MbscDistance, MbscDistanceComponent, MbscSpeed, MbscSpeedComponent, MbscForce, MbscForceComponent, MbscMass, MbscMassComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscScrollerBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscMeasurement, MbscMeasurementBase, MbscMeasurementChild, MbscMeasurementComponent, MbscTemperature, MbscTemperatureComponent, MbscDistance, MbscDistanceComponent, MbscSpeed, MbscSpeedComponent, MbscForce, MbscForceComponent, MbscMass, MbscMassComponent];\n      }\n    });\n  })();\n\n  return MbscMeasurementModule;\n}(); // eslint-disable-next-line no-unused-vars\n\n\nvar guid$1 = 1;\n\nvar ScrollView = function ScrollView(elm, settings, inherit) {\n  var $activeItem,\n      $cont,\n      $ctx,\n      $wnd,\n      contWidth,\n      itemWidth,\n      isClick,\n      observer,\n      oldWidth,\n      posDebounce,\n      rtl,\n      scrollView,\n      snap,\n      s,\n      totalWidth,\n      touched,\n      trigger,\n      cssClasses = {},\n      animTime = 1000,\n      that = this,\n      $elm = $$1(elm);\n\n  function onResize(ev) {\n    clearTimeout(posDebounce);\n    posDebounce = setTimeout(function () {\n      size(!ev || ev.type !== 'load');\n    }, 200);\n  }\n\n  function onClick() {\n    if (isClick && this.parentNode === elm) {\n      onItemTap($$1(this), true);\n    }\n  }\n\n  function onItemTap($item, toggle) {\n    if (!$item.length) {\n      return;\n    }\n\n    toggle = that._onItemTap($item, toggle);\n    $activeItem = $item;\n\n    if ($item.parent()[0] == elm) {\n      var bl = $item.offset().left,\n          bp = $item[0].offsetLeft,\n          bw = $item[0].offsetWidth,\n          cl = $cont.offset().left;\n\n      if (rtl) {\n        bp = totalWidth - bp - bw;\n      } // Scroll item to view\n\n\n      if (s.variant == 'a') {\n        if (bl < cl) {\n          scrollView.scroll(rtl ? bp + bw - contWidth : -bp, animTime, true);\n        } else if (bl + bw > cl + contWidth) {\n          scrollView.scroll(rtl ? bp : contWidth - bp - bw, animTime, true);\n        }\n      } else {\n        // Scroll item to center\n        scrollView.scroll((contWidth / 2 - bp - bw / 2) * (rtl ? -1 : 1), animTime, true);\n      }\n    }\n\n    if (toggle) {\n      // Trigger tap event\n      trigger('onItemTap', {\n        target: $item[0]\n      });\n    }\n  }\n\n  function initMarkup() {\n    var $firstItem, props;\n\n    that._initMarkup($cont);\n\n    $elm.find('.mbsc-ripple').remove();\n    that._$items = $elm.children();\n\n    that._$items.each(function (i) {\n      var cssClass,\n          $item = $$1(this),\n          ref = $item.attr('data-ref');\n\n      if (!ref) {\n        ref = guid$1++;\n      }\n\n      if (i === 0) {\n        $firstItem = $item;\n      }\n\n      if (!$activeItem) {\n        $activeItem = that._getActiveItem($item);\n      }\n\n      props = that._getItemProps($item) || {};\n      cssClass = 'mbsc-scv-item mbsc-btn-e ' + (props.cssClass || '');\n      $item.attr('data-ref', ref).removeClass(cssClasses[ref]).addClass(cssClass);\n      cssClasses[ref] = cssClass;\n      /* TRIAL */\n    });\n\n    if (!$activeItem) {\n      $activeItem = $firstItem;\n    }\n\n    that._markupReady($cont);\n  }\n\n  function size(check, noScroll) {\n    var w = s.itemWidth,\n        layout = s.layout;\n    that.contWidth = contWidth = $cont.width();\n\n    if (that._checkResp()) {\n      return false;\n    }\n\n    if (check && oldWidth === contWidth || !contWidth) {\n      // Don't do anything if container width has not changed\n      return;\n    }\n\n    oldWidth = contWidth;\n\n    if (isNumeric(layout)) {\n      itemWidth = contWidth ? contWidth / layout : w;\n\n      if (itemWidth < w) {\n        layout = 'liquid';\n      }\n    }\n\n    if (w) {\n      if (layout == 'liquid') {\n        // The specified itemWidth will be handled as min width\n        itemWidth = contWidth ? contWidth / Math.min(Math.floor(contWidth / w), that._$items.length) : w;\n      } else if (layout == 'fixed') {\n        // Fixed width\n        itemWidth = w;\n      }\n    }\n\n    that._size(contWidth, itemWidth);\n\n    if (itemWidth) {\n      $elm.children().css('width', itemWidth + 'px');\n    }\n\n    that.totalWidth = totalWidth = elm.offsetWidth;\n    extend$1(scrollView.settings, {\n      contSize: contWidth,\n      maxSnapScroll: s.paging ? 1 : false,\n      maxScroll: 0,\n      minScroll: totalWidth > contWidth ? contWidth - totalWidth : 0,\n      snap: s.paging ? contWidth : snap ? itemWidth || '.mbsc-scv-item' : false,\n      elastic: totalWidth > contWidth ? itemWidth || contWidth : false\n    }); // Pass new values to scrollview\n\n    scrollView.refresh(noScroll); // Make sure the active item remains visible\n\n    if ($activeItem) {\n      onItemTap($activeItem, false);\n    }\n  } // Call the parent constructor\n\n\n  Base.call(this, elm, settings, true);\n\n  that.navigate = function ($item, toggle) {\n    onItemTap(that._getItem($item), toggle);\n  };\n\n  that.next = function (toggle) {\n    if ($activeItem) {\n      var $next = $activeItem.next();\n\n      if ($next.length) {\n        $activeItem = $next;\n        onItemTap($activeItem, toggle);\n      }\n    }\n  };\n\n  that.prev = function (toggle) {\n    if ($activeItem) {\n      var $prev = $activeItem.prev();\n\n      if ($prev.length) {\n        $activeItem = $prev;\n        onItemTap($activeItem, toggle);\n      }\n    }\n  };\n  /**\r\n   * Recalculates sizes.\r\n   */\n\n\n  that.refresh = that.position = function (noScroll) {\n    initMarkup();\n    size(false, noScroll);\n  };\n  /**\r\n   * Initialization.\r\n   */\n\n\n  that._init = function () {\n    var contClass;\n    $ctx = $$1(s.context);\n    $wnd = $$1(s.context == 'body' ? window : s.context);\n\n    that.__init();\n\n    rtl = s.rtl;\n    snap = s.itemWidth && s.layout != 'fixed' && s.snap === undefined ? true : s.snap;\n    contClass = 'mbsc-scv-c mbsc-no-touch' + ' mbsc-' + s.theme + ' ' + (s.cssClass || '') + ' ' + (s.wrapperClass || '') + (s.baseTheme ? ' mbsc-' + s.baseTheme : '') + (rtl ? ' mbsc-rtl' : ' mbsc-ltr') + (s.itemWidth ? ' mbsc-scv-hasw' : '') + (s.context == 'body' ? '' : ' mbsc-scv-ctx') + ' ' + (that._getContClass() || '');\n\n    if (!$cont) {\n      $cont = $$1('<div class=\"' + contClass + '\"><div class=\"mbsc-scv-sc\"></div></div>').on('click', '.mbsc-scv-item', onClick).insertAfter($elm);\n      $cont.find('.mbsc-scv-sc').append($elm); // When images are loaded, size migth change\n\n      $cont.find('img').on('load', onResize);\n      $wnd.on('orientationchange resize', onResize);\n      observer = resizeObserver($cont[0], onResize, s.zone);\n      scrollView = new ScrollViewBase($cont[0], {\n        axis: 'X',\n        contSize: 0,\n        maxScroll: 0,\n        maxSnapScroll: 1,\n        minScroll: 0,\n        snap: 1,\n        elastic: 1,\n        rtl: rtl,\n        mousewheel: s.mousewheel,\n        thresholdX: s.threshold,\n        stopProp: s.stopProp,\n        onStart: function onStart(ev) {\n          if (ev.domEvent.type == 'touchstart') {\n            isClick = false;\n\n            if (!touched) {\n              touched = true;\n              $ctx.find('.mbsc-no-touch').removeClass('mbsc-no-touch');\n            }\n          }\n        },\n        onBtnTap: function onBtnTap(ev) {\n          isClick = true; // Trigger click and activate target, if it's a form control\n\n          var domEvent = ev.domEvent,\n              target = domEvent.target;\n\n          if (domEvent.type === 'touchend' && s.tap) {\n            activateControl(target, getControlType($$1(target)), domEvent);\n          }\n        },\n        onGestureStart: function onGestureStart(ev) {\n          trigger('onGestureStart', ev);\n        },\n        onGestureEnd: function onGestureEnd(ev) {\n          trigger('onGestureEnd', ev);\n        },\n        onMove: function onMove(ev) {\n          trigger('onMove', ev);\n        },\n        onAnimationStart: function onAnimationStart(ev) {\n          trigger('onAnimationStart', ev);\n        },\n        onAnimationEnd: function onAnimationEnd(ev) {\n          trigger('onAnimationEnd', ev);\n        }\n      });\n    } else {\n      $cont.attr('class', contClass); // Remove ripple events (if theme changed)\n\n      if (elm.__mbscRippleOff) {\n        elm.__mbscRippleOff();\n      }\n    } // Prepare markup\n\n\n    $elm.css('display', '').addClass('mbsc-scv').removeClass('mbsc-cloak');\n    initMarkup();\n    trigger('onMarkupReady', {\n      target: $cont[0]\n    });\n    size();\n  };\n\n  that._size = noop;\n  that._initMarkup = noop;\n  that._markupReady = noop;\n  that._getContClass = noop;\n  that._getItemProps = noop;\n  that._getActiveItem = noop;\n  that.__init = noop;\n  that.__destroy = noop;\n  /**\r\n   * Destroy\r\n   */\n\n  that._destroy = function () {\n    that.__destroy();\n\n    $wnd.off('orientationchange resize', onResize);\n    $elm.removeClass('mbsc-scv').insertAfter($cont).find('.mbsc-scv-item').each(function () {\n      var $item = $$1(this);\n      $item.width('').removeClass(cssClasses[$item.attr('data-ref')]);\n    });\n    $cont.remove();\n    scrollView.destroy();\n    observer.detach();\n  };\n\n  that._getItem = function (item) {\n    if (typeof item !== 'object') {\n      item = that._$items.filter('[data-id=\"' + item + '\"]');\n    }\n\n    return $$1(item);\n  };\n\n  that._onItemTap = function ($item, toggle) {\n    if (toggle === undefined) {\n      return true;\n    }\n\n    return toggle;\n  }; // ---\n  // Constructor\n\n\n  s = that.settings;\n  trigger = that.trigger;\n\n  if (!inherit) {\n    that.init();\n  }\n}; // Defaults\n\n\nScrollView.prototype = {\n  _class: 'scrollview',\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _responsive: true,\n  _defaults: {\n    tap: hasGhostClick,\n    stopProp: false,\n    context: 'body',\n    layout: 'liquid'\n  }\n};\nclasses.ScrollView = ScrollView;\n\nvar NavigationBase = function NavigationBase(elm, settings, inherit) {\n  var $ctx,\n      display,\n      multiple,\n      select,\n      selectedClass,\n      s,\n      $elm = $$1(elm),\n      that = this;\n\n  function removePagePadding() {\n    if (display && display != 'inline') {\n      $ctx.find('.mbsc-page').css('padding-' + display, '');\n    }\n  }\n\n  function selectItem($item) {\n    $item.addClass(selectedClass).attr('data-selected', 'true').attr('aria-selected', 'true');\n  }\n\n  function deselectItem($item) {\n    $item.removeClass(selectedClass).removeAttr('data-selected').removeAttr('aria-selected');\n  } // Call the parent constructor\n\n\n  ScrollView.call(this, elm, settings, true);\n\n  that.select = function ($item) {\n    if (!multiple) {\n      deselectItem(that._$items.filter('.mbsc-ms-item-sel'));\n    }\n\n    selectItem(that._getItem($item));\n  };\n\n  that.deselect = function ($item) {\n    deselectItem(that._getItem($item));\n  };\n\n  that.enable = function ($item) {\n    that._getItem($item).removeClass('mbsc-disabled').removeAttr('data-disabled').removeAttr('aria-disabled');\n  };\n\n  that.disable = function ($item) {\n    that._getItem($item).addClass('mbsc-disabled').attr('data-disabled', 'true').attr('aria-disabled', 'true');\n  };\n\n  that.setBadge = function ($item, content) {\n    var $badge;\n    $item = that._getItem($item).attr('data-badge', content);\n    $badge = $$1('.mbsc-ms-badge', $item);\n\n    if ($badge.length) {\n      if (content) {\n        $badge.html(content);\n      } else {\n        $badge.remove();\n      }\n    } else if (content) {\n      $item.append('<span class=\"mbsc-ms-badge\">' + content + '</span>');\n    }\n  };\n\n  that._markupReady = function ($cont) {\n    if (that._hasIcons) {\n      $cont.addClass('mbsc-ms-icons');\n    } else {\n      $cont.removeClass('mbsc-ms-icons');\n    }\n\n    if (that._hasText) {\n      $cont.addClass('mbsc-ms-txt');\n    } else {\n      $cont.removeClass('mbsc-ms-txt');\n    }\n\n    that.__markupReady($cont);\n  };\n\n  that._size = function (contWidth, itemWidth) {\n    that.__size(contWidth, itemWidth); // Add space to pages within context\n\n\n    if (display != 'inline') {\n      $ctx.find('.mbsc-page').css('padding-' + display, elm.offsetHeight + 'px');\n    }\n  };\n\n  that._onItemTap = function ($item, toggle) {\n    if (that.__onItemTap($item, toggle) === false) {\n      return false;\n    }\n\n    if (toggle === undefined) {\n      toggle = !multiple;\n    }\n\n    if (select && toggle && !$item.hasClass('mbsc-disabled')) {\n      if (multiple) {\n        if ($item.attr('data-selected') == 'true') {\n          deselectItem($item);\n        } else {\n          selectItem($item);\n        }\n      } else {\n        deselectItem(that._$items.filter('.mbsc-ms-item-sel'));\n        selectItem($item);\n      }\n    }\n\n    return toggle;\n  };\n\n  that._getActiveItem = function ($item) {\n    var selected = $item.attr('data-selected') == 'true';\n\n    if (select && !multiple && selected) {\n      return $item;\n    }\n  };\n\n  that._getItemProps = function ($item) {\n    var selected = $item.attr('data-selected') == 'true',\n        disabled = $item.attr('data-disabled') == 'true',\n        icon = $item.attr('data-icon'),\n        badge = $item.attr('data-badge');\n    $item.attr('data-role', 'button').attr('aria-selected', selected ? 'true' : 'false').attr('aria-disabled', disabled ? 'true' : 'false').find('.mbsc-ms-badge').remove();\n\n    if (badge) {\n      $item.append('<span class=\"mbsc-ms-badge\">' + badge + '</span>');\n    }\n\n    if (icon) {\n      that._hasIcons = true;\n    }\n\n    if ($item.text()) {\n      that._hasText = true;\n    }\n\n    return {\n      cssClass: 'mbsc-ms-item ' + (s.itemClass || '') + ' ' + (selected ? selectedClass : '') + (disabled ? ' mbsc-disabled ' + (s.disabledClass || '') : '') + (icon ? ' mbsc-ms-ic mbsc-ic mbsc-ic-' + icon : '')\n    };\n  };\n\n  that._getContClass = function () {\n    return ' mbsc-ms-c mbsc-ms-' + s.variant + ' mbsc-ms-' + display + (select ? '' : ' mbsc-ms-nosel') + (that.__getContClass() || '');\n  };\n\n  that.__init = function () {\n    that.___init();\n\n    $ctx = $$1(s.context); // Remove old padding from mbsc-page\n    // if display changed dynamically\n\n    removePagePadding();\n    display = s.display;\n    multiple = s.select == 'multiple';\n    select = s.select != 'off';\n    selectedClass = ' mbsc-ms-item-sel ' + (s.activeClass || '');\n    $elm.addClass('mbsc-ms mbsc-ms-base ' + (s.groupClass || ''));\n  };\n\n  that.__destroy = function () {\n    $elm.removeClass('mbsc-ms mbsc-ms-base ' + (s.groupClass || ''));\n    removePagePadding();\n\n    that.___destroy();\n  };\n\n  that.__onItemTap = noop;\n  that.__getContClass = noop;\n  that.__markupReady = noop;\n  that.__size = noop;\n  that.___init = noop;\n  that.___destroy = noop; // ---\n  // Constructor\n\n  s = that.settings;\n\n  if (!inherit) {\n    that.init();\n  }\n}; // Defaults\n\n\nNavigationBase.prototype = {\n  _defaults: extend$1({}, ScrollView.prototype._defaults)\n};\n\nvar Navigation = function Navigation(elm, settings) {\n  var $elm = $$1(elm),\n      $menu,\n      $popup,\n      menuClass,\n      s,\n      popup,\n      isList = $elm.is('ul,ol'),\n      that = this; // Call the parent constructor\n\n  NavigationBase.call(this, elm, settings, true);\n\n  that._initMarkup = function () {\n    if ($menu) {\n      $menu.remove();\n    }\n\n    if ($popup) {\n      $elm.append($popup.children());\n    }\n  };\n\n  that.__size = function (contWidth, itemWidth) {\n    var showMore,\n        showMoreWidth = itemWidth || 72,\n        itemsNr = that._$items.length,\n        itemsWidth = 0;\n    popup.hide(); // show more menu\n\n    if (s.type == 'bottom') {\n      $elm.removeClass('mbsc-scv-liq'); //.empty(); // empty list\n\n      $menu.remove();\n\n      that._$items.remove().each(function (i) {\n        var $item = $$1(this);\n        $elm.append($item);\n        itemsWidth += itemWidth || this.offsetWidth || 0; // if next item doesn't fit, add to show more menu\n\n        if (Math.round(itemsWidth + (i < itemsNr - 1 ? showMoreWidth : 0)) > contWidth) {\n          showMore = true;\n          $popup.append($item.css('width', '').addClass('mbsc-fr-btn-e'));\n        }\n      });\n\n      $menu.attr('class', menuClass + (s.moreIcon ? ' mbsc-menu-item-ic mbsc-ms-ic mbsc-ic mbsc-ic-' + s.moreIcon : '')).html(that._hasIcons && that._hasText ? s.moreText : ''); // add show more item if needed\n\n      if (showMore) {\n        $elm.append($menu);\n      }\n    }\n\n    if (s.layout == 'liquid') {\n      $elm.addClass('mbsc-scv-liq');\n    }\n  };\n\n  that.__onItemTap = function ($item) {\n    if ($item.hasClass('mbsc-menu-item') && that.trigger('onMenuShow', {\n      target: $item[0],\n      menu: popup\n    }) !== false) {\n      popup.show(false, true);\n      return false;\n    }\n  };\n\n  that.__getContClass = function () {\n    return s.type == 'hamburger' ? ' mbsc-ms-hamburger' : '';\n  };\n\n  that.__markupReady = function ($cont) {\n    if (s.type == 'hamburger') {\n      $popup.append(that._$items.addClass('mbsc-fr-btn-e'));\n      $menu.attr('class', menuClass + (s.menuIcon ? ' mbsc-menu-item-ic mbsc-ms-ic mbsc-ic mbsc-ic-' + s.menuIcon : '')).html(s.menuText || '');\n      $elm.append($menu);\n\n      if (!s.menuText || !s.menuIcon) {\n        $cont.removeClass('mbsc-ms-icons');\n      }\n\n      if (!s.menuText) {\n        $cont.removeClass('mbsc-ms-txt');\n      } else {\n        $cont.addClass('mbsc-ms-txt');\n      }\n    }\n  };\n\n  that.___init = function () {\n    var $target;\n\n    if (s.type == 'tab') {\n      s.display = s.display || 'top';\n      s.variant = s.variant || 'b';\n    } else if (s.type == 'bottom') {\n      s.display = s.display || 'bottom';\n      s.variant = s.variant || 'a';\n    } else if (s.type == 'hamburger') {\n      s.display = s.display || 'inline';\n      s.variant = s.variant || 'a';\n    }\n\n    menuClass = 'mbsc-scv-item mbsc-ms-item mbsc-btn-e mbsc-menu-item ' + (s.itemClass || '');\n\n    if (!$menu) {\n      $menu = $$1(isList ? '<li></li>' : '<div></div>');\n      $popup = $$1(isList ? '<ul></ul>' : '<div></div>').addClass('mbsc-scv mbsc-ms');\n    }\n\n    popup = new Popup($popup[0], {\n      display: 'bubble',\n      theme: s.theme,\n      lang: s.lang,\n      context: s.context,\n      buttons: [],\n      anchor: $menu,\n      onBeforeShow: function onBeforeShow(event, inst) {\n        $target = null;\n        inst.settings.cssClass = 'mbsc-wdg mbsc-ms-a mbsc-ms-more' + (that._hasText ? '' : ' mbsc-ms-more-icons');\n      },\n      onBeforeClose: function onBeforeClose() {\n        return that.trigger('onMenuHide', {\n          target: $target && $target[0],\n          menu: popup\n        });\n      },\n      onMarkupReady: function onMarkupReady(event, inst) {\n        that.tap(inst._markup.find('.mbsc-fr-c'), function (ev) {\n          $target = $$1(ev.target).closest('.mbsc-ms-item');\n\n          if ($target.length && !$target.hasClass('mbsc-disabled')) {\n            that.navigate($target, true);\n            popup.hide();\n          }\n        });\n      }\n    });\n  };\n\n  that.___destroy = function () {\n    popup.destroy();\n    $elm.append(that._$items);\n    $menu.remove();\n  }; // ---\n  // Constructor\n\n\n  s = that.settings;\n  that.init();\n}; // Defaults\n\n\nNavigation.prototype = {\n  _class: 'navigation',\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _responsive: true,\n  _defaults: extend$1({}, NavigationBase.prototype._defaults, {\n    type: 'bottom',\n    moreText: 'More',\n    moreIcon: 'material-more-horiz',\n    menuIcon: 'material-menu'\n  })\n};\nclasses.Navigation = Navigation;\n\nvar MbscNotifyItemService = function () {\n  function MbscNotifyItemService() {\n    this._instanceObservable = new Observable();\n    this._addRemoveObservable = new Observable();\n    this.inst = null;\n  }\n\n  MbscNotifyItemService.prototype.notifyInstanceReady = function (instance) {\n    this.inst = instance;\n\n    this._instanceObservable.next(instance);\n  };\n\n  MbscNotifyItemService.prototype.notifyAddRemove = function (item) {\n    this._addRemoveObservable.next(item);\n  };\n\n  MbscNotifyItemService.prototype.onInstanceReady = function () {\n    return this._instanceObservable;\n  };\n\n  MbscNotifyItemService.prototype.onAddRemove = function () {\n    return this._addRemoveObservable;\n  };\n\n  MbscNotifyItemService.ɵfac = function MbscNotifyItemService_Factory(t) {\n    return new (t || MbscNotifyItemService)();\n  };\n\n  MbscNotifyItemService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MbscNotifyItemService,\n    factory: function (t) {\n      return MbscNotifyItemService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNotifyItemService;\n}();\n\nvar MbscScrollItemBase = function () {\n  function MbscScrollItemBase(notifyItemService, _elem) {\n    var _this = this;\n\n    this.notifyItemService = notifyItemService;\n    this._elem = _elem;\n    this._instance = undefined;\n    this.instanceObserver = this.notifyItemService.onInstanceReady().subscribe(function (instance) {\n      _this._instance = instance;\n    });\n\n    if (notifyItemService.inst) {\n      this._instance = notifyItemService.inst;\n    }\n  }\n\n  Object.defineProperty(MbscScrollItemBase.prototype, \"nativeElement\", {\n    get: function () {\n      return this._elem.nativeElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscScrollItemBase.prototype.ngAfterViewInit = function () {\n    this.notifyItemService.notifyAddRemove(this);\n  };\n\n  MbscScrollItemBase.prototype.ngOnDestroy = function () {\n    this.notifyItemService.onInstanceReady().unsubscribe(this.instanceObserver);\n    this.notifyItemService.notifyAddRemove(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscScrollItemBase.prototype, \"id\", void 0);\n\n  MbscScrollItemBase = __decorate([__metadata(\"design:paramtypes\", [MbscNotifyItemService, ElementRef])], MbscScrollItemBase);\n\n  MbscScrollItemBase.ɵfac = function MbscScrollItemBase_Factory(t) {\n    return new (t || MbscScrollItemBase)(ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MbscScrollItemBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscScrollItemBase,\n    selectors: [[\"mbsc-si-b\"]],\n    inputs: {\n      id: \"id\"\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscScrollItemBase;\n}();\n\nvar MbscScrollViewBase = function (_super) {\n  __extends(MbscScrollViewBase, _super);\n\n  function MbscScrollViewBase(initialElem, zone, notifyItemService) {\n    var _this = _super.call(this, initialElem, zone) || this;\n\n    _this.notifyItemService = notifyItemService;\n    _this.onItemTap = new EventEmitter();\n    _this.onMarkupReady = new EventEmitter();\n    _this.onAnimationStart = new EventEmitter();\n    _this.onAnimationEnd = new EventEmitter();\n    _this.onMove = new EventEmitter();\n    _this.onGestureStart = new EventEmitter();\n    _this.onGestureEnd = new EventEmitter();\n    return _this;\n  }\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscScrollViewBase.prototype, \"context\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscScrollViewBase.prototype, \"itemWidth\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscScrollViewBase.prototype, \"layout\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscScrollViewBase.prototype, \"mousewheel\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscScrollViewBase.prototype, \"snap\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscScrollViewBase.prototype, \"threshold\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscScrollViewBase.prototype, \"paging\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscScrollViewBase.prototype, \"onItemTap\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscScrollViewBase.prototype, \"onMarkupReady\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscScrollViewBase.prototype, \"onAnimationStart\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscScrollViewBase.prototype, \"onAnimationEnd\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscScrollViewBase.prototype, \"onMove\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscScrollViewBase.prototype, \"onGestureStart\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscScrollViewBase.prototype, \"onGestureEnd\", void 0);\n\n  MbscScrollViewBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscNotifyItemService])], MbscScrollViewBase);\n\n  MbscScrollViewBase.ɵfac = function MbscScrollViewBase_Factory(t) {\n    return new (t || MbscScrollViewBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService));\n  };\n\n  MbscScrollViewBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscScrollViewBase,\n    selectors: [[\"mbsc-s-b\"]],\n    inputs: {\n      context: \"context\",\n      itemWidth: \"itemWidth\",\n      layout: \"layout\",\n      mousewheel: \"mousewheel\",\n      snap: \"snap\",\n      threshold: \"threshold\",\n      paging: \"paging\"\n    },\n    outputs: {\n      onItemTap: \"onItemTap\",\n      onMarkupReady: \"onMarkupReady\",\n      onAnimationStart: \"onAnimationStart\",\n      onAnimationEnd: \"onAnimationEnd\",\n      onMove: \"onMove\",\n      onGestureStart: \"onGestureStart\",\n      onGestureEnd: \"onGestureEnd\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscScrollViewBase;\n}(MbscBase);\n\nvar MbscScrollViewBaseModule = function () {\n  function MbscScrollViewBaseModule() {}\n\n  MbscScrollViewBaseModule.ɵfac = function MbscScrollViewBaseModule_Factory(t) {\n    return new (t || MbscScrollViewBaseModule)();\n  };\n\n  MbscScrollViewBaseModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscScrollViewBaseModule\n  });\n  MbscScrollViewBaseModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscScrollViewBaseModule, {\n      declarations: function () {\n        return [MbscScrollItemBase, MbscScrollViewBase];\n      },\n      imports: function () {\n        return [CommonModule, MbscBaseModule];\n      }\n    });\n  })();\n\n  return MbscScrollViewBaseModule;\n}();\n\nvar MbscNavItemBase = function (_super) {\n  __extends(MbscNavItemBase, _super);\n\n  function MbscNavItemBase(notifyItemService, elem) {\n    var _this = _super.call(this, notifyItemService, elem) || this;\n\n    _this.selectedChange = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscNavItemBase.prototype, \"disabled\", {\n    get: function () {\n      return this._disabled;\n    },\n    set: function (v) {\n      this._disabled = v;\n\n      if (this._instance) {\n        if (this._disabled) {\n          this._instance.disable(this._elem.nativeElement);\n        } else {\n          this._instance.enable(this._elem.nativeElement);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscNavItemBase.prototype, \"selected\", {\n    get: function () {\n      return this._selected;\n    },\n    set: function (v) {\n      this._selected = v;\n\n      if (this._instance) {\n        if (this._selected) {\n          this._instance.select(this._elem.nativeElement);\n        } else {\n          this._instance.deselect(this._elem.nativeElement);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscNavItemBase.prototype.toggle = function () {\n    this._selected = !this._selected;\n    this.selectedChange.emit(this._selected);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNavItemBase.prototype, \"icon\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], MbscNavItemBase.prototype, \"disabled\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], MbscNavItemBase.prototype, \"selected\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscNavItemBase.prototype, \"selectedChange\", void 0);\n\n  MbscNavItemBase = __decorate([__metadata(\"design:paramtypes\", [MbscNotifyItemService, ElementRef])], MbscNavItemBase);\n\n  MbscNavItemBase.ɵfac = function MbscNavItemBase_Factory(t) {\n    return new (t || MbscNavItemBase)(ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MbscNavItemBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscNavItemBase,\n    selectors: [[\"mbsc-ni-b\"]],\n    inputs: {\n      disabled: \"disabled\",\n      selected: \"selected\",\n      icon: \"icon\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNavItemBase;\n}(MbscScrollItemBase);\n\nvar MbscNavigationBase = function (_super) {\n  __extends(MbscNavigationBase, _super);\n\n  function MbscNavigationBase(initialElem, zone, notifyItemService) {\n    return _super.call(this, initialElem, zone, notifyItemService) || this;\n  }\n\n  MbscNavigationBase.prototype.tapHandler = function (event, inst) {\n    var selection = this.select || inst && inst.settings.select;\n\n    switch (selection) {\n      case 'multiple':\n        {\n          var item = this._getItem(event.target);\n\n          item.toggle();\n          break;\n        }\n\n      case 'single':\n        {\n          var item = this._getItem(event.target);\n\n          if (item && !item.selected) {\n            this.items.forEach(function (item) {\n              if (item.selected) {\n                item.toggle();\n              }\n            });\n            item.toggle();\n          }\n        }\n    }\n\n    event.inst = inst;\n    this.onItemTap.emit(event);\n  };\n\n  MbscNavigationBase.prototype._getItem = function (nativeEl) {\n    return this.items.find(function (item) {\n      return item.nativeElement === nativeEl;\n    });\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNavigationBase.prototype, \"display\", void 0);\n\n  __decorate([Input$1('options'), __metadata(\"design:type\", Object)], MbscNavigationBase.prototype, \"options\", void 0);\n\n  __decorate([ContentChildren(MbscNavItemBase), __metadata(\"design:type\", QueryList)], MbscNavigationBase.prototype, \"items\", void 0);\n\n  MbscNavigationBase = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscNotifyItemService])], MbscNavigationBase);\n\n  MbscNavigationBase.ɵfac = function MbscNavigationBase_Factory(t) {\n    return new (t || MbscNavigationBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService));\n  };\n\n  MbscNavigationBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscNavigationBase,\n    selectors: [[\"mbsc-n-b\"]],\n    contentQueries: function MbscNavigationBase_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MbscNavItemBase, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    inputs: {\n      display: \"display\",\n      options: \"options\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNavigationBase;\n}(MbscScrollViewBase);\n\nvar MbscNavigationBaseModule = function () {\n  function MbscNavigationBaseModule() {}\n\n  MbscNavigationBaseModule.ɵfac = function MbscNavigationBaseModule_Factory(t) {\n    return new (t || MbscNavigationBaseModule)();\n  };\n\n  MbscNavigationBaseModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscNavigationBaseModule\n  });\n  MbscNavigationBaseModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscScrollViewBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscNavigationBaseModule, {\n      declarations: function () {\n        return [MbscNavigationBase, MbscNavItemBase];\n      },\n      imports: function () {\n        return [CommonModule, MbscScrollViewBaseModule];\n      }\n    });\n  })();\n\n  return MbscNavigationBaseModule;\n}();\n\nvar MbscNavItem = function (_super) {\n  __extends(MbscNavItem, _super);\n\n  function MbscNavItem(notifyItemService, elem, inj, routerToken) {\n    var _this = _super.call(this, notifyItemService, elem) || this;\n\n    _this.inj = inj;\n    _this.routerLinkActiveOptions = {\n      exact: false\n    };\n    _this.instObserver = notifyItemService.onInstanceReady().subscribe(function (instance) {\n      if (_this.initialBadge) {\n        instance.setBadge(_this.nativeElement, _this.initialBadge);\n      }\n    });\n\n    if (routerToken) {\n      _this.injectedRouter = routerToken;\n      _this.activatedRoute = _this.inj.get(_this.injectedRouter.routerState.root.__proto__.constructor, null);\n    }\n\n    if (_this.injectedRouter) {\n      _this.injectedRouter.events.subscribe(function (ev) {\n        clearTimeout(_this.debounceHandler);\n        _this.debounceHandler = setTimeout(function () {\n          _this.checkSelected();\n        });\n      });\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(MbscNavItem.prototype, \"badge\", {\n    set: function (badge) {\n      if (this._instance) {\n        this._instance.setBadge(this.nativeElement, badge);\n      } else {\n        this.initialBadge = badge;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscNavItem.prototype.checkSelected = function () {\n    if (this.injectedRouter && this.routerLink !== null && this.routerLink !== undefined) {\n      var commands = Array.isArray(this.routerLink) ? this.routerLink : [this.routerLink];\n      var urlTree = this.injectedRouter.createUrlTree(commands, {\n        relativeTo: this.activatedRoute\n      });\n      var selected = this.injectedRouter.isActive(urlTree, this.routerLinkActiveOptions.exact);\n\n      if (selected) {\n        this._selected = selected;\n      }\n\n      if (this._instance) {\n        if (selected) {\n          this._instance.select(this._elem.nativeElement);\n        } else {\n          this._instance.deselect(this._elem.nativeElement);\n        }\n      }\n    }\n  };\n\n  MbscNavItem.prototype.ngOnDestroy = function () {\n    this.notifyItemService.onInstanceReady().unsubscribe(this.instObserver);\n\n    _super.prototype.ngOnDestroy.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscNavItem.prototype, \"badge\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscNavItem.prototype, \"routerLink\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscNavItem.prototype, \"routerLinkActiveOptions\", void 0);\n\n  MbscNavItem = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [MbscNotifyItemService, ElementRef, Injector, MbscRouterToken])], MbscNavItem);\n\n  MbscNavItem.ɵfac = function MbscNavItem_Factory(t) {\n    return new (t || MbscNavItem)(ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(MbscRouterToken, 8));\n  };\n\n  MbscNavItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscNavItem,\n    selectors: [[\"mbsc-nav-item\"]],\n    hostVars: 4,\n    hostBindings: function MbscNavItem_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-icon\", ctx.icon)(\"data-disabled\", ctx.disabled)(\"data-selected\", ctx.selected)(\"data-id\", ctx.id);\n      }\n    },\n    inputs: {\n      badge: \"badge\",\n      routerLink: \"routerLink\",\n      routerLinkActiveOptions: \"routerLinkActiveOptions\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscNavItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNavItem;\n}(MbscNavItemBase);\n\nvar MbscNav = function (_super) {\n  __extends(MbscNav, _super);\n\n  function MbscNav(initialElem, zone, notifyItemService, optionService) {\n    var _this = _super.call(this, initialElem, zone, notifyItemService) || this;\n\n    _this.optionService = optionService;\n    _this.select = 'single';\n    _this.onMenuHide = new EventEmitter();\n    _this.onMenuShow = new EventEmitter();\n    return _this;\n  }\n\n  MbscNav.prototype.initControl = function () {\n    var _this = this;\n\n    var onItemTap = this.tapHandler.bind(this);\n    var onItemTapUser = this.options && this.options.onItemTap;\n\n    if (onItemTapUser) {\n      onItemTap = function (event, inst) {\n        _this.tapHandler(event, inst);\n\n        return onItemTapUser(event, inst);\n      };\n    }\n\n    var options = extend$1({\n      type: this.type\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, {\n      onItemTap: onItemTap\n    });\n    this.instance = new Navigation(this.initialElem.nativeElement, options);\n    this.notifyItemService.notifyInstanceReady(this.instance);\n    this.addRemoveObserver = this.notifyItemService.onAddRemove().subscribe(function (item) {\n      _this.instance.refresh();\n    });\n  };\n\n  MbscNav.prototype.ngOnDestroy = function () {\n    this.notifyItemService.onAddRemove().unsubscribe(this.addRemoveObserver);\n\n    _super.prototype.ngOnDestroy.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNav.prototype, \"moreText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNav.prototype, \"moreIcon\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNav.prototype, \"menuText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNav.prototype, \"menuIcon\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscNav.prototype, \"onMenuHide\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscNav.prototype, \"onMenuShow\", void 0);\n\n  __decorate([ContentChildren(MbscNavItem), __metadata(\"design:type\", QueryList)], MbscNav.prototype, \"items\", void 0);\n\n  MbscNav = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscNotifyItemService, MbscOptionsService])], MbscNav);\n\n  MbscNav.ɵfac = function MbscNav_Factory(t) {\n    return new (t || MbscNav)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscNav.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscNav,\n    selectors: [[\"mbsc-nav\"]],\n    contentQueries: function MbscNav_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MbscNavItem, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    hostAttrs: [1, \"mbsc-cloak\"],\n    inputs: {\n      moreText: \"moreText\",\n      moreIcon: \"moreIcon\",\n      menuText: \"menuText\",\n      menuIcon: \"menuIcon\"\n    },\n    outputs: {\n      onMenuHide: \"onMenuHide\",\n      onMenuShow: \"onMenuShow\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscNotifyItemService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscNav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNav;\n}(MbscNavigationBase);\n\nvar MbscBottomNav = function (_super) {\n  __extends(MbscBottomNav, _super);\n\n  function MbscBottomNav(initialElem, zone, navItemService, optionService) {\n    var _this = _super.call(this, initialElem, zone, navItemService, optionService) || this;\n\n    _this.type = 'bottom';\n    return _this;\n  }\n\n  MbscBottomNav = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscNotifyItemService, MbscOptionsService])], MbscBottomNav);\n\n  MbscBottomNav.ɵfac = function MbscBottomNav_Factory(t) {\n    return new (t || MbscBottomNav)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscBottomNav.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscBottomNav,\n    selectors: [[\"mbsc-bottom-nav\"]],\n    hostAttrs: [1, \"mbsc-cloak\"],\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscNotifyItemService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscBottomNav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscBottomNav;\n}(MbscNav);\n\nvar MbscHamburgerNav = function (_super) {\n  __extends(MbscHamburgerNav, _super);\n\n  function MbscHamburgerNav(initialElem, zone, navItemService, optionService) {\n    var _this = _super.call(this, initialElem, zone, navItemService, optionService) || this;\n\n    _this.type = 'hamburger';\n    return _this;\n  }\n\n  MbscHamburgerNav = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscNotifyItemService, MbscOptionsService])], MbscHamburgerNav);\n\n  MbscHamburgerNav.ɵfac = function MbscHamburgerNav_Factory(t) {\n    return new (t || MbscHamburgerNav)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscHamburgerNav.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscHamburgerNav,\n    selectors: [[\"mbsc-hamburger-nav\"]],\n    hostAttrs: [1, \"mbsc-cloak\"],\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscNotifyItemService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscHamburgerNav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscHamburgerNav;\n}(MbscNav);\n\nvar MbscTabNav = function (_super) {\n  __extends(MbscTabNav, _super);\n\n  function MbscTabNav(initialElem, zone, navItemService, optionService) {\n    var _this = _super.call(this, initialElem, zone, navItemService, optionService) || this;\n\n    _this.type = 'tab';\n    return _this;\n  }\n\n  MbscTabNav = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscNotifyItemService, MbscOptionsService])], MbscTabNav);\n\n  MbscTabNav.ɵfac = function MbscTabNav_Factory(t) {\n    return new (t || MbscTabNav)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscTabNav.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscTabNav,\n    selectors: [[\"mbsc-tab-nav\"]],\n    hostAttrs: [1, \"mbsc-cloak\"],\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscNotifyItemService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscTabNav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTabNav;\n}(MbscNav);\n\nvar comps = [MbscNavItem, MbscNav, MbscBottomNav, MbscHamburgerNav, MbscTabNav];\n\nvar MbscNavigationModule = function () {\n  function MbscNavigationModule() {}\n\n  MbscNavigationModule_1 = MbscNavigationModule;\n\n  MbscNavigationModule.forRoot = function (config) {\n    return {\n      ngModule: MbscNavigationModule_1,\n      providers: [{\n        provide: MbscRouterToken,\n        useExisting: config.angularRouter\n      }]\n    };\n  };\n\n  var MbscNavigationModule_1;\n\n  MbscNavigationModule.ɵfac = function MbscNavigationModule_Factory(t) {\n    return new (t || MbscNavigationModule)();\n  };\n\n  MbscNavigationModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscNavigationModule\n  });\n  MbscNavigationModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscNavigationBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscNavigationModule, {\n      declarations: function () {\n        return [MbscNavItem, MbscNav, MbscBottomNav, MbscHamburgerNav, MbscTabNav];\n      },\n      imports: function () {\n        return [CommonModule, MbscNavigationBaseModule];\n      },\n      exports: function () {\n        return [MbscNavItem, MbscNav, MbscBottomNav, MbscHamburgerNav, MbscTabNav];\n      }\n    });\n  })();\n\n  return MbscNavigationModule;\n}();\n\nvar NumberScroller = Measurement;\npresets.number = presets.measurement;\n\nvar MbscNumber = function (_super) {\n  __extends(MbscNumber, _super);\n\n  function MbscNumber(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscNumber.prototype, \"value\", {\n    set: function (v) {\n      if (!this.control) {\n        this.setNewValueProxy(v);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscNumber.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var innerValue = this.instance.getVal();\n\n      if (innerValue !== v) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscNumber.prototype.initControl = function () {\n    var options = extend$1({\n      preset: 'number'\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new NumberScroller(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumber.prototype, \"decimalSeparator\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumber.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscNumber.prototype, \"invalid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumber.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumber.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumber.prototype, \"scale\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumber.prototype, \"step\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumber.prototype, \"wholeText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumber.prototype, \"fractionText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumber.prototype, \"signText\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscNumber.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-number'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscNumber.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-numberChange'), __metadata(\"design:type\", EventEmitter)], MbscNumber.prototype, \"onChangeEmitter\", void 0);\n\n  MbscNumber = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscNumber);\n\n  MbscNumber.ɵfac = function MbscNumber_Factory(t) {\n    return new (t || MbscNumber)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscNumber.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscNumber,\n    selectors: [[\"\", \"mbsc-number\", \"\"]],\n    inputs: {\n      value: [\"mbsc-number\", \"value\"],\n      decimalSeparator: \"decimalSeparator\",\n      defaultValue: \"defaultValue\",\n      invalid: \"invalid\",\n      max: \"max\",\n      min: \"min\",\n      scale: \"scale\",\n      step: \"step\",\n      wholeText: \"wholeText\",\n      fractionText: \"fractionText\",\n      signText: \"signText\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-numberChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumber;\n}(MbscScrollerBase);\n\nvar MbscNumberComponent = function (_super) {\n  __extends(MbscNumberComponent, _super);\n\n  function MbscNumberComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscNumberComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscNumberComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscNumberComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumberComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscNumberComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumberComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscNumberComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumberComponent.prototype, \"placeholder\", void 0);\n\n  MbscNumberComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscNumberComponent);\n\n  MbscNumberComponent.ɵfac = function MbscNumberComponent_Factory(t) {\n    return new (t || MbscNumberComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscNumberComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscNumberComponent,\n    selectors: [[\"mbsc-number\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscNumberComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscNumberComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumberComponent;\n}(MbscNumber);\n\nvar MbscNumberModule = function () {\n  function MbscNumberModule() {}\n\n  MbscNumberModule.ɵfac = function MbscNumberModule_Factory(t) {\n    return new (t || MbscNumberModule)();\n  };\n\n  MbscNumberModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscNumberModule\n  });\n  MbscNumberModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscScrollerBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscNumberModule, {\n      declarations: function () {\n        return [MbscNumber, MbscNumberComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscScrollerBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscNumber, MbscNumberComponent];\n      }\n    });\n  })();\n\n  return MbscNumberModule;\n}();\n\nvar presets$1 = {};\n\nvar Numpad = function Numpad(el, settings, inherit) {\n  var $markup,\n      deleteBtn,\n      disabledClass,\n      ph,\n      pos,\n      s,\n      mask,\n      sX,\n      sY,\n      eX,\n      eY,\n      diffX,\n      diffY,\n      action,\n      interval,\n      tempValueArray,\n      tempTotal,\n      trigger,\n      total,\n      valueArray,\n      $elm = $$1(el),\n      that = this,\n      actions = [],\n      tempActions = [],\n      tempVariables = {},\n      variables = {},\n      customKeys = {},\n      numericKeys = {\n    48: 0,\n    49: 1,\n    50: 2,\n    51: 3,\n    52: 4,\n    53: 5,\n    54: 6,\n    55: 7,\n    56: 8,\n    57: 9,\n    96: 0,\n    97: 1,\n    98: 2,\n    99: 3,\n    100: 4,\n    101: 5,\n    102: 6,\n    103: 7,\n    104: 8,\n    105: 9\n  };\n\n  function display(manual) {\n    // Validate\n    var i,\n        ret = s.validate.call(el, {\n      values: tempValueArray.slice(0),\n      variables: tempVariables\n    }, that) || [],\n        disabled = ret && ret.disabled || [];\n    that._isValid = ret.invalid ? false : true; // Generate formatted value\n\n    that._tempValue = s.formatValue.call(el, tempValueArray.slice(0), tempVariables, that);\n    pos = tempValueArray.length;\n    tempTotal = ret.length || total;\n\n    if (that._isVisible\n    /* TRIALCOND */\n    ) {\n      // Fill template with numbers\n      $$1('.mbsc-np-ph', $markup).each(function (i) {\n        $$1(this).html(s.fill == 'ltr' ? i >= pos ? ph : mask || tempValueArray[i] : i >= total - tempTotal ? i + pos < total ? ph : mask || tempValueArray[i + pos - total] : '');\n      }); // Fill variable placeholders\n\n      $$1('.mbsc-np-cph', $markup).each(function () {\n        $$1(this).html(tempVariables[$$1(this).attr('data-var')] || $$1(this).attr('data-ph'));\n      }); // Disable all numeric buttons if template is full\n\n      if (pos === total) {\n        for (i = 0; i <= 9; i++) {\n          disabled.push(i);\n        }\n      } // Disable invalid buttons\n\n\n      $$1('.mbsc-np-btn', $markup).removeClass(disabledClass);\n\n      for (i = 0; i < disabled.length; i++) {\n        $$1('.mbsc-np-btn[data-val=\"' + disabled[i] + '\"]', $markup).addClass(disabledClass);\n      } // Disable set button\n\n\n      if (that._isValid) {\n        $$1('.mbsc-fr-btn-s .mbsc-fr-btn', $markup).removeClass(disabledClass);\n      } else {\n        $$1('.mbsc-fr-btn-s .mbsc-fr-btn', $markup).addClass(disabledClass);\n      } // Fill input if in live mode\n\n\n      if (that.live) {\n        that._hasValue = manual || that._hasValue;\n        fillValue(manual, false, manual);\n\n        if (manual) {\n          trigger('onSet', {\n            valueText: that._value\n          });\n        }\n      }\n    }\n  }\n\n  function fillValue(fill, disp, change, temp) {\n    if (disp) {\n      display();\n    }\n\n    if (!temp) {\n      valueArray = tempValueArray.slice(0);\n      variables = extend$1({}, tempVariables);\n      actions = tempActions.slice(0);\n      that._value = that._hasValue ? that._tempValue : null;\n    }\n\n    if (fill) {\n      if (that._isInput) {\n        $elm.val(that._hasValue && that._isValid ? that._value : '');\n      }\n\n      trigger('onFill', {\n        valueText: that._hasValue ? that._tempValue : '',\n        change: change\n      });\n\n      if (change) {\n        that._preventChange = true;\n        $elm.trigger('change');\n      }\n    }\n  }\n\n  function loadValues(values) {\n    var i,\n        vars,\n        val = values || [],\n        ret = [];\n    tempActions = [];\n    tempVariables = {};\n\n    for (i = 0; i < val.length; i++) {\n      //if (isNaN(parseInt(val[i]))) {\n      if (/:/.test(val[i])) {\n        vars = val[i].split(':');\n        tempVariables[vars[0]] = vars[1];\n        tempActions.push(vars[0]);\n      } else {\n        ret.push(val[i]);\n        tempActions.push('digit');\n      }\n    }\n\n    return ret;\n  }\n\n  function triggerInput(btn, ev) {\n    trigger('onInput', {\n      domEvent: ev,\n      target: btn,\n      values: tempValueArray.slice(0),\n      valueText: that._tempValue,\n      variables: tempVariables\n    });\n  }\n\n  function addKeys(keys, pos) {\n    if (keys) {\n      keys = $$1.isArray(keys) ? keys : [keys];\n      keys.forEach(function (key) {\n        customKeys[key] = pos;\n      });\n    }\n  }\n\n  function onNumberTap(btn, val, ev) {\n    if (!pos && !val && !s.allowLeadingZero || btn.hasClass('mbsc-disabled') || btn.hasClass('mbsc-np-btn-empty')) {\n      return;\n    }\n\n    if (pos < total\n    /* TRIALCOND */\n    ) {\n      tempActions.push('digit');\n      tempValueArray.push(val);\n      display(true);\n      triggerInput(btn[0], ev);\n    }\n  }\n\n  function onCustomTap(btn, ev) {\n    var i,\n        v,\n        val = btn.attr('data-val'),\n        track = btn.attr('data-track') !== 'false',\n        variable = btn.attr('data-var');\n\n    if (!btn.hasClass('mbsc-disabled')) {\n      if (variable) {\n        v = variable.split(':');\n\n        if (track) {\n          tempActions.push(v[0]);\n        }\n\n        tempVariables[v[0]] = v[2] === undefined ? v[1] : tempVariables[v[0]] == v[1] ? v[2] : v[1];\n      }\n\n      if (val.length + pos <= tempTotal) {\n        for (i = 0; i < val.length; ++i) {\n          v = isNumeric(val[i]) ? +val[i] : val[i];\n\n          if (s.allowLeadingZero || pos || v) {\n            tempActions.push('digit');\n            tempValueArray.push(v);\n            pos = tempValueArray.length;\n          }\n        }\n      }\n\n      display(true);\n      triggerInput(btn[0], ev);\n    }\n  }\n\n  function onDeleteTap(ev) {\n    var i,\n        old,\n        act = tempActions.pop();\n\n    if (pos || act !== 'digit') {\n      if (act !== 'digit' && tempVariables[act]) {\n        delete tempVariables[act];\n        old = tempActions.slice(0);\n        tempActions = [];\n\n        for (i = 0; i < old.length; i++) {\n          if (old[i] !== act) {\n            tempActions.push(old[i]);\n          }\n        }\n      } else {\n        tempValueArray.pop();\n      }\n\n      display(true);\n      triggerInput(deleteBtn, ev);\n    }\n  }\n\n  function startDelete(ev) {\n    action = true;\n    sX = getCoord(ev, 'X');\n    sY = getCoord(ev, 'Y');\n    clearInterval(interval);\n    clearTimeout(interval);\n    onDeleteTap(ev);\n    interval = setInterval(function () {\n      onDeleteTap(ev);\n    }, 150);\n  }\n\n  function stopDelete() {\n    clearInterval(interval);\n    action = false;\n  }\n\n  function onStart(ev) {\n    if (testTouch(ev, this)) {\n      if (ev.type == 'keydown' && ev.keyCode != 32) {\n        return;\n      }\n\n      startDelete(ev);\n\n      if (ev.type == 'mousedown') {\n        $$1(document).on('mousemove', onMove).on('mouseup', onEnd);\n      }\n    }\n  }\n\n  function onMove(ev) {\n    if (action) {\n      eX = getCoord(ev, 'X');\n      eY = getCoord(ev, 'Y');\n      diffX = eX - sX;\n      diffY = eY - sY;\n\n      if (Math.abs(diffX) > 7 || Math.abs(diffY) > 7) {\n        stopDelete();\n      }\n    }\n  }\n\n  function onEnd(ev) {\n    if (action) {\n      ev.preventDefault();\n      stopDelete();\n\n      if (ev.type == 'mouseup') {\n        $$1(document).off('mousemove', onMove).off('mouseup', onEnd);\n      }\n    }\n  } // Call the parent constructor\n\n\n  Frame.call(this, el, settings, true); // Public functions\n\n  /**\r\n   * Sets the value\r\n   */\n\n  that.setVal = that._setVal = function (val, fill, change, temp) {\n    that._hasValue = val !== null && val !== undefined;\n    tempValueArray = loadValues($$1.isArray(val) ? val.slice(0) : s.parseValue.call(el, val, that));\n    fillValue(fill, true, change === undefined ? fill : change, temp);\n  };\n  /**\r\n   * Returns the selected value\r\n   */\n\n\n  that.getVal = that._getVal = function (temp) {\n    return that._hasValue || temp ? that[temp ? '_tempValue' : '_value'] : null;\n  };\n  /*\r\n   * Sets the value (passed as an array)\r\n   */\n\n\n  that.setArrayVal = that.setVal;\n  /*\r\n   * Returns the selected wheel values as an array\r\n   */\n\n  that.getArrayVal = function (temp) {\n    return temp ? tempValueArray.slice(0) : that._hasValue ? valueArray.slice(0) : null;\n  }; // Protected overrides\n\n  /* TRIALFUNC */\n\n\n  that._readValue = function () {\n    var v = $elm.val() || '';\n\n    if (v !== '') {\n      that._hasValue = true;\n    }\n\n    if (mask) {\n      tempVariables = {};\n      tempActions = [];\n      tempValueArray = [];\n    } else {\n      tempVariables = that._hasValue ? variables : {};\n      tempActions = that._hasValue ? actions : [];\n      tempValueArray = that._hasValue && valueArray ? valueArray.slice(0) : loadValues(s.parseValue.call(el, v, that));\n      fillValue(false, true);\n    }\n  };\n\n  that._fillValue = function () {\n    that._hasValue = true;\n    fillValue(true, false, true);\n  };\n\n  that._generateContent = function () {\n    var i,\n        j,\n        v,\n        k = 1,\n        leftKey = s.leftKey,\n        rightKey = s.rightKey,\n        template = '',\n        html = ''; // Display\n\n    html += '<div class=\"mbsc-np-hdr\"><div role=\"button\" tabindex=\"0\" aria-label=\"' + s.deleteText + '\" class=\"mbsc-np-del mbsc-fr-btn-e mbsc-ic mbsc-ic-' + s.deleteIcon + '\"></div><div class=\"mbsc-np-dsp\">'; // Process template\n\n    template = s.template.replace(/d/g, '<span class=\"mbsc-np-ph\">' + ph + '</span>').replace(/&#100;/g, 'd'); // Generate the template for custom buttons\n\n    template = template.replace(/{([a-zA-Z0-9]*):?([a-zA-Z0-9\\-_]*)}/g, '<span class=\"mbsc-np-cph\" data-var=\"$1\" data-ph=\"$2\">$2</span>');\n    html += template;\n    html += '</div></div>'; // Digit buttons\n\n    html += '<div class=\"mbsc-np-tbl-c mbsc-w-p\"><div class=\"mbsc-np-tbl\">';\n\n    for (i = 0; i < 4; i++) {\n      html += '<div class=\"mbsc-np-row\">';\n\n      for (j = 0; j < 3; j++) {\n        v = k;\n\n        if (k == 10 || k == 12) {\n          v = '';\n        } else if (k == 11) {\n          v = 0;\n        }\n\n        if (v === '') {\n          if (k == 10 && leftKey) {\n            addKeys(leftKey.keys, 'left');\n            html += '<div role=\"button\" tabindex=\"0\" class=\"mbsc-np-btn mbsc-np-btn-custom mbsc-np-btn-custom-left mbsc-fr-btn-e\" ' + (leftKey.variable ? 'data-var=\"' + leftKey.variable + '\"' : '') + ' data-val=\"' + (leftKey.value || '') + '\" ' + (leftKey.track !== undefined ? ' data-track=\"' + leftKey.track + '\"' : '') + '>' + leftKey.text + '</div>';\n          } else if (k == 12 && s.rightKey) {\n            addKeys(rightKey.keys, 'right');\n            html += '<div role=\"button\" tabindex=\"0\" class=\"mbsc-np-btn mbsc-np-btn-custom mbsc-np-btn-custom-right mbsc-fr-btn-e\" ' + (rightKey.variable ? 'data-var=\"' + rightKey.variable + '\"' : '') + ' data-val=\"' + (rightKey.value || '') + '\" ' + (rightKey.track !== undefined ? ' data-track=\"' + rightKey.track + '\"' : '') + ' >' + rightKey.text + '</div>';\n          } else {\n            html += '<div class=\"mbsc-np-btn mbsc-np-btn-empty\"></div>';\n          }\n        } else {\n          html += '<div tabindex=\"0\" role=\"button\" class=\"mbsc-np-btn mbsc-fr-btn-e\" data-val=\"' + v + '\">' + v\n          /* TRIAL */\n          + '</div>';\n        }\n\n        k++;\n      }\n\n      html += '</div>';\n    }\n\n    html += '</div></div>';\n    return html;\n  };\n\n  that._markupReady = function () {\n    $markup = that._markup;\n    display();\n  };\n\n  that._attachEvents = function ($m) {\n    $m.on('keydown', function (ev) {\n      var btn,\n          key = ev.keyCode;\n\n      if (customKeys[key] !== undefined) {\n        btn = $$1('.mbsc-np-btn-custom-' + customKeys[key], $m);\n\n        if (btn.length) {\n          if (btn.attr('data-var') === 'sign:-:') {\n            tempVariables.sign = key === 107 || key === 187 ? '-' : '';\n          }\n\n          onCustomTap(btn, ev);\n        }\n      } else if (numericKeys[key] !== undefined) {\n        onNumberTap($$1('.mbsc-np-btn[data-val=\"' + numericKeys[key] + '\"]', $m), numericKeys[key], ev);\n      } else if (key == 8) {\n        ev.preventDefault();\n        onDeleteTap(ev);\n      }\n    });\n    that.tap($$1('.mbsc-np-btn', $m), function (ev) {\n      var btn = $$1(this);\n\n      if (btn.hasClass('mbsc-np-btn-custom')) {\n        onCustomTap(btn, ev);\n      } else {\n        onNumberTap(btn, +btn.attr('data-val'), ev);\n      }\n    }, false, 30, true);\n    deleteBtn = $$1('.mbsc-np-del', $m)[0];\n    listen(deleteBtn, 'touchstart', onStart, {\n      passive: true\n    });\n    listen(deleteBtn, 'mousedown', onStart);\n    listen(deleteBtn, 'keydown', onStart);\n    listen(deleteBtn, 'touchmove', onMove, {\n      passive: true\n    });\n    listen(deleteBtn, 'mousemove', onMove);\n    listen(deleteBtn, 'touchend', onEnd);\n    listen(deleteBtn, 'mouseup', onEnd);\n    listen(deleteBtn, 'keyup', onEnd);\n  };\n\n  that.__init = function () {\n    s = that.settings;\n    s.template = s.template.replace(/\\\\d/, '&#100;');\n    ph = s.placeholder;\n    total = (s.template.match(/d/g) || []).length;\n    disabledClass = 'mbsc-disabled ' + (s.disabledClass || '');\n    mask = s.mask;\n    trigger = that.trigger;\n\n    if (mask && $elm.is('input')) {\n      $elm.attr('type', 'password');\n    }\n  };\n\n  that._indexOf = function (cont, v) {\n    var i;\n\n    for (i = 0; i < cont.length; ++i) {\n      if (cont[i].toString() === v.toString()) {\n        return i;\n      }\n    }\n\n    return -1;\n  }; // Constructor\n\n\n  if (!inherit) {\n    that.init();\n  }\n}; // Extend defaults\n\n\nNumpad.prototype = {\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _responsive: true,\n  _class: 'numpad',\n  _presets: presets$1,\n  _defaults: extend$1({}, Frame.prototype._defaults, {\n    template: 'dd.dd',\n    placeholder: '0',\n    deleteIcon: 'backspace',\n    allowLeadingZero: false,\n    headerText: false,\n    fill: 'rtl',\n    compClass: 'mbsc-np',\n    // Localization\n    deleteText: 'Delete',\n    decimalSeparator: '.',\n    thousandsSeparator: ',',\n    // @todo\n    // ---\n    //fillFullTemplate: true,\n    // ---\n    validate: noop,\n    parseValue: noop,\n    formatValue: function formatValue(value, variables, inst) {\n      var i,\n          j = 1,\n          s = inst.settings,\n          ph = s.placeholder,\n          template = s.template,\n          valueLen = value.length,\n          tempLen = template.length,\n          res = '';\n\n      for (i = 0; i < tempLen; i++) {\n        if (template[tempLen - i - 1] == 'd') {\n          if (j <= valueLen) {\n            res = value[valueLen - j] + res;\n          } else {\n            res = ph + res;\n          }\n\n          j++;\n        } else {\n          res = template[tempLen - i - 1] + res;\n        }\n      }\n\n      $$1.each(variables, function (i, v) {\n        res = res.replace('{' + i + '}', v);\n      });\n      return $$1('<div>' + res + '</div>').text();\n    }\n  })\n};\nclasses.Numpad = Numpad;\nmobiscroll.themes.numpad = mobiscroll.themes.frame; // Decimal preset\n// ---\n\nvar decimalDefaults = {\n  entryMode: 'template',\n  min: 0,\n  max: 99.99,\n  maxScale: 4,\n  prefix: '',\n  suffix: '',\n  returnAffix: false\n};\n\npresets$1.decimal = function (inst) {\n  var orig = extend$1({}, inst.settings),\n      conditionalDefaults = {\n    scale: orig.entryMode == 'freeform' ? undefined : 2\n  },\n      s = extend$1(inst.settings, decimalDefaults, conditionalDefaults, orig),\n      scale = s.scale,\n      min = +s.min.toFixed(scale),\n      max = +s.max.toFixed(scale),\n      negativeNum = min < 0,\n      thousandRegex = new RegExp(s.thousandsSeparator, 'g'),\n      maxIntLength = (Math.floor(Math.max(max, Math.abs(min))) + '').length + 1,\n      freeEntry = s.entryMode == 'freeform';\n  /**\r\n   * Returns the number from the digits\r\n   * @param {Array} digitArray\r\n   * @param {boolean} isNegative\r\n   */\n\n  function getNumber(digitArray, isNegative) {\n    var ret = +digitArray.map(function (v, i) {\n      return (i === 0 && v === '.' ? '0' : '') + v;\n    }).join(''); // in the case of NOT the freeEntry mode, the decimal point wont be part of the digits array\n    // in that case the value will need to be adjusted to the right scale\n\n    if (!freeEntry) {\n      for (var i = 0; i < scale; i++) {\n        ret /= 10;\n      }\n    }\n\n    return isNegative ? ret * -1 : ret;\n  }\n  /**\r\n   * Returns the formatted value from the array of digits\r\n   * @param {Array} digitArray\r\n   */\n\n\n  function getFormatted(digitArray, forInput) {\n    var numberStr = '';\n\n    if (freeEntry && (scale === undefined || !forInput)) {\n      if (digitArray[0] === '.') {\n        // add missing leading zero when only the decimal point is pressed\n        numberStr += '0';\n      }\n\n      numberStr += digitArray.join('');\n    } else {\n      numberStr = getNumber(digitArray).toFixed(scale);\n    } // split the value by the decimal separator to add thousand separators to the integer part\n\n\n    var parts = numberStr.split('.'),\n        integer = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, s.thousandsSeparator),\n        dec = parts[1] ? s.decimalSeparator + parts[1] : ''; // when decimal separator also needed when there is no decimal part in free entry mode\n    // because this function also used for the displayed number on the numpad, not only for the input\n\n    if (parts[1] !== undefined && !parts[1].length && freeEntry) {\n      dec = s.decimalSeparator;\n    }\n\n    return integer + dec;\n  } // Extended methods\n  // ---\n\n\n  inst.setVal = function (val, fill, change, temp) {\n    if (typeof val === 'string') {\n      val = +val.replace(s.thousandsSeparator, '').replace(s.decimalSeparator, '.');\n    }\n\n    return inst._setVal(constrain(val, min, max), fill, change, temp);\n  };\n\n  inst.getVal = function (temp) {\n    var val = inst._getVal(temp),\n        valNr = (val + '').replace(thousandRegex, '').replace(s.decimalSeparator, '.');\n\n    return isNumeric(valNr) ? +valNr : val;\n  }; // ---\n\n\n  var numberTemplate = Array(maxIntLength).join('d'); // in the case of freeEntry, the decimal point should not be part of the template\n\n  if (freeEntry) {\n    if (scale !== undefined) {\n      // +2 index required:\n      // - 1 for the decimal point\n      // - 1 for the join method, since the \"d\"s will be the separators (and there's one separator less than value)\n      numberTemplate += scale ? Array(scale + 2).join('d') : '';\n    } else {\n      numberTemplate += Array(s.maxScale + 2).join('d');\n    }\n  } else {\n    // +1 required for the join method, since the \"d\"s will be the separators (and there's one separator less than value)\n    numberTemplate += scale ? '.' + Array(scale + 1).join('d') : '';\n  }\n\n  var template = (negativeNum ? '{sign}' : '') + s.prefix.replace(/d/g, '\\\\d') + numberTemplate + s.suffix.replace(/d/g, '\\\\d');\n  return {\n    template: template,\n    leftKey: negativeNum ? {\n      text: '-/+',\n      variable: 'sign:-:',\n      track: false,\n      keys: [107, 109, 187, 189]\n    } : undefined,\n    rightKey: freeEntry ? {\n      text: s.decimalSeparator,\n      value: '.',\n      keys: [110, 190]\n    } : undefined,\n    allowLeadingZero: freeEntry,\n    parseValue: function parseValue(value) {\n      var i,\n          m,\n          v = value || s.defaultValue,\n          ret = [],\n          fixScale = scale !== undefined ? scale : s.maxScale;\n\n      if (value === 0 || value === '0') {\n        return [0];\n      }\n\n      if (v) {\n        v = (v + '').replace(thousandRegex, '').replace(s.decimalSeparator, '.');\n        m = v.match(/\\d+\\.?\\d*/g);\n\n        if (m) {\n          m = (+m[0]).toFixed(fixScale);\n\n          for (i = 0; i < m.length; i++) {\n            if (m[i] != '.') {\n              if (+m[i]) {\n                ret.push(+m[i]);\n              } else if (ret.length) {\n                // No leading 0s\n                // in freeEntry mode, zeros after the decimal point are only necessary if there are other nonzero digits after them\n                // for example 10.0001 - decimal zeros are required => 10.0001 => [1, 0, ., 0, 0, 0, 1]\n                // for example 10.1000 - decimal zeros are not required => 10.1 => [1, 0, ., 1]\n                var decIndex = m.indexOf('.');\n                var nonZero = m.length > i + 1 && m.substring(i + 1).match(/[1-9]+/);\n\n                if (!freeEntry || i < decIndex || nonZero) {\n                  ret.push(0);\n                }\n              }\n            } else if (freeEntry) {\n              // in the case of freeEntry, the decimal point should be part of the input digits\n              ret.push('.');\n            }\n          }\n\n          var decimalIndex = m.indexOf('.'); // if there are no digits after the point remove the point\n\n          if (m.length <= decimalIndex + 1 || !m.substring(decimalIndex + 1).match(/[1-9]+/)) {\n            ret.splice(ret.indexOf('.'), 1);\n          }\n        }\n      }\n\n      if (value < 0) {\n        // make the sign the last thing to manipulate\n        ret.unshift('sign:' + '-');\n      }\n\n      return ret;\n    },\n    formatValue: function formatValue(value, variables) {\n      var v = getFormatted(value, true),\n          nr = getNumber(value, variables && variables.sign == '-');\n      return (nr < 0 ? '-' : '') + (s.returnAffix ? s.prefix + v + s.suffix : v);\n    },\n    validate: function validate(data) {\n      var i,\n          digits = data.values,\n          v = getFormatted(digits),\n          nr = getNumber(digits, data.variables && data.variables.sign == '-'),\n          disabled = [],\n          invalid = nr > max || nr < min || (s.invalid ? inst._indexOf(s.invalid, nr) != -1 : false);\n\n      if (!digits.length && !s.allowLeadingZero && !freeEntry) {\n        disabled.push(0);\n      }\n\n      if (digits.length >= maxIntLength || digits.indexOf('.') !== -1) {\n        disabled.push('.');\n      }\n\n      if (freeEntry) {\n        if (digits.length == 1 && digits[0] === 0) {\n          for (i = 0; i <= 9; i++) {\n            disabled.push(i);\n          }\n        }\n\n        if (!digits.length || digits[digits.length - 1] == '.') {\n          invalid = true;\n        } // Only allow max maxScale decimal values\n\n\n        var sca = scale !== undefined ? scale : s.maxScale; // >= meaning: starting zero digit may be missing, that's why\n\n        if (digits.length >= sca + 1 && digits[digits.length - sca - 1] == '.') {\n          for (i = 0; i <= 9; i++) {\n            disabled.push(i);\n          }\n        }\n      } // Display the formatted value\n\n\n      if (inst.isVisible()) {\n        $$1('.mbsc-np-dsp', inst._markup).html((data.variables.sign || '') + s.prefix + v + s.suffix || '&nbsp;');\n      }\n\n      return {\n        disabled: disabled,\n        invalid: invalid\n      };\n    }\n  };\n}; // ---\n// Timespan preset\n// ---\n\n\nfunction getSeconds(value) {\n  var i = 0,\n      m = 1,\n      ret = 0;\n\n  while (value.length) {\n    if (i > 3) {\n      m = 60 * 60;\n    } else if (i > 1) {\n      m = 60;\n    }\n\n    ret = ret + value.pop() * m * (i % 2 ? 10 : 1);\n    i++;\n  }\n\n  return ret;\n}\n\nvar parts = ['h', 'm', 's'],\n    timespanDefaults = {\n  min: 0,\n  max: 362439,\n  //99 * 60 * 60 + 99 * 60 + 99\n  defaultValue: 0,\n  hourTextShort: 'h',\n  minuteTextShort: 'm',\n  secTextShort: 's'\n};\n\npresets$1.timespan = function (inst) {\n  var orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, timespanDefaults, orig),\n      labels = {\n    h: s.hourTextShort.replace(/d/g, '\\\\d'),\n    m: s.minuteTextShort.replace(/d/g, '\\\\d'),\n    s: s.secTextShort.replace(/d/g, '\\\\d')\n  },\n      template = 'd<span class=\"mbsc-np-sup mbsc-np-time\">' + labels.s + '</span>';\n\n  function formatTime(seconds) {\n    var p,\n        ret = '',\n        m = 60 * 60;\n    $$1(parts).each(function (i, v) {\n      p = Math.floor(seconds / m);\n      seconds -= p * m;\n      m /= 60;\n\n      if (p > 0 || v == 's' && !ret) {\n        ret = ret + (ret ? ' ' : '') + p + labels[v];\n      }\n    });\n    return ret;\n  }\n\n  if (s.max > 9) {\n    template = 'd' + template;\n  }\n\n  if (s.max > 99) {\n    template = '<span class=\"mbsc-np-ts-m\">' + (s.max > 639 ? 'd' : '') + 'd</span><span class=\"mbsc-np-sup mbsc-np-time\">' + labels.m + '</span>' + template;\n  }\n\n  if (s.max > 6039) {\n    template = '<span class=\"mbsc-np-ts-h\">' + (s.max > 38439 ? 'd' : '') + 'd</span><span class=\"mbsc-np-sup mbsc-np-time\">' + labels.h + '</span>' + template;\n  } // Extended methods\n  // ---\n\n\n  inst.setVal = function (val, fill, change, temp) {\n    if (isNumeric(val)) {\n      val = formatTime(val);\n    }\n\n    return inst._setVal(val, fill, change, temp);\n  };\n\n  inst.getVal = function (temp) {\n    return inst._hasValue || temp ? getSeconds(inst.getArrayVal(temp)) : null;\n  }; // ---\n\n\n  return {\n    template: template,\n    parseValue: function parseValue(value) {\n      var p,\n          vv = value || formatTime(s.defaultValue),\n          ret = [];\n\n      if (vv) {\n        $$1(parts).each(function (i, v) {\n          p = new RegExp('(\\\\d+)' + labels[v], 'gi').exec(vv);\n\n          if (p) {\n            p = +p[1];\n\n            if (p > 9) {\n              ret.push(Math.floor(p / 10));\n              ret.push(p % 10);\n            } else {\n              if (ret.length) {\n                // No leading 0s\n                ret.push(0);\n              }\n\n              if (p || ret.length) {\n                // No leading 0s\n                ret.push(p);\n              }\n            }\n          } else if (ret.length) {\n            ret.push(0);\n            ret.push(0);\n          }\n        });\n      }\n\n      return ret;\n    },\n    formatValue: function formatValue(value) {\n      return formatTime(getSeconds(value));\n    },\n    validate: function validate(data) {\n      var value = data.values,\n          v = getSeconds(value.slice(0)),\n          disabled = [];\n\n      if (!value.length) {\n        disabled.push(0);\n      }\n\n      return {\n        disabled: disabled,\n        invalid: v > s.max || v < s.min || (s.invalid ? inst._indexOf(s.invalid, +v) != -1 : false)\n      };\n    }\n  };\n}; // ---\n// Time preset\n// ---\n\n\nvar timeDefaults = {\n  timeFormat: 'hh:ii A',\n  amText: 'am',\n  pmText: 'pm'\n};\n\npresets$1.time = function (inst) {\n  var orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, timeDefaults, orig),\n      timeFormat = s.timeFormat.split(':'),\n      isAmPM = s.timeFormat.match(/a/i),\n      am = isAmPM ? isAmPM[0] == 'a' ? s.amText : s.amText.toUpperCase() : '',\n      pm = isAmPM ? isAmPM[0] == 'a' ? s.pmText : s.pmText.toUpperCase() : '',\n      l = 0,\n      minH = s.min ? '' + s.min.getHours() : '',\n      maxH = s.max ? '' + s.max.getHours() : '',\n      minM = s.min ? '' + (s.min.getMinutes() < 10 ? '0' + s.min.getMinutes() : s.min.getMinutes()) : '',\n      maxM = s.max ? '' + (s.max.getMinutes() < 10 ? '0' + s.max.getMinutes() : s.max.getMinutes()) : '',\n      minS = s.min ? '' + (s.min.getSeconds() < 10 ? '0' + s.min.getSeconds() : s.min.getSeconds()) : '',\n      maxS = s.max ? '' + (s.max.getSeconds() < 10 ? '0' + s.max.getSeconds() : s.max.getSeconds()) : '';\n\n  if (s.min) {\n    s.min.setFullYear(2014, 7, 20);\n  }\n\n  if (s.max) {\n    s.max.setFullYear(2014, 7, 20);\n  }\n\n  function getFormattedTime(value, variables) {\n    var i,\n        ret = '';\n\n    for (i = 0; i < value.length; ++i) {\n      ret += value[i] + (i % 2 == (value.length % 2 == 1 ? 0 : 1) && i != value.length - 1 ? ':' : '');\n    }\n\n    $$1.each(variables, function (i, v) {\n      ret += ' ' + v;\n    });\n    return ret;\n  }\n\n  function disableButtons(value) {\n    var i,\n        isMinH,\n        isMaxH,\n        isMinM,\n        isMaxM,\n        invH,\n        invM,\n        invS,\n        hour,\n        minutes,\n        disabled = [],\n        digitNr = 2 * timeFormat.length;\n    l = digitNr;\n\n    if (!value.length) {\n      if (isAmPM) {\n        disabled.push(0);\n        disabled.push(s.leftKey.value);\n      }\n\n      disabled.push(s.rightKey.value);\n    }\n\n    if (!isAmPM && (digitNr - value.length < 2 || value[0] != 1 && (value[0] > 2 || value[1] > 3) && digitNr - value.length <= 2)) {\n      disabled.push('30');\n      disabled.push('00');\n    }\n\n    if ((isAmPM ? value[0] > 1 || value[1] > 2 : value[0] != 1 && (value[0] > 2 || value[1] > 3)) && value[0]) {\n      // if the hour number is not a two digit number\n      value.unshift(0);\n      l = digitNr - 1;\n    }\n\n    if (value.length == digitNr) {\n      for (i = 0; i <= 9; ++i) {\n        disabled.push(i);\n      }\n    } else if (value.length == 1 && isAmPM && value[0] == 1 || value.length && value.length % 2 === 0 || !isAmPM && value[0] == 2 && value[1] > 3 && value.length % 2 == 1) {\n      for (i = 6; i <= 9; ++i) {\n        disabled.push(i);\n      }\n    }\n\n    hour = value[1] !== undefined ? '' + value[0] + value[1] : '';\n    minutes = +maxM == +(value[3] !== undefined ? '' + value[2] + value[3] : '');\n\n    if (s.invalid) {\n      for (i = 0; i < s.invalid.length; ++i) {\n        invH = s.invalid[i].getHours();\n        invM = s.invalid[i].getMinutes();\n        invS = s.invalid[i].getSeconds();\n\n        if (invH == +hour) {\n          if (timeFormat.length == 2 && (invM < 10 ? 0 : +('' + invM)[0]) == +value[2]) {\n            // disable invalid minutes\n            disabled.push(invM < 10 ? invM : +('' + invM)[1]);\n            break;\n          } else if ((invS < 10 ? 0 : +('' + invS)[0]) == +value[4]) {\n            // disable invalid sec\n            disabled.push(invS < 10 ? invS : +('' + invS)[1]);\n            break;\n          }\n        }\n      }\n    }\n\n    if (s.min || s.max) {\n      isMinH = +minH == +hour;\n      isMaxH = +maxH == +hour;\n      isMaxM = isMaxH && minutes;\n      isMinM = isMinH && minutes;\n\n      if (value.length === 0) {\n        for (i = isAmPM ? 2 : minH > 19 ? minH[0] : 3; i <= (minH[0] == 1 ? 9 : minH[0] - 1); ++i) {\n          // disables values lower than min and leves the 1,2 buttons\n          disabled.push(i);\n        }\n\n        if (minH >= 10) {\n          disabled.push(0);\n\n          if (minH[0] == 2) {\n            //if 2x hour is min\n            for (i = 3; i <= 9; ++i) {\n              disabled.push(i);\n            }\n          }\n        }\n\n        if (maxH && maxH < 10 || minH && minH >= 10) {\n          //disables values between min and max values\n          for (i = maxH && maxH < 10 ? +maxH[0] + 1 : 0; i < (minH && minH >= 10 ? minH[0] : 10); ++i) {\n            disabled.push(i);\n          }\n        }\n      }\n\n      if (value.length == 1) {\n        if (value[0] === 0) {\n          // disable min values if 24h format, and starts with 0\n          for (i = 0; i < minH[0]; ++i) {\n            //kiveve minH[0] == 1 ? 9 :\n            disabled.push(i);\n          }\n        }\n\n        if (minH && value[0] !== 0 && (isAmPM ? value[0] == 1 : value[0] == 2)) {\n          // don't allow lower values entered, ex. 2:56\n          for (i = isAmPM ? 3 : 4; i <= 9; ++i) {\n            disabled.push(i);\n          }\n        }\n\n        if (value[0] == minH[0]) {\n          // is min value\n          for (i = 0; i < minH[1]; ++i) {\n            disabled.push(i);\n          }\n        }\n\n        if (value[0] == maxH[0] && !isAmPM) {\n          // is max value\n          for (i = +maxH[1] + 1; i <= 9; ++i) {\n            disabled.push(i);\n          }\n        }\n      }\n\n      if (value.length == 2 && (isMinH || isMaxH)) {\n        for (i = isMaxH ? +maxM[0] + 1 : 0; i < (isMinH ? +minM[0] : 10); ++i) {\n          disabled.push(i);\n        }\n      }\n\n      if (value.length == 3 && (isMaxH && value[2] == maxM[0] || isMinH && value[2] == minM[0])) {\n        for (i = isMaxH && value[2] == maxM[0] ? +maxM[1] + 1 : 0; i < (isMinH && value[2] == minM[0] ? +minM[1] : 10); ++i) {\n          disabled.push(i);\n        }\n      }\n\n      if (value.length == 4 && (isMinM || isMaxM)) {\n        for (i = isMaxM ? +maxS[0] + 1 : 0; i < (isMinM ? +minS[0] : 10); ++i) {\n          disabled.push(i);\n        }\n      }\n\n      if (value.length == 5 && (isMinM && value[4] == minS[0] || isMaxM && value[4] == maxS[0])) {\n        for (i = isMaxM && value[4] == maxS[0] ? +maxS[1] + 1 : 0; i < (isMinM && value[4] == minS[0] ? +minS[1] : 10); ++i) {\n          disabled.push(i);\n        }\n      }\n    }\n\n    return disabled;\n  }\n\n  return {\n    placeholder: '-',\n    allowLeadingZero: true,\n    template: (timeFormat.length == 3 ? 'dd:dd:dd' : timeFormat.length == 2 ? 'dd:dd' : 'dd') + (isAmPM ? '<span class=\"mbsc-np-sup\">{ampm:--}</span>' : ''),\n    leftKey: isAmPM ? {\n      text: am,\n      variable: 'ampm:' + am,\n      value: '00'\n    } : {\n      text: ':00',\n      value: '00'\n    },\n    rightKey: isAmPM ? {\n      text: pm,\n      variable: 'ampm:' + pm,\n      value: '00'\n    } : {\n      text: ':30',\n      value: '30'\n    },\n    parseValue: function parseValue(value) {\n      var i,\n          m,\n          v = value || s.defaultValue,\n          ret = [];\n\n      if (v) {\n        v = v + '';\n        m = v.match(/\\d/g);\n\n        if (m) {\n          for (i = 0; i < m.length; i++) {\n            ret.push(+m[i]);\n          }\n        }\n\n        if (isAmPM) {\n          ret.push('ampm:' + (v.match(new RegExp(s.pmText, 'gi')) ? pm : am));\n        }\n      }\n\n      return ret;\n    },\n    formatValue: function formatValue(value, variables) {\n      return getFormattedTime(value, variables);\n    },\n    validate: function validate(data) {\n      var value = data.values,\n          variables = data.variables,\n          formattedTime = getFormattedTime(value, variables),\n          d = value.length >= 3 ? new Date(2014, 7, 20, '' + value[0] + (value.length % 2 === 0 ? value[1] : ''), '' + value[value.length % 2 === 0 ? 2 : 1] + value[value.length % 2 === 0 ? 3 : 2]) : '';\n      return {\n        disabled: disableButtons(value),\n        length: l,\n        invalid: (isAmPM ? !new RegExp('^(0?[1-9]|1[012])(:[0-5]\\\\d)?(:[0-5][0-9])' + ' (?:' + s.amText + '|' + s.pmText + ')$', 'i').test(formattedTime) : !/^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/.test(formattedTime)) || (s.invalid ? inst._indexOf(s.invalid, d) != -1 : false) || !((s.min ? s.min <= d : true) && (s.max ? d <= s.max : true))\n      };\n    }\n  };\n}; // Date preset\n// ---\n\n\nvar dateDefaults = {\n  dateOrder: 'mdy',\n  dateFormat: 'mm/dd/yy',\n  delimiter: '/'\n};\n\npresets$1.date = function (inst) {\n  var yi,\n      mi,\n      di,\n      i,\n      indexArray = [],\n      orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, dateTimeDefaults, dateDefaults, orig),\n      templ = s.dateOrder,\n      minM = s.min ? '' + (s.getMonth(s.min) + 1) : 0,\n      maxM = s.max ? '' + (s.getMonth(s.max) + 1) : 0,\n      minD = s.min ? '' + s.getDay(s.min) : 0,\n      maxD = s.max ? '' + s.getDay(s.max) : 0,\n      minY = s.min ? '' + s.getYear(s.min) : 0,\n      maxY = s.max ? '' + s.getYear(s.max) : 0;\n  templ = templ.replace(/y+/gi, 'yyyy');\n  templ = templ.replace(/m+/gi, 'mm');\n  templ = templ.replace(/d+/gi, 'dd');\n  yi = templ.toUpperCase().indexOf('Y');\n  mi = templ.toUpperCase().indexOf('M');\n  di = templ.toUpperCase().indexOf('D');\n  templ = '';\n  indexArray.push({\n    val: yi,\n    n: 'yyyy'\n  }, {\n    val: mi,\n    n: 'mm'\n  }, {\n    val: di,\n    n: 'dd'\n  });\n  indexArray.sort(function (a, b) {\n    return a.val - b.val;\n  });\n  $$1.each(indexArray, function (i, v) {\n    templ += v.n;\n  });\n  yi = templ.indexOf('y');\n  mi = templ.indexOf('m');\n  di = templ.indexOf('d');\n  templ = '';\n\n  for (i = 0; i < 8; ++i) {\n    templ += 'd';\n\n    if (i + 1 == yi || i + 1 == mi || i + 1 == di) {\n      templ += s.delimiter;\n    }\n  }\n\n  function isleapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n  }\n\n  function disableButtons(value) {\n    var i,\n        j,\n        invY,\n        invM,\n        invD,\n        disabled = [],\n        year = value[yi + 3] !== undefined ? '' + value[yi] + value[yi + 1] + value[yi + 2] + value[yi + 3] : '',\n        month = value[mi + 1] !== undefined ? '' + value[mi] + value[mi + 1] : '',\n        day = value[di + 1] !== undefined ? '' + value[di] + value[di + 1] : '',\n        maxDay = '' + s.getMaxDayOfMonth(year || 2012, month - 1 || 0),\n        // Use a leap year if no year present to allow day 29 to be enetered\n    isMin = minY === year && +minM === +month,\n        isMax = maxY === year && +maxM === +month;\n\n    if (s.invalid) {\n      for (i = 0; i < s.invalid.length; ++i) {\n        invY = s.getYear(s.invalid[i]);\n        invM = s.getMonth(s.invalid[i]);\n        invD = s.getDay(s.invalid[i]);\n\n        if (invY == +year && invM + 1 == +month) {\n          //disable the ivalid day\n          if ((invD < 10 ? 0 : +('' + invD)[0]) == +value[di]) {\n            disabled.push(invD < 10 ? invD : +('' + invD)[1]);\n            break;\n          }\n        }\n\n        if (invM + 1 == +month && invD == +day) {\n          //disable invalid year\n          if (('' + invY).substring(0, 3) == '' + value[yi] + value[yi + 1] + value[yi + 2]) {\n            disabled.push(('' + invY)[3]);\n            break;\n          }\n        }\n\n        if (invY == +year && invD == +day) {\n          //disable the ivalid month\n          if ((invM < 10 ? 0 : +('' + (invM + 1))[0]) == +value[mi]) {\n            disabled.push(invM < 10 ? invM : +('' + (invM + 1))[1]);\n            break;\n          }\n        }\n      }\n    } // month check\n\n\n    if (day == '31' && (value.length == mi || value.length == mi + 1)) {\n      // disable 30 day months\n      if (value[mi] != 1) {\n        disabled.push(2, 4, 6, 9, 11);\n      } else {\n        disabled.push(1);\n      }\n    }\n\n    if (day == '30' && value[mi] === 0 && value.length <= mi + 1) {\n      // disable february\n      disabled.push(2);\n    }\n\n    if (value.length == mi) {\n      // before month's first digit set, disable values outside min/max\n      for (i = maxY === year && +maxM < 10 ? 1 : 2; i <= 9; ++i) {\n        disabled.push(i);\n      }\n\n      if (minY === year && +minM >= 10) {\n        disabled.push(0);\n      }\n    }\n\n    if (value.length == mi + 1) {\n      // before month's second digit set\n      if (value[mi] == 1) {\n        // if two digit month number\n        for (i = maxY === year ? +maxM[1] + 1 : 3; i <= 9; ++i) {\n          disabled.push(i);\n        }\n\n        if (minY == year) {\n          // if min year diable lower values\n          for (i = 0; i < +minM[1]; ++i) {\n            disabled.push(i);\n          }\n        }\n      }\n\n      if (value[mi] === 0) {\n        //if month number starts with 0\n        disabled.push(0);\n\n        if (maxY === year || minY === year) {\n          // if min/max diable lower/greater values\n          for (i = maxY === year ? +day > +maxD ? +maxM : +maxM + 1 : 0; i <= (minY === year ? +day < +minD ? +minM - 1 : +minM - 1 : 9); ++i) {\n            disabled.push(i);\n          }\n        }\n      }\n    } // day check\n\n\n    if (value.length == di) {\n      // before day first digit set\n      for (i = isMax ? (+maxD > 10 ? +maxD[0] : 0) + 1 : +maxDay[0] + 1; i <= 9; ++i) {\n        disabled.push(i);\n      }\n\n      if (isMin) {\n        // if is min year and month disable lower values\n        for (i = 0; i < (+minD < 10 ? 0 : minD[0]); ++i) {\n          disabled.push(i);\n        }\n      }\n    }\n\n    if (value.length == di + 1) {\n      // before day second digit set\n      if (value[di] >= 3 || month == '02') {\n        //disable greater values than the maxDay's second digit\n        for (i = +maxDay[1] + 1; i <= 9; ++i) {\n          disabled.push(i);\n        }\n      }\n\n      if (isMax && +maxD[0] == value[di]) {\n        //if max year and month disable greater values\n        for (i = +maxD[1] + 1; i <= 9; ++i) {\n          disabled.push(i);\n        }\n      }\n\n      if (isMin && minD[0] == value[di]) {\n        //if min year and month disable lower values\n        for (i = 0; i < +minD[1]; ++i) {\n          disabled.push(i);\n        }\n      }\n\n      if (value[di] === 0) {\n        // if month first digit 0\n        disabled.push(0);\n\n        if (isMax || isMin) {\n          // disable greater/lower valies if min or max\n          for (i = isMax ? +maxD + 1 : 1; i <= (isMin ? +minD - 1 : 9); ++i) {\n            disabled.push(i);\n          }\n        }\n      }\n    } // year check\n\n\n    if (value[yi + 2] !== undefined && month == '02' && day == '29') {\n      // if 29th and february than just leap years allowed\n      for (j = +('' + value[yi] + value[yi + 1] + value[yi + 2] + 0); j <= +('' + value[yi] + value[yi + 1] + value[yi + 2] + 9); ++j) {\n        disabled.push(!isleapYear(j) ? j % 10 : '');\n      }\n    }\n\n    if (value.length == yi) {\n      // before year's first digit set\n      if (s.min) {\n        // disable lower values\n        for (i = 0; i < +minY[0]; ++i) {\n          disabled.push(i);\n        }\n      }\n\n      if (s.max) {\n        //disable greater values\n        for (i = +maxY[0] + 1; i <= 9; ++i) {\n          disabled.push(i);\n        }\n      }\n\n      disabled.push(0);\n    }\n\n    if (s.min || s.max) {\n      for (j = 1; j < 4; ++j) {\n        if (value.length == yi + j) {\n          // before year's i-th digit set\n          if (value[yi + j - 1] == +minY[j - 1] && (j == 3 ? value[yi + j - 2] == +minY[j - 2] : true)) {\n            for (i = 0; i < +minY[j] + (j == 3 && value[mi + 1] && +minM > +month ? 1 : 0); ++i) {\n              //if month less than min-month than doesn't allow minYear\n              disabled.push(i);\n            }\n          }\n\n          if (value[yi + j - 1] == +maxY[j - 1] && (j == 3 ? value[yi + j - 2] == +maxY[j - 2] : true)) {\n            for (i = +maxY[j] + (j == 3 && +maxM < +month ? 0 : 1); i <= 9; ++i) {\n              //if month greater than max-month than doesn't allow maxYear\n              disabled.push(i);\n            }\n          }\n        }\n      }\n    }\n\n    return disabled;\n  }\n\n  function calcDate(value) {\n    return new Date(+('' + value[yi] + value[yi + 1] + value[yi + 2] + value[yi + 3]), +('' + value[mi] + value[mi + 1]) - 1, +('' + value[di] + value[di + 1]));\n  } // Extended methods\n  // ---\n\n\n  inst.getVal = function (temp) {\n    return inst._hasValue || temp ? calcDate(inst.getArrayVal(temp)) : null;\n  }; // ---\n\n\n  return {\n    placeholder: '-',\n    fill: 'ltr',\n    allowLeadingZero: true,\n    template: templ,\n    parseValue: function parseValue(value) {\n      var i,\n          ret = [],\n          v = value || s.defaultValue,\n          d = parseDate(s.dateFormat, v, s);\n\n      if (v) {\n        for (i = 0; i < indexArray.length; ++i) {\n          if (/m/i.test(indexArray[i].n)) {\n            ret = ret.concat(((s.getMonth(d) < 9 ? '0' : '') + (s.getMonth(d) + 1)).split(''));\n          } else if (/d/i.test(indexArray[i].n)) {\n            ret = ret.concat(((s.getDay(d) < 10 ? '0' : '') + s.getDay(d)).split(''));\n          } else {\n            ret = ret.concat((s.getYear(d) + '').split(''));\n          }\n        }\n      }\n\n      return ret;\n    },\n    formatValue: function formatValue(value) {\n      return formatDate(s.dateFormat, calcDate(value), s);\n    },\n    validate: function validate(data) {\n      var value = data.values,\n          d = calcDate(value);\n      return {\n        disabled: disableButtons(value),\n        invalid: !(d != 'Invalid Date' && (s.min ? s.min <= d : true) && (s.max ? d <= s.max : true)) || (s.invalid ? inst._indexOf(s.invalid, d) != -1 : false)\n      };\n    }\n  };\n}; // ---\n\n\nvar MbscNumpadBase = function (_super) {\n  __extends(MbscNumpadBase, _super);\n\n  function MbscNumpadBase(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.onSet = new EventEmitter();\n    _this.onClear = new EventEmitter();\n    _this.onInput = new EventEmitter();\n    return _this;\n  }\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscNumpadBase.prototype, \"allowLeadingZero\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadBase.prototype, \"deleteIcon\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadBase.prototype, \"fill\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscNumpadBase.prototype, \"leftKey\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadBase.prototype, \"mask\", void 0);\n\n  __decorate([Input$1('char-placeholder'), __metadata(\"design:type\", String)], MbscNumpadBase.prototype, \"placeholderChar\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscNumpadBase.prototype, \"rightKey\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadBase.prototype, \"template\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Function)], MbscNumpadBase.prototype, \"validate\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscNumpadBase.prototype, \"onSet\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscNumpadBase.prototype, \"onClear\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscNumpadBase.prototype, \"onInput\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadBase.prototype, \"cancelText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadBase.prototype, \"clearText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadBase.prototype, \"setText\", void 0);\n\n  MbscNumpadBase = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscNumpadBase);\n\n  MbscNumpadBase.ɵfac = function MbscNumpadBase_Factory(t) {\n    return new (t || MbscNumpadBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscNumpadBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscNumpadBase,\n    selectors: [[\"\", \"mbsc-n-b\", \"\"]],\n    inputs: {\n      allowLeadingZero: \"allowLeadingZero\",\n      deleteIcon: \"deleteIcon\",\n      fill: \"fill\",\n      leftKey: \"leftKey\",\n      mask: \"mask\",\n      placeholderChar: [\"char-placeholder\", \"placeholderChar\"],\n      rightKey: \"rightKey\",\n      template: \"template\",\n      validate: \"validate\",\n      cancelText: \"cancelText\",\n      clearText: \"clearText\",\n      setText: \"setText\"\n    },\n    outputs: {\n      onSet: \"onSet\",\n      onClear: \"onClear\",\n      onInput: \"onInput\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpadBase;\n}(MbscFrameBase);\n\nvar MbscNumpad = function (_super) {\n  __extends(MbscNumpad, _super);\n\n  function MbscNumpad(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.options = {};\n    _this.preset = undefined;\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscNumpad.prototype, \"value\", {\n    set: function (v) {\n      if (!this.control) {\n        this.setNewValueProxy(v);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscNumpad.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var innerValue = this.instance.getVal();\n\n      if (innerValue !== v) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscNumpad.prototype.initControl = function () {\n    var options = extend$1({\n      preset: this.preset\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Numpad(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscNumpad.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-numpad'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscNumpad.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-numpadChange'), __metadata(\"design:type\", EventEmitter)], MbscNumpad.prototype, \"onChangeEmitter\", void 0);\n\n  MbscNumpad = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscNumpad);\n\n  MbscNumpad.ɵfac = function MbscNumpad_Factory(t) {\n    return new (t || MbscNumpad)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscNumpad.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscNumpad,\n    selectors: [[\"\", \"mbsc-numpad\", \"\"]],\n    inputs: {\n      value: [\"mbsc-numpad\", \"value\"],\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-numpadChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpad;\n}(MbscNumpadBase);\n\nvar MbscNumpadComponent = function (_super) {\n  __extends(MbscNumpadComponent, _super);\n\n  function MbscNumpadComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscNumpadComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscNumpadComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscNumpadComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscNumpadComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscNumpadComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadComponent.prototype, \"placeholder\", void 0);\n\n  MbscNumpadComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscNumpadComponent);\n\n  MbscNumpadComponent.ɵfac = function MbscNumpadComponent_Factory(t) {\n    return new (t || MbscNumpadComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscNumpadComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscNumpadComponent,\n    selectors: [[\"mbsc-numpad\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscNumpadComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscNumpadComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpadComponent;\n}(MbscNumpad);\n\nvar MbscNumpadDecimal = function (_super) {\n  __extends(MbscNumpadDecimal, _super);\n\n  function MbscNumpadDecimal(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    _this.preset = 'decimal';\n    return _this;\n  }\n\n  Object.defineProperty(MbscNumpadDecimal.prototype, \"value\", {\n    set: function (v) {\n      if (this.instance || v !== '') {\n        this.setNewValueProxy(v);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([Input$1('mbsc-numpad-decimal'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscNumpadDecimal.prototype, \"value\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDecimal.prototype, \"decimalSeparator\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumpadDecimal.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDecimal.prototype, \"entryMode\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscNumpadDecimal.prototype, \"invalid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumpadDecimal.prototype, \"scale\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumpadDecimal.prototype, \"maxScale\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumpadDecimal.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumpadDecimal.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDecimal.prototype, \"prefix\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscNumpadDecimal.prototype, \"returnAffix\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDecimal.prototype, \"suffix\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDecimal.prototype, \"thousandsSeparator\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscNumpadDecimal.prototype, \"options\", void 0);\n\n  __decorate([Output('mbsc-numpad-decimalChange'), __metadata(\"design:type\", EventEmitter)], MbscNumpadDecimal.prototype, \"onChangeEmitter\", void 0);\n\n  MbscNumpadDecimal = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscNumpadDecimal);\n\n  MbscNumpadDecimal.ɵfac = function MbscNumpadDecimal_Factory(t) {\n    return new (t || MbscNumpadDecimal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscNumpadDecimal.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscNumpadDecimal,\n    selectors: [[\"\", \"mbsc-numpad-decimal\", \"\"]],\n    inputs: {\n      value: [\"mbsc-numpad-decimal\", \"value\"],\n      decimalSeparator: \"decimalSeparator\",\n      defaultValue: \"defaultValue\",\n      entryMode: \"entryMode\",\n      invalid: \"invalid\",\n      scale: \"scale\",\n      maxScale: \"maxScale\",\n      min: \"min\",\n      max: \"max\",\n      prefix: \"prefix\",\n      returnAffix: \"returnAffix\",\n      suffix: \"suffix\",\n      thousandsSeparator: \"thousandsSeparator\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-numpad-decimalChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpadDecimal;\n}(MbscNumpad);\n\nvar MbscNumpadDecimalComponent = function (_super) {\n  __extends(MbscNumpadDecimalComponent, _super);\n\n  function MbscNumpadDecimalComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscNumpadDecimalComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscNumpadDecimalComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscNumpadDecimalComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDecimalComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscNumpadDecimalComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDecimalComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscNumpadDecimalComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDecimalComponent.prototype, \"placeholder\", void 0);\n\n  MbscNumpadDecimalComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscNumpadDecimalComponent);\n\n  MbscNumpadDecimalComponent.ɵfac = function MbscNumpadDecimalComponent_Factory(t) {\n    return new (t || MbscNumpadDecimalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscNumpadDecimalComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscNumpadDecimalComponent,\n    selectors: [[\"mbsc-numpad-decimal\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscNumpadDecimalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscNumpadDecimalComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpadDecimalComponent;\n}(MbscNumpadDecimal);\n\nvar MbscNumpadDate = function (_super) {\n  __extends(MbscNumpadDate, _super);\n\n  function MbscNumpadDate(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscNumpadDate.prototype, \"value\", {\n    set: function (v) {\n      if (this.instance || v !== '') {\n        this.setNewValueProxy(v);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscNumpadDate.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var innerValue = this.instance.getVal();\n\n      if (innerValue && !v || !innerValue && v || innerValue && v && innerValue.getTime() !== v.getTime()) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscNumpadDate.prototype.initControl = function () {\n    var options = extend$1({\n      preset: 'date'\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Numpad(this.element, options);\n\n    if (this.initialValue !== undefined && this.initialValue !== \"\") {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1('mbsc-numpad-date'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscNumpadDate.prototype, \"value\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDate.prototype, \"dateFormat\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDate.prototype, \"dateOrder\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDate.prototype, \"delimiter\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDate.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscNumpadDate.prototype, \"invalid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Date)], MbscNumpadDate.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Date)], MbscNumpadDate.prototype, \"max\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscNumpadDate.prototype, \"options\", void 0);\n\n  __decorate([Output('mbsc-numpad-dateChange'), __metadata(\"design:type\", EventEmitter)], MbscNumpadDate.prototype, \"onChangeEmitter\", void 0);\n\n  MbscNumpadDate = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscNumpadDate);\n\n  MbscNumpadDate.ɵfac = function MbscNumpadDate_Factory(t) {\n    return new (t || MbscNumpadDate)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscNumpadDate.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscNumpadDate,\n    selectors: [[\"\", \"mbsc-numpad-date\", \"\"]],\n    inputs: {\n      value: [\"mbsc-numpad-date\", \"value\"],\n      dateFormat: \"dateFormat\",\n      dateOrder: \"dateOrder\",\n      delimiter: \"delimiter\",\n      defaultValue: \"defaultValue\",\n      invalid: \"invalid\",\n      min: \"min\",\n      max: \"max\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-numpad-dateChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpadDate;\n}(MbscNumpadBase);\n\nvar MbscNumpadDateComponent = function (_super) {\n  __extends(MbscNumpadDateComponent, _super);\n\n  function MbscNumpadDateComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscNumpadDateComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscNumpadDateComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscNumpadDateComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDateComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscNumpadDateComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDateComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscNumpadDateComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadDateComponent.prototype, \"placeholder\", void 0);\n\n  MbscNumpadDateComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscNumpadDateComponent);\n\n  MbscNumpadDateComponent.ɵfac = function MbscNumpadDateComponent_Factory(t) {\n    return new (t || MbscNumpadDateComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscNumpadDateComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscNumpadDateComponent,\n    selectors: [[\"mbsc-numpad-date\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscNumpadDateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscNumpadDateComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpadDateComponent;\n}(MbscNumpadDate);\n\nvar MbscNumpadTime = function (_super) {\n  __extends(MbscNumpadTime, _super);\n\n  function MbscNumpadTime(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscNumpadTime.prototype, \"value\", {\n    set: function (v) {\n      if (this.instance || v !== '') {\n        this.setNewValueProxy(v);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscNumpadTime.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var innerValue = this.instance.getVal();\n\n      if (innerValue !== v) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscNumpadTime.prototype.initControl = function () {\n    var options = extend$1({\n      preset: 'time'\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Numpad(this.element, options);\n\n    if (this.initialValue !== undefined && this.initialValue !== \"\") {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1('mbsc-numpad-time'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscNumpadTime.prototype, \"value\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadTime.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscNumpadTime.prototype, \"invalid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Date)], MbscNumpadTime.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Date)], MbscNumpadTime.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadTime.prototype, \"timeFormat\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscNumpadTime.prototype, \"options\", void 0);\n\n  __decorate([Output('mbsc-numpad-timeChange'), __metadata(\"design:type\", EventEmitter)], MbscNumpadTime.prototype, \"onChangeEmitter\", void 0);\n\n  MbscNumpadTime = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscNumpadTime);\n\n  MbscNumpadTime.ɵfac = function MbscNumpadTime_Factory(t) {\n    return new (t || MbscNumpadTime)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscNumpadTime.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscNumpadTime,\n    selectors: [[\"\", \"mbsc-numpad-time\", \"\"]],\n    inputs: {\n      value: [\"mbsc-numpad-time\", \"value\"],\n      defaultValue: \"defaultValue\",\n      invalid: \"invalid\",\n      max: \"max\",\n      min: \"min\",\n      timeFormat: \"timeFormat\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-numpad-timeChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpadTime;\n}(MbscNumpadBase);\n\nvar MbscNumpadTimeComponent = function (_super) {\n  __extends(MbscNumpadTimeComponent, _super);\n\n  function MbscNumpadTimeComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscNumpadTimeComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscNumpadTimeComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscNumpadTimeComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadTimeComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscNumpadTimeComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadTimeComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscNumpadTimeComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadTimeComponent.prototype, \"placeholder\", void 0);\n\n  MbscNumpadTimeComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscNumpadTimeComponent);\n\n  MbscNumpadTimeComponent.ɵfac = function MbscNumpadTimeComponent_Factory(t) {\n    return new (t || MbscNumpadTimeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscNumpadTimeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscNumpadTimeComponent,\n    selectors: [[\"mbsc-numpad-time\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscNumpadTimeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscNumpadTimeComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpadTimeComponent;\n}(MbscNumpadTime);\n\nvar MbscNumpadTimespan = function (_super) {\n  __extends(MbscNumpadTimespan, _super);\n\n  function MbscNumpadTimespan(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, view) || this;\n\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    _this.preset = 'timespan';\n    return _this;\n  }\n\n  Object.defineProperty(MbscNumpadTimespan.prototype, \"value\", {\n    set: function (v) {\n      if (this.instance || v !== '') {\n        this.setNewValueProxy(v);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([Input$1('mbsc-numpad-timespan'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscNumpadTimespan.prototype, \"value\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumpadTimespan.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscNumpadTimespan.prototype, \"invalid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumpadTimespan.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscNumpadTimespan.prototype, \"max\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscNumpadTimespan.prototype, \"options\", void 0);\n\n  __decorate([Output('mbsc-numpad-timespanChange'), __metadata(\"design:type\", EventEmitter)], MbscNumpadTimespan.prototype, \"onChangeEmitter\", void 0);\n\n  MbscNumpadTimespan = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscNumpadTimespan);\n\n  MbscNumpadTimespan.ɵfac = function MbscNumpadTimespan_Factory(t) {\n    return new (t || MbscNumpadTimespan)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscNumpadTimespan.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscNumpadTimespan,\n    selectors: [[\"\", \"mbsc-numpad-timespan\", \"\"]],\n    inputs: {\n      value: [\"mbsc-numpad-timespan\", \"value\"],\n      defaultValue: \"defaultValue\",\n      invalid: \"invalid\",\n      min: \"min\",\n      max: \"max\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-numpad-timespanChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpadTimespan;\n}(MbscNumpad);\n\nvar MbscNumpadTimespanComponent = function (_super) {\n  __extends(MbscNumpadTimespanComponent, _super);\n\n  function MbscNumpadTimespanComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscNumpadTimespanComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscNumpadTimespanComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscNumpadTimespanComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadTimespanComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscNumpadTimespanComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadTimespanComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscNumpadTimespanComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNumpadTimespanComponent.prototype, \"placeholder\", void 0);\n\n  MbscNumpadTimespanComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscNumpadTimespanComponent);\n\n  MbscNumpadTimespanComponent.ɵfac = function MbscNumpadTimespanComponent_Factory(t) {\n    return new (t || MbscNumpadTimespanComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscNumpadTimespanComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscNumpadTimespanComponent,\n    selectors: [[\"mbsc-numpad-timespan\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscNumpadTimespanComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscNumpadTimespanComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNumpadTimespanComponent;\n}(MbscNumpadTimespan);\n\nvar comps$1 = [MbscNumpad, MbscNumpadBase, MbscNumpadComponent, MbscNumpadDecimal, MbscNumpadDecimalComponent, MbscNumpadDate, MbscNumpadDateComponent, MbscNumpadTime, MbscNumpadTimeComponent, MbscNumpadTimespan, MbscNumpadTimespanComponent];\n\nvar MbscNumpadModule = function () {\n  function MbscNumpadModule() {}\n\n  MbscNumpadModule.ɵfac = function MbscNumpadModule_Factory(t) {\n    return new (t || MbscNumpadModule)();\n  };\n\n  MbscNumpadModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscNumpadModule\n  });\n  MbscNumpadModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscFrameBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscNumpadModule, {\n      declarations: function () {\n        return [MbscNumpad, MbscNumpadBase, MbscNumpadComponent, MbscNumpadDecimal, MbscNumpadDecimalComponent, MbscNumpadDate, MbscNumpadDateComponent, MbscNumpadTime, MbscNumpadTimeComponent, MbscNumpadTimespan, MbscNumpadTimespanComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscFrameBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscNumpad, MbscNumpadBase, MbscNumpadComponent, MbscNumpadDecimal, MbscNumpadDecimalComponent, MbscNumpadDate, MbscNumpadDateComponent, MbscNumpadTime, MbscNumpadTimeComponent, MbscNumpadTimespan, MbscNumpadTimespanComponent];\n      }\n    });\n  })();\n\n  return MbscNumpadModule;\n}();\n\nvar Optionlist = function Optionlist(elm, settings) {\n  var that = this; // Call the parent constructor\n\n  NavigationBase.call(this, elm, settings, true);\n  /**\r\n   * Optionlist initialization.\r\n   */\n\n  that.___init = function () {}; // Constructor\n\n\n  that.init();\n}; // Defaults\n\n\nOptionlist.prototype = {\n  _class: 'optionlist',\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _responsive: true,\n  _defaults: extend$1({}, NavigationBase.prototype._defaults, {\n    select: 'multiple',\n    variant: 'a',\n    display: 'inline'\n  })\n};\nclasses.Optionlist = Optionlist;\nmobiscroll.themes.optionlist = mobiscroll.themes.navigation;\n\nvar MbscOptionItem = function (_super) {\n  __extends(MbscOptionItem, _super);\n\n  function MbscOptionItem(notifyItemService, _elem) {\n    return _super.call(this, notifyItemService, _elem) || this;\n  }\n\n  MbscOptionItem = __decorate([__metadata(\"design:paramtypes\", [MbscNotifyItemService, ElementRef])], MbscOptionItem);\n\n  MbscOptionItem.ɵfac = function MbscOptionItem_Factory(t) {\n    return new (t || MbscOptionItem)(ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MbscOptionItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscOptionItem,\n    selectors: [[\"mbsc-option-item\"]],\n    hostVars: 4,\n    hostBindings: function MbscOptionItem_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-icon\", ctx.icon)(\"data-disabled\", ctx.disabled)(\"data-selected\", ctx.selected)(\"data-id\", ctx.id);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscOptionItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscOptionItem;\n}(MbscNavItemBase);\n\nvar MbscOptionlist = function (_super) {\n  __extends(MbscOptionlist, _super);\n\n  function MbscOptionlist(initialElem, zone, notifyItemService, optionService) {\n    var _this = _super.call(this, initialElem, zone, notifyItemService) || this;\n\n    _this.optionService = optionService;\n    return _this;\n  }\n\n  MbscOptionlist.prototype.initControl = function () {\n    var _this = this;\n\n    var onItemTap = this.tapHandler.bind(this);\n    var onItemTapUser = this.options && this.options.onItemTap;\n\n    if (onItemTapUser) {\n      onItemTap = function (event, inst) {\n        _this.tapHandler(event, inst);\n\n        return onItemTapUser(event, inst);\n      };\n    }\n\n    var options = extend$1({}, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, {\n      onItemTap: onItemTap\n    });\n    this.instance = new Optionlist(this.initialElem.nativeElement, options);\n    this.notifyItemService.notifyInstanceReady(this.instance);\n    this.addRemoveObserver = this.notifyItemService.onAddRemove().subscribe(function (item) {\n      _this.instance.refresh();\n    });\n  };\n\n  MbscOptionlist.prototype.ngOnDestroy = function () {\n    this.notifyItemService.onAddRemove().unsubscribe(this.addRemoveObserver);\n\n    _super.prototype.ngOnDestroy.call(this);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscOptionlist.prototype, \"select\", void 0);\n\n  __decorate([ContentChildren(MbscOptionItem), __metadata(\"design:type\", QueryList)], MbscOptionlist.prototype, \"items\", void 0);\n\n  MbscOptionlist = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscNotifyItemService, MbscOptionsService])], MbscOptionlist);\n\n  MbscOptionlist.ɵfac = function MbscOptionlist_Factory(t) {\n    return new (t || MbscOptionlist)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscOptionlist.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscOptionlist,\n    selectors: [[\"mbsc-optionlist\"]],\n    contentQueries: function MbscOptionlist_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MbscOptionItem, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    hostAttrs: [1, \"mbsc-cloak\"],\n    inputs: {\n      select: \"select\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscNotifyItemService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscOptionlist_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscOptionlist;\n}(MbscNavigationBase);\n\nvar MbscOptionlistModule = function () {\n  function MbscOptionlistModule() {}\n\n  MbscOptionlistModule.ɵfac = function MbscOptionlistModule_Factory(t) {\n    return new (t || MbscOptionlistModule)();\n  };\n\n  MbscOptionlistModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscOptionlistModule\n  });\n  MbscOptionlistModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MbscNavigationBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscOptionlistModule, {\n      declarations: [MbscOptionItem, MbscOptionlist],\n      imports: [MbscNavigationBaseModule],\n      exports: [MbscOptionItem, MbscOptionlist]\n    });\n  })();\n\n  return MbscOptionlistModule;\n}(); // ---\n\n\nvar Page = function Page(el, settings) {\n  var cssClass = '',\n      $elm = $$1(el),\n      that = this,\n      s = that.settings; // Call the parent constructor\n\n  Base.call(this, el, settings, true);\n  /**\r\n   * Page initialization.\r\n   */\n\n  that._init = function () {\n    var ctx = s.context,\n        $ctx = $$1(ctx),\n        $topMenu = $ctx.find('.mbsc-ms-top .mbsc-ms'),\n        $bottomMenu = $ctx.find('.mbsc-ms-bottom .mbsc-ms'),\n        css = {};\n\n    if (ctx == 'body') {\n      $$1('body,html').addClass('mbsc-page-ctx');\n    } else {\n      $ctx.addClass('mbsc-page-ctx');\n    }\n\n    if (cssClass) {\n      $elm.removeClass(cssClass);\n    }\n\n    if ($topMenu.length) {\n      css.paddingTop = $topMenu[0].offsetHeight;\n    }\n\n    if ($bottomMenu.length) {\n      css.paddingBottom = $bottomMenu[0].offsetHeight;\n    }\n\n    cssClass = 'mbsc-page mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : '') + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr');\n    $elm.addClass(cssClass).removeClass('mbsc-cloak').css(css);\n  };\n  /**\r\n   * Destroys the mobiscroll instance.\r\n   */\n\n\n  that._destroy = function () {\n    $elm.removeClass(cssClass);\n  }; // Constructor\n\n\n  s = that.settings;\n  that.init();\n}; // Extend defaults\n\n\nPage.prototype = {\n  _hasDef: true,\n  _hasTheme: true,\n  _hasLang: true,\n  _class: 'page',\n  _defaults: {\n    context: 'body'\n  }\n};\nclasses.Page = Page;\nmobiscroll.themes.page.mobiscroll = {}; // ---\n// Page end\n// Init mbsc-page elements on page load or when mbsc-enhance event is triggeres\n\nautoInit('[mbsc-page]', Page);\n\nvar MbscPage = function (_super) {\n  __extends(MbscPage, _super);\n\n  function MbscPage(hostElement, optionsService, zone) {\n    var _this = _super.call(this, hostElement, zone) || this;\n\n    _this.optionsService = optionsService;\n    return _this;\n  }\n\n  MbscPage.prototype.ngOnInit = function () {\n    var optionsObj = extend$1({}, this.options, this.inlineOptionsObj);\n    this.optionsService.options = optionsObj;\n  };\n\n  MbscPage.prototype.initControl = function () {\n    var options = extend$1({}, this.options, this.inlineOptionsObj);\n    this.instance = new Page(this.initElem.nativeElement, options);\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscPage.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscPage.prototype, \"context\", void 0);\n\n  __decorate([ViewChild('initElement', {\n    static: false\n  }), __metadata(\"design:type\", ElementRef)], MbscPage.prototype, \"initElem\", void 0);\n\n  MbscPage = __decorate([__metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, NgZone])], MbscPage);\n\n  MbscPage.ɵfac = function MbscPage_Factory(t) {\n    return new (t || MbscPage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscPage.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscPage,\n    selectors: [[\"mbsc-page\"]],\n    viewQuery: function MbscPage_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.initElem = _t.first);\n      }\n    },\n    inputs: {\n      options: \"options\",\n      context: \"context\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscOptionsService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 0,\n    consts: [[\"initElement\", \"\"]],\n    template: function MbscPage_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", null, 0);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscPage;\n}(MbscBase);\n\nvar MbscNote = function () {\n  function MbscNote(initialElem) {\n    this.initialElem = initialElem;\n    this.color = 'primary';\n  }\n\n  Object.defineProperty(MbscNote.prototype, \"classNames\", {\n    get: function () {\n      return 'mbsc-note mbsc-note-' + this.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscNote.prototype, \"color\", void 0);\n\n  MbscNote = __decorate([__metadata(\"design:paramtypes\", [ElementRef])], MbscNote);\n\n  MbscNote.ɵfac = function MbscNote_Factory(t) {\n    return new (t || MbscNote)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MbscNote.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscNote,\n    selectors: [[\"mbsc-note\"]],\n    hostVars: 2,\n    hostBindings: function MbscNote_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.classNames);\n      }\n    },\n    inputs: {\n      color: \"color\"\n    },\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscNote_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscNote;\n}();\n\nvar MbscAvatar = function () {\n  function MbscAvatar() {\n    this.draggable = false;\n  }\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscAvatar.prototype, \"draggable\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscAvatar.prototype, \"src\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscAvatar.prototype, \"alt\", void 0);\n\n  MbscAvatar.ɵfac = function MbscAvatar_Factory(t) {\n    return new (t || MbscAvatar)();\n  };\n\n  MbscAvatar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscAvatar,\n    selectors: [[\"mbsc-avatar\"]],\n    inputs: {\n      draggable: \"draggable\",\n      src: \"src\",\n      alt: \"alt\"\n    },\n    decls: 1,\n    vars: 3,\n    consts: [[1, \"mbsc-avatar\", 3, \"src\", \"alt\", \"draggable\"]],\n    template: function MbscAvatar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"img\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"src\", ctx.src, ɵngcc0.ɵɵsanitizeUrl)(\"alt\", ctx.alt)(\"draggable\", ctx.draggable);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscAvatar;\n}();\n\nvar MbscPageModule = function () {\n  function MbscPageModule() {}\n\n  MbscPageModule.ɵfac = function MbscPageModule_Factory(t) {\n    return new (t || MbscPageModule)();\n  };\n\n  MbscPageModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscPageModule\n  });\n  MbscPageModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MbscBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscPageModule, {\n      declarations: [MbscPage, MbscNote, MbscAvatar],\n      imports: [MbscBaseModule],\n      exports: [MbscPage, MbscNote, MbscAvatar]\n    });\n  })();\n\n  return MbscPageModule;\n}();\n\nvar MbscPopup = function (_super) {\n  __extends(MbscPopup, _super);\n\n  function MbscPopup(initialElem, optionService, zone) {\n    var _this = _super.call(this, initialElem, zone) || this;\n\n    _this.optionService = optionService;\n    _this.onBeforeClose = new EventEmitter();\n    _this.onBeforeShow = new EventEmitter();\n    _this.onCancel = new EventEmitter();\n    _this.onClose = new EventEmitter();\n    _this.onDestroy = new EventEmitter();\n    _this.onFill = new EventEmitter();\n    _this.onMarkupReady = new EventEmitter();\n    _this.onPosition = new EventEmitter();\n    _this.onShow = new EventEmitter();\n    _this.onSet = new EventEmitter();\n    return _this;\n  }\n\n  MbscPopup.prototype.ngAfterViewInit = function () {\n    this.getInlineEvents();\n    var options = extend$1({}, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj);\n    this.instance = new Popup(this.initialElem.nativeElement, options);\n  };\n\n  __decorate([Input$1('options'), __metadata(\"design:type\", Object)], MbscPopup.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscPopup.prototype, \"anchor\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscPopup.prototype, \"animate\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscPopup.prototype, \"buttons\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscPopup.prototype, \"closeOnOverlayTap\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscPopup.prototype, \"context\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscPopup.prototype, \"disabled\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscPopup.prototype, \"display\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscPopup.prototype, \"focusOnClose\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscPopup.prototype, \"focusTrap\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscPopup.prototype, \"headerText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscPopup.prototype, \"showOnFocus\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscPopup.prototype, \"showOnTap\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscPopup.prototype, \"touchUi\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscPopup.prototype, \"okText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscPopup.prototype, \"cancelText\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscPopup.prototype, \"onBeforeClose\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscPopup.prototype, \"onBeforeShow\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscPopup.prototype, \"onCancel\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscPopup.prototype, \"onClose\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscPopup.prototype, \"onDestroy\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscPopup.prototype, \"onFill\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscPopup.prototype, \"onMarkupReady\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscPopup.prototype, \"onPosition\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscPopup.prototype, \"onShow\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscPopup.prototype, \"onSet\", void 0);\n\n  MbscPopup = __decorate([__param(1, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscOptionsService, NgZone])], MbscPopup);\n\n  MbscPopup.ɵfac = function MbscPopup_Factory(t) {\n    return new (t || MbscPopup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MbscPopup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscPopup,\n    selectors: [[\"mbsc-popup\"]],\n    hostAttrs: [1, \"mbsc-cloak\"],\n    inputs: {\n      options: \"options\",\n      anchor: \"anchor\",\n      animate: \"animate\",\n      buttons: \"buttons\",\n      closeOnOverlayTap: \"closeOnOverlayTap\",\n      context: \"context\",\n      disabled: \"disabled\",\n      display: \"display\",\n      focusOnClose: \"focusOnClose\",\n      focusTrap: \"focusTrap\",\n      headerText: \"headerText\",\n      showOnFocus: \"showOnFocus\",\n      showOnTap: \"showOnTap\",\n      touchUi: \"touchUi\",\n      okText: \"okText\",\n      cancelText: \"cancelText\"\n    },\n    outputs: {\n      onBeforeClose: \"onBeforeClose\",\n      onBeforeShow: \"onBeforeShow\",\n      onCancel: \"onCancel\",\n      onClose: \"onClose\",\n      onDestroy: \"onDestroy\",\n      onFill: \"onFill\",\n      onMarkupReady: \"onMarkupReady\",\n      onPosition: \"onPosition\",\n      onShow: \"onShow\",\n      onSet: \"onSet\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscPopup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscPopup;\n}(MbscBase);\n\nvar MbscWidget = function (_super) {\n  __extends(MbscWidget, _super);\n\n  function MbscWidget() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MbscWidget.ɵfac = /*@__PURE__*/function () {\n    var ɵMbscWidget_BaseFactory;\n    return function MbscWidget_Factory(t) {\n      return (ɵMbscWidget_BaseFactory || (ɵMbscWidget_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MbscWidget)))(t || MbscWidget);\n    };\n  }();\n\n  MbscWidget.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscWidget,\n    selectors: [[\"mbsc-widget\"]],\n    hostAttrs: [1, \"mbsc-cloak\"],\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscWidget_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscWidget;\n}(MbscPopup);\n\nvar MbscPopupModule = function () {\n  function MbscPopupModule() {}\n\n  MbscPopupModule.ɵfac = function MbscPopupModule_Factory(t) {\n    return new (t || MbscPopupModule)();\n  };\n\n  MbscPopupModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscPopupModule\n  });\n  MbscPopupModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MbscBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscPopupModule, {\n      declarations: [MbscPopup, MbscWidget],\n      imports: [MbscBaseModule],\n      exports: [MbscPopup, MbscWidget]\n    });\n  })();\n\n  return MbscPopupModule;\n}();\n\nvar RangePicker = Scroller;\nvar defaults$c = {\n  autoCorrect: true,\n  showSelector: true,\n  minRange: 1,\n  rangeTap: true\n};\n\npresets.range = function (inst) {\n  // Private functions\n  // ---\n  function normalize(d, ref) {\n    if (d) {\n      d.setFullYear(ref.getFullYear());\n      d.setMonth(ref.getMonth());\n      d.setDate(ref.getDate());\n    }\n  }\n\n  function normalizeTime(date, isEnd) {\n    var o = inst._order,\n        d = new Date(date);\n\n    if (o.h === undefined) {\n      d.setHours(isEnd ? 23 : 0);\n    }\n\n    if (o.i === undefined) {\n      d.setMinutes(isEnd ? 59 : 0);\n    }\n\n    if (o.s === undefined) {\n      d.setSeconds(isEnd ? 59 : 0);\n    }\n\n    d.setMilliseconds(isEnd ? 999 : 0);\n    return d;\n  }\n\n  function updateInputs(change) {\n    inst._startDate = startDate = tempStartDate;\n    inst._endDate = endDate = tempEndDate;\n\n    if (s.startInput) {\n      $$1(s.startInput).val(inst.startVal);\n\n      if (change) {\n        $$1(s.startInput).trigger('change');\n      }\n    }\n\n    if (s.endInput) {\n      $$1(s.endInput).val(inst.endVal);\n\n      if (change) {\n        $$1(s.endInput).trigger('change');\n      }\n    }\n  }\n\n  function addDays(d, days) {\n    return new Date(d.getFullYear(), d.getMonth(), d.getDate() + days);\n  }\n\n  function checkRangeSize(curr) {\n    if (hasTime) {\n      // Check exact times in milliseconds for min and max ranges\n      if (tempEndDate - tempStartDate > s.maxRange - 1) {\n        if (curr) {\n          tempStartDate = new Date(Math.max(minDate, tempEndDate - s.maxRange + 1));\n        } else {\n          tempEndDate = new Date(Math.min(maxDate, +tempStartDate + s.maxRange - 1));\n        }\n      }\n\n      if (tempEndDate - tempStartDate < s.minRange - 1) {\n        if (curr) {\n          tempStartDate = new Date(Math.max(minDate, tempEndDate - s.minRange + 1));\n        } else {\n          tempEndDate = new Date(Math.min(maxDate, +tempStartDate + s.minRange - 1));\n        }\n      }\n    } else {\n      // Work with days only, not milliseconds. This way daylight saving times are handled\n      if (Math.ceil((tempEndDate - tempStartDate) / oneDay) > maxDays) {\n        if (curr) {\n          tempStartDate = normalizeTime(Math.max(minDate, addDays(tempEndDate, 1 - maxDays)), false);\n        } else {\n          tempEndDate = normalizeTime(Math.min(maxDate, addDays(tempStartDate, maxDays - 1)), true);\n        }\n      }\n\n      if (Math.ceil((tempEndDate - tempStartDate) / oneDay) < minDays) {\n        if (curr) {\n          tempStartDate = normalizeTime(Math.max(minDate, addDays(tempEndDate, 1 - minDays)), false);\n        } else {\n          tempEndDate = normalizeTime(Math.min(maxDate, addDays(tempStartDate, minDays - 1)), true);\n        }\n      }\n    }\n  }\n\n  function validate(dates, ui) {\n    var ret = true;\n\n    if (dates && tempStartDate && tempEndDate) {\n      // We need to check this 2 times, because the\n      // corrected range is constrained by min/max dates\n      checkRangeSize(curr);\n      checkRangeSize(!curr);\n    }\n\n    if (!tempStartDate || !tempEndDate) {\n      ret = false;\n    }\n\n    if (ui) {\n      highlightDays();\n    }\n\n    return ret;\n  }\n\n  function calcDayNr() {\n    return tempStartDate && tempEndDate ? Math.max(1, Math.round((new Date(tempEndDate).setHours(0, 0, 0, 0) - new Date(tempStartDate).setHours(0, 0, 0, 0)) / 86400000) + 1) : 0;\n  }\n\n  function selectTab(tab) {\n    tab.addClass(selectedClass).attr('aria-checked', 'true');\n  }\n\n  function setActiveTab() {\n    if (showSelector && ctx) {\n      $$1('.mbsc-range-btn', ctx).removeClass(selectedClass).removeAttr('aria-checked');\n      selectTab($$1('.mbsc-range-btn', ctx).eq(curr));\n    }\n  }\n\n  function highlightDays() {\n    var start,\n        startT,\n        end,\n        endT,\n        hl,\n        nr = 0,\n        startClass = autoChange || !curr ? ' mbsc-cal-day-hl mbsc-cal-sel-start' : ' mbsc-cal-sel-start',\n        endClass = autoChange || curr ? ' mbsc-cal-day-hl mbsc-cal-sel-end' : ' mbsc-cal-sel-end';\n    inst.startVal = tempStartDate ? formatDate(format, tempStartDate, s) : '';\n    inst.endVal = tempEndDate ? formatDate(format, tempEndDate, s) : '';\n\n    if (ctx) {\n      $$1('.mbsc-range-btn-v-start', ctx).html(inst.startVal || '&nbsp;');\n      $$1('.mbsc-range-btn-v-end', ctx).html(inst.endVal || '&nbsp;'); // Highlight dates\n\n      start = tempStartDate ? new Date(tempStartDate) : null;\n      end = tempEndDate ? new Date(tempEndDate) : null;\n\n      if (!start && end) {\n        start = new Date(end);\n      }\n\n      if (!end && start) {\n        end = new Date(start);\n      }\n\n      hl = curr ? end : start;\n      $$1('.mbsc-cal-day-picker .mbsc-cal-day-hl', ctx).removeClass(highlightClass);\n      $$1('.mbsc-cal-day-picker .mbsc-selected', ctx).removeClass('mbsc-cal-sel-start mbsc-cal-sel-end ' + selectedClass).removeAttr('aria-selected');\n\n      if (start && end) {\n        startT = start.setHours(0, 0, 0, 0);\n        endT = end.setHours(0, 0, 0, 0);\n\n        while (end >= start && nr < 126) {\n          $$1('.mbsc-cal-day[data-full=\"' + hl.getFullYear() + '-' + (hl.getMonth() + 1) + '-' + hl.getDate() + '\"]', ctx).addClass(selectedClass + ' ' + (hl.getTime() === startT ? startClass : '') + (hl.getTime() === endT ? endClass : '')).attr('aria-selected', 'true');\n          hl.setDate(hl.getDate() + (curr ? -1 : 1));\n          hl.setHours(0, 0, 0, 0);\n          nr++;\n        }\n      }\n    }\n  }\n\n  function setTimeInfo(d, end) {\n    return {\n      h: d ? d.getHours() : end ? 23 : 0,\n      i: d ? d.getMinutes() : end ? 59 : 0,\n      s: d ? d.getSeconds() : end ? 59 : 0\n    };\n  }\n\n  function validateDates() {\n    if (tempStartDate) {\n      init = true;\n      inst.setDate(tempStartDate, false, 0, true);\n      tempStartDate = inst.getDate(true);\n    }\n\n    if (tempEndDate) {\n      init = true;\n      inst.setDate(tempEndDate, false, 0, true);\n      tempEndDate = inst.getDate(true);\n    }\n  }\n\n  function onBtnClick(ev) {\n    if (testTouch(ev, this)) {\n      inst._showDayPicker();\n\n      inst.setActiveDate($$1(this).attr('data-select'));\n    }\n  } // ---\n\n\n  var base,\n      ctx,\n      dayChange,\n      format,\n      hasTime,\n      init,\n      maxDate,\n      minDate,\n      set,\n      tempStartDate,\n      tempStartTime,\n      tempEndDate,\n      tempEndTime,\n      timeOnly,\n      showSelector,\n      startDate = inst._startDate,\n      endDate = inst._endDate,\n      curr = 0,\n      now = new Date(),\n      orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, defaults$c, orig),\n      startAnchor = s.anchor,\n      autoChange = s.rangeTap,\n      oneDay = 24 * 60 * 60 * 1000,\n      minDays = Math.max(1, Math.ceil(s.minRange / oneDay)),\n      maxDays = Math.max(1, Math.ceil(s.maxRange / oneDay)),\n      disabledClass = 'mbsc-disabled ' + (s.disabledClass || ''),\n      selectedClass = 'mbsc-selected ' + (s.selectedClass || ''),\n      highlightClass = 'mbsc-cal-day-hl',\n      def = s.defaultValue === null ? [] : s.defaultValue || [new Date(now.setHours(0, 0, 0, 0)), new Date(now.getFullYear(), now.getMonth(), now.getDate() + 6, 23, 59, 59, 999)];\n\n  if (autoChange) {\n    s.tabs = true;\n  }\n\n  base = CalendarBase.call(this, inst);\n  format = inst._format;\n  hasTime = /time/i.test(s.controls.join(','));\n  timeOnly = s.controls.join('') === 'time';\n  showSelector = s.showSelector;\n  maxDate = s.max ? normalizeTime(makeDate(s.max, format, s), true) : Infinity;\n  minDate = s.min ? normalizeTime(makeDate(s.min, format, s), false) : -Infinity;\n  def[0] = makeDate(def[0], format, s, s.isoParts);\n  def[1] = makeDate(def[1], format, s, s.isoParts);\n\n  if (s.startInput) {\n    inst.attachShow($$1(s.startInput), function () {\n      curr = 0;\n      s.anchor = startAnchor || $$1(s.startInput);\n    });\n  }\n\n  if (s.endInput) {\n    inst.attachShow($$1(s.endInput), function () {\n      curr = 1;\n      s.anchor = startAnchor || $$1(s.endInput);\n    });\n  }\n\n  inst._getDayProps = function (d, props) {\n    var start = tempStartDate ? new Date(tempStartDate.getFullYear(), tempStartDate.getMonth(), tempStartDate.getDate()) : null,\n        end = tempEndDate ? new Date(tempEndDate.getFullYear(), tempEndDate.getMonth(), tempEndDate.getDate()) : null;\n    return {\n      selected: start && end && d >= start && d <= tempEndDate,\n      cssClass: props.cssClass + ' ' + ((autoChange || !curr) && start && start.getTime() === d.getTime() || (autoChange || curr) && end && end.getTime() === d.getTime() ? highlightClass : '') + (start && start.getTime() === d.getTime() ? ' mbsc-cal-sel-start' : '') + (end && end.getTime() === d.getTime() ? ' mbsc-cal-sel-end' : '')\n    };\n  }; // Extended methods\n  // ---\n\n\n  inst.setVal = function (values, fill, change, temp, time) {\n    var v = values || [],\n        d = values;\n    tempStartDate = makeDate(v[0], format, s, s.isoParts);\n    tempEndDate = makeDate(v[1], format, s, s.isoParts);\n    validateDates();\n    inst.startVal = tempStartDate ? formatDate(format, tempStartDate, s) : '';\n    inst.endVal = tempEndDate ? formatDate(format, tempEndDate, s) : '';\n    d = base.parseValue(curr ? tempEndDate : tempStartDate, inst);\n\n    if (!temp) {\n      inst._startDate = startDate = tempStartDate;\n      inst._endDate = endDate = tempEndDate;\n    }\n\n    set = true;\n\n    inst._setVal(d, fill, change, temp, time);\n  };\n\n  inst.getVal = function (temp) {\n    return temp ? [returnDate(tempStartDate, s, format), returnDate(tempEndDate, s, format)] : inst._hasValue ? [returnDate(startDate, s, format), returnDate(endDate, s, format)] : null;\n  };\n\n  inst.setActiveDate = function (active) {\n    var hl; //if (!autoChange) {\n\n    curr = active == 'start' ? 0 : 1; //}\n\n    hl = active == 'start' ? tempStartDate : tempEndDate;\n\n    if (inst.isVisible()) {\n      //if (!autoChange) {\n      setActiveTab();\n\n      if (!autoChange) {\n        $$1('.mbsc-cal-table .mbsc-cal-day-hl', ctx).removeClass(highlightClass);\n\n        if (hl) {\n          $$1('.mbsc-cal-day[data-full=\"' + hl.getFullYear() + '-' + (hl.getMonth() + 1) + '-' + hl.getDate() + '\"]', ctx).addClass(highlightClass);\n        }\n      }\n\n      if (hl) {\n        init = true;\n        inst.setDate(hl, false, 1000, true);\n      }\n    }\n  };\n\n  inst.getValue = inst.getVal; // ---\n  // ---\n\n  return extend$1({}, base, {\n    highlight: false,\n    outerMonthChange: false,\n    formatValue: function formatValue() {\n      return inst.startVal + (s.endInput ? '' : inst.endVal ? ' - ' + inst.endVal : '');\n    },\n    parseValue: function parseValue(v) {\n      var parts = v ? v.split(' - ') : [],\n          startVal = s.startInput ? $$1(s.startInput).val() : parts[0],\n          endVal = s.endInput ? $$1(s.endInput).val() : parts[1];\n      s.defaultValue = def[1]; // used by parseDate\n\n      endDate = endVal ? parseDate(format, endVal, s) : def[1];\n      s.defaultValue = def[0]; // used by parseDate\n\n      startDate = startVal ? parseDate(format, startVal, s) : def[2];\n      s.defaultValue = def[curr];\n      inst.startVal = startDate ? formatDate(format, startDate, s) : '';\n      inst.endVal = endDate ? formatDate(format, endDate, s) : '';\n      inst._startDate = startDate;\n      inst._endDate = endDate;\n      return base.parseValue(curr ? endDate : startDate, inst);\n    },\n    onFill: function onFill(ev) {\n      updateInputs(ev.change);\n    },\n    onBeforeClose: function onBeforeClose(ev) {\n      // Don't allow invalid selection\n      if (ev.button === 'set' && !validate(true, true)) {\n        inst.setActiveDate(curr ? 'start' : 'end');\n        return false;\n      }\n    },\n    onHide: function onHide() {\n      base.onHide.call(inst);\n      curr = 0;\n      ctx = null;\n      s.anchor = startAnchor;\n    },\n    onClear: function onClear() {\n      if (autoChange) {\n        curr = 0;\n      }\n    },\n    onBeforeShow: function onBeforeShow() {\n      tempStartDate = startDate || def[0];\n      tempEndDate = endDate || def[1];\n      tempStartTime = setTimeInfo(tempStartDate, 0);\n      tempEndTime = setTimeInfo(tempEndDate, 1);\n\n      if (s.counter) {\n        s.headerText = function () {\n          var nr = calcDayNr();\n          return (nr > 1 ? s.selectedPluralText || s.selectedText : s.selectedText).replace(/{count}/, nr);\n        };\n      }\n\n      set = true;\n    },\n    onMarkupReady: function onMarkupReady(ev) {\n      var html; // Validate start end end dates\n\n      validateDates(); // Set the current date (start or end)\n\n      if (curr && tempEndDate || !curr && tempStartDate) {\n        init = true;\n        inst.setDate(curr ? tempEndDate : tempStartDate, false, 0, true);\n      }\n\n      highlightDays(); // Call calbase\n\n      base.onMarkupReady.call(this, ev);\n      ctx = $$1(ev.target);\n      ctx.addClass('mbsc-range');\n\n      if (showSelector) {\n        html = '<div class=\"mbsc-range-btn-t\" role=\"radiogroup\">' + '<div class=\"mbsc-range-btn-c mbsc-range-btn-start\"><div role=\"radio\" data-select=\"start\" class=\"mbsc-fr-btn-e mbsc-fr-btn-nhl mbsc-range-btn\">' + s.fromText + '<div class=\"mbsc-range-btn-v mbsc-range-btn-v-start\">' + (inst.startVal || '&nbsp;') + '</div></div></div>' + '<div class=\"mbsc-range-btn-c mbsc-range-btn-end\"><div role=\"radio\" data-select=\"end\" class=\"mbsc-fr-btn-e mbsc-fr-btn-nhl mbsc-range-btn\">' + s.toText + '<div class=\"mbsc-range-btn-v mbsc-range-btn-v-end\">' + (inst.endVal || '&nbsp;') + '</div></div></div>' + '</div>';\n\n        if (s.headerText) {\n          $$1('.mbsc-fr-hdr', ctx).after(html);\n        } else {\n          $$1('.mbsc-fr-w', ctx).prepend(html);\n        }\n\n        setActiveTab();\n      }\n\n      $$1('.mbsc-range-btn', ctx).each(function (i, el) {\n        listen(el, 'touchstart', onBtnClick, {\n          passive: true\n        });\n        listen(el, 'click', onBtnClick);\n      });\n    },\n    onDayChange: function onDayChange(day) {\n      day.active = curr ? 'end' : 'start';\n      dayChange = true;\n    },\n    onSetDate: function onSetDate(day) {\n      var d;\n\n      if (!init) {\n        d = normalizeTime(day.date, curr);\n\n        if (!set || dayChange) {\n          if (autoChange && dayChange) {\n            if (curr == 1 && d < tempStartDate) {\n              curr = 0;\n            }\n\n            if (curr) {\n              d.setHours(tempEndTime.h, tempEndTime.i, tempEndTime.s, 999);\n            } else {\n              d.setHours(tempStartTime.h, tempStartTime.i, tempStartTime.s, 0);\n            }\n          }\n\n          if (curr) {\n            tempEndDate = new Date(d);\n            tempEndTime = setTimeInfo(tempEndDate);\n          } else {\n            tempStartDate = new Date(d);\n            tempStartTime = setTimeInfo(tempStartDate);\n          } // Make sure times are on the same day for comparison\n\n\n          if (timeOnly && s.autoCorrect) {\n            normalize(tempStartDate, d);\n            normalize(tempEndDate, d);\n          } // Set end date on start selection if rangeTap is enabled\n\n\n          if (autoChange && dayChange && !curr) {\n            //tempEndDate = new Date(d.setHours(23, 59, 59, 999));\n            tempEndDate = null;\n          }\n        }\n      }\n\n      if (timeOnly && !s.autoCorrect && tempEndDate < tempStartDate) {\n        // Set end time to next day\n        tempEndDate = new Date(tempEndDate.setDate(tempEndDate.getDate() + 1));\n      } // Validate min/max ranges\n\n\n      inst._isValid = validate(set || dayChange || s.autoCorrect, !init);\n      day.active = curr ? 'end' : 'start'; // Toggle start/end if rangeTap is enabled\n\n      if (!init && autoChange) {\n        if (dayChange) {\n          curr = curr ? 0 : 1;\n        }\n\n        setActiveTab();\n      }\n\n      if (inst.isVisible()) {\n        // Disable set button\n        if (inst._isValid) {\n          $$1('.mbsc-fr-btn-s .mbsc-fr-btn', inst._markup).removeClass(disabledClass);\n        } else {\n          $$1('.mbsc-fr-btn-s .mbsc-fr-btn', inst._markup).addClass(disabledClass);\n        }\n      }\n\n      dayChange = false;\n      set = false;\n      init = false;\n    },\n    onTabChange: function onTabChange(ev) {\n      if (ev.tab != 'calendar') {\n        inst.setDate(curr ? tempEndDate : tempStartDate, false, 1000, true);\n      }\n\n      validate(true, true);\n    }\n  });\n};\n\nvar RANGE_SUB_TEMPLATE = \"<mbsc-input\\n    [controlNg]=\\\"false\\\" [name]=\\\"name\\\" [theme]=\\\"theme\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"placeholder\\\"\\n    [error]=\\\"error\\\" [errorMessage]=\\\"errorMessage\\\" \\n    [icon]=\\\"inputIcon\\\" [icon-align]=\\\"iconAlign\\\">\\n    <ng-content></ng-content>\\n</mbsc-input>\";\n\nvar MbscRangeStartComponent = function () {\n  function MbscRangeStartComponent(host, parent, zone, control) {\n    this.host = host;\n    this.parent = parent;\n    this.zone = zone;\n    this.control = control;\n    this.theme = undefined;\n    this.errorMessage = '';\n    this.placeholder = '';\n    this.rangeIndex = 0;\n    this.oldAccessor = null;\n\n    this.onChange = function (value) {};\n\n    this.onTouch = function () {};\n\n    this.initialSet = true;\n    this.checkAccessor();\n  }\n\n  Object.defineProperty(MbscRangeStartComponent.prototype, \"element\", {\n    get: function () {\n      var i = $$1(this.host.nativeElement).find('input');\n      return i[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscRangeStartComponent.prototype.checkAccessor = function () {\n    if (this.control) {\n      if (this.control.valueAccessor !== this) {\n        this.oldAccessor = this.control.valueAccessor;\n      }\n\n      this.control.valueAccessor = this;\n    }\n  };\n\n  MbscRangeStartComponent.prototype.handleChange = function () {\n    var _this = this;\n\n    $$1(this.element).on('change', function () {\n      _this.zone.run(function () {\n        var arr = _this.parent.instance.getVal(),\n            value = arr ? arr[_this.rangeIndex] : undefined,\n            current = undefined,\n            valueText = _this.parent.instance[_this.rangeIndex === 0 ? 'startVal' : 'endVal'];\n\n        if (arr && value && _this.element.value !== valueText && _this.parent.enableManualEdit) {\n          var newArr = new Array(2),\n              otherIndex = _this.rangeIndex === 1 ? 0 : 1;\n          newArr[_this.rangeIndex] = _this.element.value;\n          newArr[otherIndex] = arr[otherIndex];\n\n          _this.parent.instance.setVal(newArr, true, true);\n        } else {\n          if (_this.control && _this.control.value && _this.control.value instanceof Array) {\n            current = _this.control.value[_this.rangeIndex];\n          } else if (_this.control && _this.control.value) {\n            current = _this.control.value;\n          }\n\n          if (_this.control) {\n            if (!isDateEqual(current, value)) {\n              _this.onChange(value);\n\n              _this.control.control.patchValue(value);\n            }\n          }\n        }\n      });\n    });\n  };\n\n  MbscRangeStartComponent.prototype.ngAfterViewInit = function () {\n    this.handleChange();\n    this.checkAccessor();\n  };\n\n  MbscRangeStartComponent.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  MbscRangeStartComponent.prototype.registerOnTouched = function (fn) {\n    this.onTouch = fn;\n  };\n\n  MbscRangeStartComponent.prototype.setDisabledState = function (isDisabled) {\n    this.disabled = isDisabled;\n\n    if (this.oldAccessor && this.oldAccessor.setDisabledState) {\n      this.oldAccessor.setDisabledState(isDisabled);\n    }\n  };\n\n  MbscRangeStartComponent.prototype.writeValue = function (v) {\n    var _this = this;\n\n    if (this.parent && this.parent.instance) {\n      var arr_1 = this.parent.instance.getVal(),\n          val = arr_1 && arr_1.length ? arr_1[this.rangeIndex] : undefined;\n\n      if (!isDateEqual(v, val)) {\n        if (v === undefined) {\n          arr_1 = undefined;\n        } else {\n          arr_1 = arr_1 || [];\n          arr_1[this.rangeIndex] = v;\n        }\n\n        this.parent.instance.setVal(arr_1, true, false);\n\n        if (this.initialSet) {\n          setTimeout(function () {\n            _this.parent.instance.setVal(arr_1, true, false);\n\n            _this.initialSet = false;\n          });\n        }\n      }\n    }\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscRangeStartComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscRangeStartComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRangeStartComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscRangeStartComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRangeStartComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscRangeStartComponent.prototype, \"disabled\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRangeStartComponent.prototype, \"placeholder\", void 0);\n\n  MbscRangeStartComponent = __decorate([__param(1, Inject(forwardRef(function () {\n    return MbscRangeComponent;\n  }))), __param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscRangeComponent, NgZone, NgControl])], MbscRangeStartComponent);\n\n  MbscRangeStartComponent.ɵfac = function MbscRangeStartComponent_Factory(t) {\n    return new (t || MbscRangeStartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n      return MbscRangeComponent;\n    })), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8));\n  };\n\n  MbscRangeStartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscRangeStartComponent,\n    selectors: [[\"mbsc-range-start\"]],\n    inputs: {\n      errorMessage: \"errorMessage\",\n      placeholder: \"placeholder\",\n      disabled: \"disabled\",\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\"\n    },\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 9,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"disabled\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscRangeStartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx.name)(\"theme\", ctx.theme)(\"disabled\", ctx.disabled)(\"placeholder\", ctx.placeholder)(\"error\", ctx.error)(\"errorMessage\", ctx.errorMessage)(\"icon\", ctx.inputIcon)(\"icon-align\", ctx.iconAlign);\n      }\n    },\n    directives: [MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscRangeStartComponent;\n}();\n\nvar MbscRangeEndComponent = function (_super) {\n  __extends(MbscRangeEndComponent, _super);\n\n  function MbscRangeEndComponent(el, parent, zone, control) {\n    var _this = _super.call(this, el, parent, zone, control) || this;\n\n    _this.rangeIndex = 1;\n    return _this;\n  }\n\n  MbscRangeEndComponent = __decorate([__param(1, Inject(forwardRef(function () {\n    return MbscRangeComponent;\n  }))), __param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, MbscRangeComponent, NgZone, NgControl])], MbscRangeEndComponent);\n\n  MbscRangeEndComponent.ɵfac = function MbscRangeEndComponent_Factory(t) {\n    return new (t || MbscRangeEndComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n      return MbscRangeComponent;\n    })), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8));\n  };\n\n  MbscRangeEndComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscRangeEndComponent,\n    selectors: [[\"mbsc-range-end\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 9,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"disabled\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscRangeEndComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"mbsc-input\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"controlNg\", false)(\"name\", ctx.name)(\"theme\", ctx.theme)(\"disabled\", ctx.disabled)(\"placeholder\", ctx.placeholder)(\"error\", ctx.error)(\"errorMessage\", ctx.errorMessage)(\"icon\", ctx.inputIcon)(\"icon-align\", ctx.iconAlign);\n      }\n    },\n    directives: [MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscRangeEndComponent;\n}(MbscRangeStartComponent);\n\nvar MbscRange = function (_super) {\n  __extends(MbscRange, _super);\n\n  function MbscRange(initialElem, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.onSetDate = new EventEmitter();\n    _this.onCellHoverIn = new EventEmitter();\n    _this.onCellHoverOut = new EventEmitter();\n    _this.onDayChange = new EventEmitter();\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscRange.prototype, \"endInput\", {\n    set: function (v) {\n      var element = v;\n\n      if (typeof v == \"string\") {\n        var hasInput = $$1(v).find('input');\n\n        if (hasInput.length) {\n          element = hasInput[0];\n        }\n      }\n\n      this._endInput = element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscRange.prototype, \"startInput\", {\n    set: function (v) {\n      var element = v;\n\n      if (typeof v == \"string\") {\n        var hasInput = $$1(v).find('input');\n\n        if (hasInput.length) {\n          element = hasInput[0];\n        }\n      }\n\n      this._startInput = element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MbscRange.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscRange.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      if (!deepEqualsArray(v, this.instance.getVal())) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(MbscRange.prototype, \"optionExtensions\", {\n    get: function () {\n      var _this = this;\n\n      var externalOnClose = this.options && this.options.onClose;\n      var externalOnFill = this.options && this.options.onFill;\n      var onCloseEmitter = this.onClose;\n      return {\n        onFill: function (event, inst) {\n          if (!_this._wrapper) {\n            if (_this.oldAccessor) {\n              _this.oldAccessor.writeValue(event.valueText);\n            }\n          }\n\n          if (externalOnFill) {\n            externalOnFill(event, inst);\n          }\n        },\n        onClose: function (event, inst) {\n          _this.onTouch();\n\n          if (externalOnClose) {\n            externalOnClose(event, inst);\n          }\n\n          if (onCloseEmitter) {\n            event.inst = inst;\n            onCloseEmitter.emit(event);\n          }\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscRange.prototype.initControl = function () {\n    var options = extend$1({\n      preset: 'range',\n      skipShow: this._wrapper\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, {\n      endInput: this._wrapper ? this.end.element : this._endInput,\n      startInput: this._wrapper ? this.start.element : this._startInput\n    }, this.optionExtensions);\n    this.instance = new RangePicker(this._wrapper ? this.initialElem.nativeElement : this.element, options);\n\n    if (this.initialValue) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  MbscRange.prototype.ngAfterContentInit = function () {\n    if (this.start || this.end) {\n      this._wrapper = true;\n    } else {\n      this._wrapper = false;\n    }\n  };\n\n  MbscRange.prototype.handleChange = function () {\n    var _this = this;\n\n    if (this._wrapper) {\n      $$1(this.start.element).on('change', function () {\n        _this.zone.run(function () {\n          var value = _this.instance.getVal();\n\n          if (_this.control) {\n            if (!deepEqualsArray(_this.control.value, value)) {\n              _this.onChange(value);\n\n              _this.control.control.patchValue(value);\n            }\n          } else {\n            _this.onChangeEmitter.emit(value);\n          }\n        });\n      });\n      $$1(this.end.element).on('change', function () {\n        _this.zone.run(function () {\n          var value = _this.instance.getVal();\n\n          if (_this.control) {\n            if (!deepEqualsArray(_this.control.value, value)) {\n              _this.onChange(value);\n\n              _this.control.control.patchValue(value);\n            }\n          } else {\n            _this.onChangeEmitter.emit(value);\n          }\n        });\n      });\n    } else {\n      var that_1 = this;\n      $$1(this.element).on('change', function () {\n        that_1.zone.run(function () {\n          if (that_1.element.value !== that_1.instance._value && that_1.enableManualEdit) {\n            var v = that_1.element.value && that_1.element.value.split(' - ');\n\n            if (v) {\n              that_1.instance.setVal(v, true, true);\n            }\n          } else {\n            var value = that_1.instance.getVal();\n\n            if (that_1.control) {\n              that_1.onChange(value);\n              that_1.control.control.patchValue(value);\n            } else {\n              that_1.onChangeEmitter.emit(value);\n            }\n          }\n        });\n      });\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscRange.prototype, \"autoCorrect\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscRange.prototype, \"controls\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscRange.prototype, \"endInput\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscRange.prototype, \"maxRange\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscRange.prototype, \"minRange\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscRange.prototype, \"showSelector\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscRange.prototype, \"startInput\", null);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRange.prototype, \"fromText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRange.prototype, \"toText\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscRange.prototype, \"onSetDate\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscRange.prototype, \"onCellHoverIn\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscRange.prototype, \"onCellHoverOut\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscRange.prototype, \"onDayChange\", void 0);\n\n  __decorate([ContentChild(MbscRangeStartComponent, {\n    static: false\n  }), __metadata(\"design:type\", MbscRangeStartComponent)], MbscRange.prototype, \"start\", void 0);\n\n  __decorate([ContentChild(MbscRangeEndComponent, {\n    static: false\n  }), __metadata(\"design:type\", MbscRangeEndComponent)], MbscRange.prototype, \"end\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscRange.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-range'), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], MbscRange.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-rangeChange'), __metadata(\"design:type\", EventEmitter)], MbscRange.prototype, \"onChangeEmitter\", void 0);\n\n  MbscRange = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscRange);\n\n  MbscRange.ɵfac = function MbscRange_Factory(t) {\n    return new (t || MbscRange)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscRange.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscRange,\n    selectors: [[\"\", \"mbsc-range\", \"\"]],\n    contentQueries: function MbscRange_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MbscRangeStartComponent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MbscRangeEndComponent, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.start = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.end = _t.first);\n      }\n    },\n    inputs: {\n      endInput: \"endInput\",\n      startInput: \"startInput\",\n      value: [\"mbsc-range\", \"value\"],\n      autoCorrect: \"autoCorrect\",\n      controls: \"controls\",\n      maxRange: \"maxRange\",\n      minRange: \"minRange\",\n      showSelector: \"showSelector\",\n      fromText: \"fromText\",\n      toText: \"toText\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onSetDate: \"onSetDate\",\n      onCellHoverIn: \"onCellHoverIn\",\n      onCellHoverOut: \"onCellHoverOut\",\n      onDayChange: \"onDayChange\",\n      onChangeEmitter: \"mbsc-rangeChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscRange;\n}(MbscCalBase);\n\nvar MbscRangeComponent = function (_super) {\n  __extends(MbscRangeComponent, _super);\n\n  function MbscRangeComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscRangeComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscRangeComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscRangeComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRangeComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscRangeComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRangeComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscRangeComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscRangeComponent.prototype, \"placeholder\", void 0);\n\n  MbscRangeComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscRangeComponent);\n\n  MbscRangeComponent.ɵfac = function MbscRangeComponent_Factory(t) {\n    return new (t || MbscRangeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscRangeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscRangeComponent,\n    selectors: [[\"mbsc-range\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c6,\n    decls: 3,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscRangeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c5);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵtemplate(2, MbscRangeComponent_mbsc_input_2_Template, 2, 10, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._wrapper && (!ctx.inline || ctx.showInput));\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscRangeComponent;\n}(MbscRange);\n\nvar MbscRangeModule = function () {\n  function MbscRangeModule() {}\n\n  MbscRangeModule.ɵfac = function MbscRangeModule_Factory(t) {\n    return new (t || MbscRangeModule)();\n  };\n\n  MbscRangeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscRangeModule\n  });\n  MbscRangeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscCalBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscRangeModule, {\n      declarations: function () {\n        return [MbscRangeStartComponent, MbscRangeEndComponent, MbscRange, MbscRangeComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscCalBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscRangeStartComponent, MbscRangeEndComponent, MbscRange, MbscRangeComponent];\n      }\n    });\n  })();\n\n  return MbscRangeModule;\n}();\n\nvar MbscScroller = function (_super) {\n  __extends(MbscScroller, _super);\n\n  function MbscScroller(initialElement, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElement, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscScroller.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscScroller.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var innerValue = this.instance.getVal();\n\n      if (innerValue !== v) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscScroller.prototype.initControl = function () {\n    var options = extend$1({}, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Scroller(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscScroller.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-scroller'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscScroller.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-scrollerChange'), __metadata(\"design:type\", EventEmitter)], MbscScroller.prototype, \"onChangeEmitter\", void 0);\n\n  MbscScroller = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscScroller);\n\n  MbscScroller.ɵfac = function MbscScroller_Factory(t) {\n    return new (t || MbscScroller)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscScroller.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscScroller,\n    selectors: [[\"\", \"mbsc-scroller\", \"\"]],\n    inputs: {\n      value: [\"mbsc-scroller\", \"value\"],\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-scrollerChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscScroller;\n}(MbscScrollerBase);\n\nvar MbscScrollerComponent = function (_super) {\n  __extends(MbscScrollerComponent, _super);\n\n  function MbscScrollerComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscScrollerComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscScrollerComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscScrollerComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscScrollerComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscScrollerComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscScrollerComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscScrollerComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscScrollerComponent.prototype, \"placeholder\", void 0);\n\n  MbscScrollerComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscScrollerComponent);\n\n  MbscScrollerComponent.ɵfac = function MbscScrollerComponent_Factory(t) {\n    return new (t || MbscScrollerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscScrollerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscScrollerComponent,\n    selectors: [[\"mbsc-scroller\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscScrollerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscScrollerComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscScrollerComponent;\n}(MbscScroller);\n\nvar MbscScrollerModule = function () {\n  function MbscScrollerModule() {}\n\n  MbscScrollerModule.ɵfac = function MbscScrollerModule_Factory(t) {\n    return new (t || MbscScrollerModule)();\n  };\n\n  MbscScrollerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscScrollerModule\n  });\n  MbscScrollerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscScrollerBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscScrollerModule, {\n      declarations: function () {\n        return [MbscScroller, MbscScrollerComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscScrollerBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscScroller, MbscScrollerComponent];\n      }\n    });\n  })();\n\n  return MbscScrollerModule;\n}();\n\nvar MbscScrollView = function (_super) {\n  __extends(MbscScrollView, _super);\n\n  function MbscScrollView(initialElem, zone, notifyItemService, optionService) {\n    var _this = _super.call(this, initialElem, zone, notifyItemService) || this;\n\n    _this.optionService = optionService;\n    return _this;\n  }\n\n  MbscScrollView.prototype.initControl = function () {\n    var _this = this;\n\n    var options = extend$1({}, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj);\n    this.instance = new ScrollView(this.initialElem.nativeElement, options);\n    this.notifyItemService.notifyInstanceReady(this.instance);\n    this.addRemoveObserver = this.notifyItemService.onAddRemove().subscribe(function (item) {\n      _this.instance.refresh();\n    });\n  };\n\n  MbscScrollView.prototype.ngOnDestroy = function () {\n    this.notifyItemService.onAddRemove().unsubscribe(this.addRemoveObserver);\n\n    _super.prototype.ngOnDestroy.call(this);\n  };\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscScrollView.prototype, \"options\", void 0);\n\n  MbscScrollView = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscNotifyItemService, MbscOptionsService])], MbscScrollView);\n\n  MbscScrollView.ɵfac = function MbscScrollView_Factory(t) {\n    return new (t || MbscScrollView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscScrollView.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscScrollView,\n    selectors: [[\"\", \"mbsc-scrollview\", \"\"]],\n    hostAttrs: [1, \"mbsc-cloak\"],\n    inputs: {\n      options: [\"mbsc-options\", \"options\"]\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscNotifyItemService]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscScrollView;\n}(MbscScrollViewBase);\n\nvar MbscScrollViewItem = function (_super) {\n  __extends(MbscScrollViewItem, _super);\n\n  function MbscScrollViewItem(initialElem, notifyItemService) {\n    return _super.call(this, notifyItemService, initialElem) || this;\n  }\n\n  MbscScrollViewItem = __decorate([__metadata(\"design:paramtypes\", [ElementRef, MbscNotifyItemService])], MbscScrollViewItem);\n\n  MbscScrollViewItem.ɵfac = function MbscScrollViewItem_Factory(t) {\n    return new (t || MbscScrollViewItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService));\n  };\n\n  MbscScrollViewItem.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscScrollViewItem,\n    selectors: [[\"\", \"mbsc-scrollview-item\", \"\"]],\n    hostVars: 1,\n    hostBindings: function MbscScrollViewItem_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-id\", ctx.id);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscScrollViewItem;\n}(MbscScrollItemBase);\n\nvar MbscScrollViewComponent = function (_super) {\n  __extends(MbscScrollViewComponent, _super);\n\n  function MbscScrollViewComponent(initialElem, zone, notifyItemService, optionService) {\n    return _super.call(this, initialElem, zone, notifyItemService, optionService) || this;\n  }\n\n  __decorate([Input$1('options'), __metadata(\"design:type\", Object)], MbscScrollViewComponent.prototype, \"options\", void 0);\n\n  MbscScrollViewComponent = __decorate([__param(3, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, MbscNotifyItemService, MbscOptionsService])], MbscScrollViewComponent);\n\n  MbscScrollViewComponent.ɵfac = function MbscScrollViewComponent_Factory(t) {\n    return new (t || MbscScrollViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscScrollViewComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscScrollViewComponent,\n    selectors: [[\"mbsc-scrollview\"]],\n    inputs: {\n      options: \"options\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MbscNotifyItemService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscScrollViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscScrollViewComponent;\n}(MbscScrollView);\n\nvar MbscScrollViewItemComponent = function (_super) {\n  __extends(MbscScrollViewItemComponent, _super);\n\n  function MbscScrollViewItemComponent(initialElem, notifyItemService) {\n    return _super.call(this, initialElem, notifyItemService) || this;\n  }\n\n  MbscScrollViewItemComponent = __decorate([__metadata(\"design:paramtypes\", [ElementRef, MbscNotifyItemService])], MbscScrollViewItemComponent);\n\n  MbscScrollViewItemComponent.ɵfac = function MbscScrollViewItemComponent_Factory(t) {\n    return new (t || MbscScrollViewItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscNotifyItemService));\n  };\n\n  MbscScrollViewItemComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscScrollViewItemComponent,\n    selectors: [[\"mbsc-scrollview-item\"]],\n    hostVars: 1,\n    hostBindings: function MbscScrollViewItemComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-id\", ctx.id);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MbscScrollViewItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscScrollViewItemComponent;\n}(MbscScrollViewItem);\n\nvar MbscScrollViewModule = function () {\n  function MbscScrollViewModule() {}\n\n  MbscScrollViewModule.ɵfac = function MbscScrollViewModule_Factory(t) {\n    return new (t || MbscScrollViewModule)();\n  };\n\n  MbscScrollViewModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscScrollViewModule\n  });\n  MbscScrollViewModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MbscScrollViewBaseModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscScrollViewModule, {\n      declarations: [MbscScrollView, MbscScrollViewComponent, MbscScrollViewItem, MbscScrollViewItemComponent],\n      imports: [MbscScrollViewBaseModule],\n      exports: [MbscScrollView, MbscScrollViewComponent, MbscScrollViewItem, MbscScrollViewItemComponent]\n    });\n  })();\n\n  return MbscScrollViewModule;\n}();\n\nvar Select$1 = Scroller;\nvar defaults$d = {\n  inputClass: '',\n  rtl: false,\n  showInput: true,\n  groupLabel: 'Groups',\n  dataHtml: 'html',\n  dataText: 'text',\n  dataValue: 'value',\n  dataGroup: 'group',\n  dataDisabled: 'disabled',\n  filterPlaceholderText: 'Type to filter',\n  filterEmptyText: 'No results',\n  filterClearIcon: 'material-close'\n};\n\npresets.select = function (inst, settings) {\n  var $input,\n      dataArray,\n      filterLength,\n      filterText,\n      group,\n      groupArray,\n      groupWheel,\n      groups,\n      groupWheelIdx,\n      hasRemoteData,\n      option,\n      optionArray,\n      optionWheel,\n      optionWheelIdx,\n      prevent,\n      defaultValue = '',\n      selectedTexts = {},\n      animTime = 1000,\n      elm = this,\n      $elm = $$1(elm),\n      orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, defaults$d, orig),\n      $filterEmpty = $$1('<div class=\"mbsc-sel-empty\">' + s.filterEmptyText + '</div>'),\n      origReadOnly = s.readonly,\n      options = {},\n      layout = s.layout || (/top|bottom|inline/.test(s.display) || s.filter ? 'liquid' : ''),\n      isLiquid = layout == 'liquid' || !s.touchUi,\n      multiple = isNumeric(s.select) ? s.select : s.select == 'multiple' || $elm.prop('multiple'),\n      tapSelect = multiple || (s.filter || s.tapSelect ? 1 : false),\n      id = this.id + '_dummy',\n      lbl = $$1('label[for=\"' + this.id + '\"]').attr('for', id),\n      label = s.label !== undefined ? s.label : lbl.length ? lbl.text() : $elm.attr('name'),\n      groupSetup = s.group,\n      hasData = !!s.data,\n      hasGroups = hasData ? !!s.group : $$1('optgroup', $elm).length,\n      hasGroupWheel = hasGroups && groupSetup && groupSetup.groupWheel !== false,\n      groupSep = hasGroups && groupSetup && hasGroupWheel && groupSetup.clustered === true,\n      groupHdr = hasGroups && (!groupSetup || groupSetup.header !== false && !groupSep),\n      values = $elm.val() || (multiple ? [] : ['']),\n      invalid = [];\n\n  function prepareData(filter) {\n    var gr,\n        html,\n        lbl,\n        opt,\n        txt,\n        val,\n        l = 0,\n        c = 0,\n        groupIndexes = {};\n    options = {};\n    groups = {};\n    optionArray = [];\n    groupArray = []; // Reset invalids\n\n    invalid.length = 0;\n\n    if (hasData) {\n      $$1.each(dataArray, function (i, v) {\n        txt = v[s.dataText] + ''; // Convert to string\n\n        html = v[s.dataHtml];\n        val = v[s.dataValue];\n        lbl = v[s.dataGroup];\n        opt = {\n          value: val,\n          html: html,\n          text: txt,\n          index: i,\n          cssClass: groupHdr ? 'mbsc-sel-gr-itm' : ''\n        };\n        options[val] = opt;\n\n        if (!filter || matchesFilter(txt, filter)) {\n          optionArray.push(opt);\n\n          if (hasGroups) {\n            if (groupIndexes[lbl] === undefined) {\n              gr = {\n                text: lbl,\n                value: c,\n                options: [],\n                index: c\n              };\n              groups[c] = gr;\n              groupIndexes[lbl] = c;\n              groupArray.push(gr);\n              c++;\n            } else {\n              gr = groups[groupIndexes[lbl]];\n            }\n\n            if (groupSep) {\n              opt.index = gr.options.length;\n            }\n\n            opt.group = groupIndexes[lbl];\n            gr.options.push(opt);\n          }\n\n          if (v[s.dataDisabled]) {\n            invalid.push(val);\n          }\n        }\n      });\n    } else {\n      if (hasGroups) {\n        var addGroup = true;\n        $$1('optgroup', $elm).each(function (i) {\n          groups[i] = {\n            text: this.label,\n            value: i,\n            options: [],\n            index: i\n          };\n          addGroup = true;\n          $$1('option', this).each(function (j) {\n            opt = {\n              value: this.value,\n              text: this.text,\n              index: groupSep ? j : l++,\n              group: i,\n              cssClass: groupHdr ? 'mbsc-sel-gr-itm' : ''\n            };\n            options[this.value] = opt;\n\n            if (!filter || matchesFilter(this.text, filter)) {\n              if (addGroup) {\n                groupArray.push(groups[i]);\n                addGroup = false;\n              }\n\n              optionArray.push(opt);\n              groups[i].options.push(opt);\n\n              if (this.disabled) {\n                invalid.push(this.value);\n              }\n            }\n          });\n        });\n      } else {\n        $$1('option', $elm).each(function (i) {\n          opt = {\n            value: this.value,\n            text: this.text,\n            index: i\n          };\n          options[this.value] = opt;\n\n          if (!filter || matchesFilter(this.text, filter)) {\n            optionArray.push(opt);\n\n            if (this.disabled) {\n              invalid.push(this.value);\n            }\n          }\n        });\n      }\n    }\n\n    if (s.defaultValue) {\n      defaultValue = s.defaultValue;\n    } else if (optionArray.length) {\n      defaultValue = optionArray[0].value;\n    } else {\n      defaultValue = '';\n    }\n\n    if (groupHdr) {\n      optionArray = [];\n      l = 0;\n      $$1.each(groups, function (i, gr) {\n        if (gr.options.length) {\n          val = '__group' + i;\n          opt = {\n            text: gr.text,\n            value: val,\n            group: i,\n            index: l++,\n            cssClass: 'mbsc-sel-gr'\n          };\n          options[val] = opt;\n          optionArray.push(opt);\n          invalid.push(opt.value);\n          $$1.each(gr.options, function (j, opt) {\n            opt.index = l++;\n            optionArray.push(opt);\n          });\n        }\n      });\n    }\n\n    if ($filterEmpty) {\n      if (optionArray.length) {\n        $filterEmpty.removeClass('mbsc-sel-empty-v');\n      } else {\n        $filterEmpty.addClass('mbsc-sel-empty-v');\n      }\n    }\n  }\n\n  function genValues(data, tapSelect, label, multiple, cssClass) {\n    var i,\n        values = [];\n\n    for (i = 0; i < data.length; i++) {\n      values.push({\n        value: data[i].value,\n        display: data[i].html || data[i].text,\n        cssClass: data[i].cssClass\n      });\n    }\n\n    return {\n      circular: false,\n      multiple: tapSelect && !multiple ? 1 : multiple,\n      cssClass: (tapSelect && !multiple ? 'mbsc-sel-one' : '') + ' ' + cssClass,\n      data: values,\n      label: label\n    };\n  }\n\n  function genGroupWheel() {\n    return genValues(groupArray, tapSelect, s.groupLabel, false, 'mbsc-sel-gr-whl');\n  }\n\n  function genOptWheel() {\n    return genValues(groupSep && groups[group] ? groups[group].options : optionArray, tapSelect, label, multiple, '');\n  }\n\n  function genWheels() {\n    var w = [[]];\n\n    if (hasGroupWheel) {\n      groupWheel = genGroupWheel();\n\n      if (isLiquid) {\n        w[0][groupWheelIdx] = groupWheel;\n      } else {\n        w[groupWheelIdx] = [groupWheel];\n      }\n    }\n\n    optionWheel = genOptWheel();\n\n    if (isLiquid) {\n      w[0][optionWheelIdx] = optionWheel;\n    } else {\n      w[optionWheelIdx] = [optionWheel];\n    }\n\n    return w;\n  }\n\n  function getOption(v) {\n    if (multiple) {\n      if (v && isString(v)) {\n        v = v.split(',');\n      }\n\n      if ($$1.isArray(v)) {\n        v = v[0];\n      }\n    }\n\n    option = v === undefined || v === null || v === '' ? defaultValue : v;\n\n    if (!options[option] && optionArray && optionArray.length) {\n      option = optionArray[0].value;\n    }\n\n    if (hasGroupWheel) {\n      group = options[option] ? options[option].group : null;\n    }\n  }\n\n  function getText(opt) {\n    return selectedTexts[opt] || (options[opt] ? options[opt].text : '');\n  }\n\n  function formatValue(d, inst, fill) {\n    var i,\n        opt,\n        sel = [],\n        selected = fill ? inst._selected : inst._tempSelected;\n\n    if (tapSelect) {\n      for (i in selected[optionWheelIdx]) {\n        sel.push(getText(i));\n      }\n\n      return sel.join(', ');\n    }\n\n    opt = d[optionWheelIdx];\n    return getText(opt);\n  }\n\n  function onFill() {\n    var i,\n        html = '',\n        val = inst.getVal(),\n        txt = s.formatValue.call(elm, inst.getArrayVal(), inst, true);\n\n    if (!(s.filter && s.display == 'inline')) {\n      $input.val(txt);\n    } // If we have a native select, but data was passed in setting,\n    // create an option tag with the selected value\n\n\n    if ($elm.is('select') && hasData) {\n      if (multiple) {\n        for (i = 0; i < val.length; i++) {\n          html += '<option value=\"' + val[i] + '\">' + getText(val[i]) + '</option>';\n        }\n      } else {\n        html = '<option value=\"' + (val === null ? '' : val) + '\">' + txt + '</option>';\n      }\n\n      $elm.html(html);\n    }\n\n    if (elm !== $input[0]) {\n      // if the target is the same, we should not overwrite it\n      $elm.val(val);\n    }\n  }\n\n  function changeWheel() {\n    var wheels = {};\n    wheels[optionWheelIdx] = genOptWheel();\n    prevent = true;\n    inst.changeWheel(wheels);\n  }\n\n  function matchesFilter(str, filter) {\n    filter = filter.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'); // escape the special characters\n\n    return str.match(new RegExp(filter, 'ig'));\n  }\n\n  function getData(data) {\n    return s.data.dataField ? data[s.data.dataField] : s.data.processResponse ? s.data.processResponse(data) : data;\n  }\n\n  function prepareWheels(filter) {\n    var wheels = {};\n    prepareData(filter);\n    getOption(option);\n    s.wheels = genWheels();\n    wheels[optionWheelIdx] = optionWheel;\n    inst._tempWheelArray[optionWheelIdx] = option;\n\n    if (hasGroupWheel) {\n      wheels[groupWheelIdx] = groupWheel;\n      inst._tempWheelArray[groupWheelIdx] = group;\n    }\n\n    inst.changeWheel(wheels, 0, true);\n    onFill();\n  }\n\n  function triggerOnFilter(value) {\n    return inst.trigger('onFilter', {\n      filterText: value\n    });\n  }\n\n  function loadGroupOptions(values) {\n    if (values[groupWheelIdx] != group) {\n      group = values[groupWheelIdx];\n      option = groups[group].options[0].value;\n      values[optionWheelIdx] = option;\n\n      if (groupSep) {\n        changeWheel();\n      } else {\n        inst.setArrayVal(values, false, false, true, animTime);\n      }\n    }\n  } // Extended methods\n  // ---\n\n\n  inst.setVal = function (val, fill, change, temp, time) {\n    if (tapSelect) {\n      if (val !== null && val !== undefined && !multiple) {\n        val = [val];\n      }\n\n      if (val && isString(val)) {\n        val = val.split(',');\n      }\n\n      inst._tempSelected[optionWheelIdx] = arrayToObject(val);\n\n      if (!temp) {\n        inst._selected[optionWheelIdx] = arrayToObject(val);\n      }\n\n      val = val ? val[0] : null;\n\n      if (hasGroupWheel) {\n        var opt = options[val],\n            gr = opt && opt.group;\n        inst._tempSelected[groupWheelIdx] = arrayToObject([gr]);\n\n        if (!temp) {\n          inst._selected[groupWheelIdx] = arrayToObject([gr]);\n        }\n      }\n    }\n\n    inst._setVal(val, fill, change, temp, time);\n  };\n\n  inst.getVal = function (temp, group) {\n    var val;\n\n    if (tapSelect) {\n      val = objectToArray(temp ? inst._tempSelected[optionWheelIdx] : inst._selected[optionWheelIdx]);\n      val = multiple ? val : val.length ? val[0] : null;\n    } else {\n      val = temp ? inst._tempWheelArray : inst._hasValue ? inst._wheelArray : null;\n      val = val ? val[optionWheelIdx] : null;\n    }\n\n    return multiple ? val : val !== undefined ? hasGroups && group ? [options[val] ? options[val].group : null, val] : val : null;\n  };\n\n  inst.refresh = function (data, filter, callback) {\n    callback = callback || noop;\n\n    if (data) {\n      dataArray = data;\n\n      if (!hasRemoteData) {\n        // Save data, otherwise it will get lost on an option call,\n        // and filtering does not work as well after async data update\n        s.data = data;\n      }\n    } else if ($$1.isArray(s.data)) {\n      dataArray = s.data;\n    }\n\n    if (!data && hasRemoteData && filter === undefined) {\n      // reload the data from remote source\n      getJson(s.data.url, function (data) {\n        dataArray = getData(data);\n        prepareWheels();\n        callback();\n      }, s.data.dataType);\n    } else {\n      prepareWheels(filter);\n      callback();\n    }\n  }; // ---\n  // Inits\n  // ---\n\n\n  if (!settings.invalid) {\n    s.invalid = invalid;\n  }\n\n  if (hasGroupWheel) {\n    groupWheelIdx = 0;\n    optionWheelIdx = 1;\n  } else {\n    groupWheelIdx = -1;\n    optionWheelIdx = 0;\n  }\n\n  if (tapSelect) {\n    if (multiple && $elm.is('select')) {\n      $elm.prop('multiple', true);\n    }\n\n    if (values && isString(values)) {\n      values = values.split(',');\n    }\n\n    inst._selected[optionWheelIdx] = arrayToObject(values);\n  } // Remove dummy element if exists\n\n\n  if (inst._$input) {\n    inst._$input.remove();\n  } // Check if mobiscroll form already initialized this select\n\n\n  if ($elm.next().is('.mbsc-select-input')) {\n    $input = $elm.next().removeAttr('tabindex');\n  } else {\n    if (s.input) {\n      $input = $$1(s.input);\n    } else {\n      // Create dummy input\n      if (s.filter && s.display == 'inline') {\n        inst._$input = $$1('<div class=\"mbsc-sel-input-wrap\"><input type=\"text\" id=\"' + id + '\" class=\"mbsc-select-input mbsc-control ' + s.inputClass + '\" readonly /></div>');\n      } else {\n        $input = $$1('<input type=\"text\" id=\"' + id + '\" class=\"mbsc-select-input mbsc-control ' + s.inputClass + '\" readonly />');\n        inst._$input = $input;\n      }\n\n      if (s.showInput) {\n        inst._$input.insertAfter($elm);\n\n        if (!$input) {\n          $input = inst._$input.find('#' + id);\n        }\n      }\n    }\n  } // Show scroller on input tap\n\n\n  inst.attachShow($input.attr('placeholder', s.placeholder || ''));\n\n  if ($input[0] !== elm) {\n    $elm.addClass('mbsc-sel-hdn').attr('tabindex', -1);\n\n    if (!s.showInput) {\n      $elm.attr('data-enhance', false);\n    }\n  }\n\n  if (tapSelect && !(s.rows % 2)) {\n    s.rows = s.rows - 1;\n  }\n\n  if (s.filter) {\n    filterLength = s.filter.minLength || 0;\n  }\n\n  hasRemoteData = s.data && s.data.url;\n\n  if (hasRemoteData) {\n    inst.refresh();\n  } else {\n    if (hasData) {\n      dataArray = s.data;\n    }\n\n    prepareData();\n    getOption($elm.val());\n  } // ---\n\n\n  return {\n    layout: layout,\n    headerText: false,\n    anchor: $input,\n    compClass: 'mbsc-sc mbsc-sel' + (tapSelect ? ' mbsc-sel-multi' : ''),\n    setOnTap: hasGroupWheel ? [false, true] : true,\n    formatValue: formatValue,\n    tapSelect: tapSelect,\n    parseValue: function parseValue(val) {\n      getOption(val === undefined ? $elm.val() : val);\n      return hasGroupWheel ? [group, option] : [option];\n    },\n    validate: function validate(data) {\n      var index = data.index,\n          disabled = [];\n      disabled[optionWheelIdx] = s.invalid;\n\n      if (groupSep && !prevent && index === undefined) {\n        changeWheel();\n      }\n\n      prevent = false;\n      return {\n        disabled: disabled\n      };\n    },\n    onRead: onFill,\n    onFill: onFill,\n    onMarkupReady: function onMarkupReady(event, inst) {\n      if (s.filter) {\n        var $filterInput,\n            debounce,\n            filterInput,\n            $cont = $$1('.mbsc-fr-w', event.target),\n            $filterClear = $$1('<span class=\"mbsc-sel-filter-clear mbsc-ic mbsc-ic-' + s.filterClearIcon + '\"></span>');\n\n        if (s.display == 'inline') {\n          $filterInput = $input;\n          $input.parent().find('.mbsc-sel-filter-clear').remove();\n        } else {\n          $cont.find('.mbsc-fr-c').before('<div class=\"mbsc-input mbsc-sel-filter-cont mbsc-control-w mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : '') + '\"><span class=\"mbsc-input-wrap\"><input tabindex=\"0\" type=\"text\" class=\"mbsc-sel-filter-input mbsc-control\"/></span></div>');\n          $filterInput = $cont.find('.mbsc-sel-filter-input');\n        }\n\n        filterText = null;\n        filterInput = $filterInput[0];\n        $filterInput.prop('readonly', false).attr('placeholder', s.filterPlaceholderText).parent().append($filterClear);\n        $cont.find('.mbsc-fr-c').prepend($filterEmpty); // Will focus in the input on show\n\n        inst._activeElm = filterInput;\n        inst.tap($filterClear, function () {\n          filterText = null;\n          filterInput.value = '';\n          inst.refresh();\n          $filterClear.removeClass('mbsc-sel-filter-show-clear');\n          triggerOnFilter('');\n        });\n        $filterInput.on('keydown', function (ev) {\n          // Enter and Esc\n          if (ev.keyCode == 13 || ev.keyCode == 27) {\n            ev.stopPropagation();\n            filterInput.blur();\n          }\n        }).on('input', function () {\n          clearTimeout(debounce);\n\n          if (filterInput.value.length) {\n            $filterClear.addClass('mbsc-sel-filter-show-clear');\n          } else {\n            $filterClear.removeClass('mbsc-sel-filter-show-clear');\n          }\n\n          debounce = setTimeout(function () {\n            if (filterText === filterInput.value || triggerOnFilter(filterInput.value) === false) {\n              return;\n            }\n\n            filterText = filterInput.value;\n\n            if (filterText.length >= filterLength || !filterText.length) {\n              if (hasRemoteData && s.data.remoteFilter) {\n                getJson(s.data.url + encodeURIComponent(filterText), function (data) {\n                  inst.refresh(getData(data));\n                }, s.data.dataType);\n              } else {\n                inst.refresh(undefined, filterText);\n              }\n            }\n          }, 500);\n        });\n      }\n    },\n    onBeforeShow: function onBeforeShow() {\n      if (multiple && s.counter) {\n        s.headerText = function () {\n          var length = 0;\n          $$1.each(inst._tempSelected[optionWheelIdx], function () {\n            length++;\n          });\n          return (length > 1 ? s.selectedPluralText || s.selectedText : s.selectedText).replace(/{count}/, length);\n        };\n      }\n\n      getOption($elm.val());\n\n      if (tapSelect && hasGroupWheel) {\n        inst._selected[groupWheelIdx] = arrayToObject([group]);\n      }\n\n      if (s.filter) {\n        prepareData(undefined);\n      }\n\n      inst.settings.wheels = genWheels();\n      prevent = true;\n    },\n    onWheelGestureStart: function onWheelGestureStart(ev) {\n      if (ev.index == groupWheelIdx) {\n        s.readonly = [false, true];\n      }\n    },\n    onWheelAnimationEnd: function onWheelAnimationEnd(ev) {\n      var values = inst.getArrayVal(true);\n\n      if (ev.index == groupWheelIdx) {\n        s.readonly = origReadOnly;\n\n        if (!tapSelect) {\n          loadGroupOptions(values);\n        }\n      } else if (ev.index == optionWheelIdx && values[optionWheelIdx] != option) {\n        option = values[optionWheelIdx];\n\n        if (hasGroupWheel && options[option] && options[option].group != group) {\n          group = options[option].group;\n          values[groupWheelIdx] = group;\n          inst._tempSelected[groupWheelIdx] = arrayToObject([group]);\n          inst.setArrayVal(values, false, false, true, animTime);\n        }\n      }\n    },\n    onItemTap: function onItemTap(ev) {\n      var values;\n\n      if (ev.index == optionWheelIdx) {\n        selectedTexts[ev.value] = options[ev.value].text;\n\n        if (tapSelect && !multiple && ev.selected) {\n          inst._prevItemTap = true;\n          return false;\n        }\n      }\n\n      if (ev.index == groupWheelIdx && tapSelect) {\n        if (ev.selected) {\n          inst._prevItemTap = true;\n          return false;\n        }\n\n        values = inst.getArrayVal(true);\n        values[groupWheelIdx] = ev.value;\n        loadGroupOptions(values);\n      }\n    },\n    onClose: function onClose() {\n      if (hasRemoteData && s.data.remoteFilter && filterText) {\n        inst.refresh();\n      }\n    },\n    onDestroy: function onDestroy() {\n      // Remove dummy input\n      if (inst._$input) {\n        inst._$input.remove();\n      } // Revert select attributes and classes\n\n\n      $elm.removeClass('mbsc-sel-hdn').removeAttr('tabindex');\n    }\n  };\n};\n\nvar MbscSelect = function (_super) {\n  __extends(MbscSelect, _super);\n\n  function MbscSelect(initialElement, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElement, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.placeholder = '';\n    _this.onFilter = new EventEmitter();\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscSelect.prototype, \"value\", {\n    set: function (v) {\n      if (!this.control) {\n        this.setNewValueProxy(v);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscSelect.prototype.refreshData = function (newData) {\n    this.instance.refresh(newData);\n  };\n\n  MbscSelect.prototype.initControl = function () {\n    var target = this.target;\n\n    if (target) {\n      if (typeof target !== 'string' && target._elementRef && target._elementRef.nativeElement) {\n        target = target._elementRef.nativeElement;\n        var inputUnder = $$1('input', target);\n\n        if (inputUnder.length) {\n          target = inputUnder;\n        }\n      }\n    } else {\n      var contentInput = $$1('input', this.initialElem.nativeElement).length;\n\n      if (contentInput) {\n        target = this.element;\n      }\n\n      if (!target && this.initialElem.nativeElement.nodeName === 'ION-INPUT') {\n        target = this.initialElem.nativeElement;\n      }\n    }\n\n    var options = extend$1({\n      preset: 'select',\n      input: target\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Select$1(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  MbscSelect.prototype.setElement = function () {\n    this.element = this.initialElem.nativeElement;\n    var contentSelect = $$1('select', this.initialElem.nativeElement);\n\n    if (contentSelect.length) {\n      this.element = contentSelect[0];\n    } else {\n      _super.prototype.setElement.call(this);\n    }\n  };\n\n  MbscSelect.prototype.ngOnInit = function () {\n    this.isMulti = this.options && this.options.select && this.options.select !== 'single';\n    this.cloneDictionary.data = [];\n\n    _super.prototype.ngOnInit.call(this);\n  };\n\n  MbscSelect.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var changed = void 0;\n\n      if (this.isMulti) {\n        changed = !deepEqualsArray(v, this.instance.getVal());\n      } else {\n        var innerValue = this.instance.getVal();\n        changed = innerValue !== v;\n      }\n\n      if (changed) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSelect.prototype, \"counter\", void 0);\n\n  __decorate([Input$1('mbsc-data'), __metadata(\"design:type\", Object)], MbscSelect.prototype, \"data\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelect.prototype, \"dataText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelect.prototype, \"dataGroup\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelect.prototype, \"dataValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSelect.prototype, \"filter\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelect.prototype, \"filterPlaceholderText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelect.prototype, \"filterEmptyText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscSelect.prototype, \"group\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelect.prototype, \"groupLabel\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelect.prototype, \"inputClass\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscSelect.prototype, \"invalid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelect.prototype, \"label\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelect.prototype, \"placeholder\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscSelect.prototype, \"select\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSelect.prototype, \"showInput\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscSelect.prototype, \"onFilter\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscSelect.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-target'), __metadata(\"design:type\", Object)], MbscSelect.prototype, \"target\", void 0);\n\n  __decorate([Input$1('mbsc-select'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscSelect.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-selectChange'), __metadata(\"design:type\", EventEmitter)], MbscSelect.prototype, \"onChangeEmitter\", void 0);\n\n  MbscSelect = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscSelect);\n\n  MbscSelect.ɵfac = function MbscSelect_Factory(t) {\n    return new (t || MbscSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscSelect.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscSelect,\n    selectors: [[\"\", \"mbsc-select\", \"\"]],\n    inputs: {\n      value: [\"mbsc-select\", \"value\"],\n      counter: \"counter\",\n      data: [\"mbsc-data\", \"data\"],\n      dataText: \"dataText\",\n      dataGroup: \"dataGroup\",\n      dataValue: \"dataValue\",\n      filter: \"filter\",\n      filterPlaceholderText: \"filterPlaceholderText\",\n      filterEmptyText: \"filterEmptyText\",\n      group: \"group\",\n      groupLabel: \"groupLabel\",\n      inputClass: \"inputClass\",\n      invalid: \"invalid\",\n      label: \"label\",\n      placeholder: \"placeholder\",\n      select: \"select\",\n      showInput: \"showInput\",\n      options: [\"mbsc-options\", \"options\"],\n      target: [\"mbsc-target\", \"target\"]\n    },\n    outputs: {\n      onFilter: \"onFilter\",\n      onChangeEmitter: \"mbsc-selectChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscSelect;\n}(MbscScrollerBase);\n\nvar MbscSelectComponent = function (_super) {\n  __extends(MbscSelectComponent, _super);\n\n  function MbscSelectComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.dropdown = true;\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscSelectComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  MbscSelectComponent.prototype.ngOnInit = function () {\n    _super.prototype.ngOnInit.call(this);\n\n    if (this.inline) {\n      var showInput = this.showInput || this.options && this.options.showInput;\n      var filter = this.filter || this.options && this.options.filter;\n\n      if (showInput === undefined) {\n        this.inlineOptionsObj.showInput = this.showInput = !!filter;\n      }\n    }\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscSelectComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscSelectComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelectComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSelectComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelectComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscSelectComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscSelectComponent.prototype, \"data\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscSelectComponent.prototype, \"dropdown\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscSelectComponent.prototype, \"placeholder\", void 0);\n\n  MbscSelectComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscSelectComponent);\n\n  MbscSelectComponent.ɵfac = function MbscSelectComponent_Factory(t) {\n    return new (t || MbscSelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscSelectComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscSelectComponent,\n    selectors: [[\"mbsc-select\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      data: \"data\",\n      dropdown: \"dropdown\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscSelectComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscSelectComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscSelectComponent;\n}(MbscSelect);\n\nvar MbscSelectModule = function () {\n  function MbscSelectModule() {}\n\n  MbscSelectModule.ɵfac = function MbscSelectModule_Factory(t) {\n    return new (t || MbscSelectModule)();\n  };\n\n  MbscSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscSelectModule\n  });\n  MbscSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscScrollerBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscSelectModule, {\n      declarations: function () {\n        return [MbscSelect, MbscSelectComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscScrollerBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscSelect, MbscSelectComponent];\n      }\n    });\n  })();\n\n  return MbscSelectModule;\n}();\n\nvar Timer = Scroller;\nvar defaults$e = {\n  autostart: false,\n  step: 1,\n  // in seconds\n  useShortLabels: false,\n  // Localization\n  labels: ['Years', 'Months', 'Days', 'Hours', 'Minutes', 'Seconds', ''],\n  labelsShort: ['Yrs', 'Mths', 'Days', 'Hrs', 'Mins', 'Secs', ''],\n  startText: 'Start',\n  stopText: 'Stop',\n  resetText: 'Reset',\n  lapText: 'Lap',\n  hideText: 'Hide',\n  mode: 'countdown'\n};\n\npresets.timer = function (inst) {\n  /**\r\n   * Converts a date to UTC\r\n   * @param   d   (Date)  Date to convert\r\n   * @return      (Date)  Date converted to UTC\r\n   */\n  function toUtc(d) {\n    return new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n  }\n  /**\r\n   * Calculates the parts of the time differnce\r\n   * @param   time    (Integer)   Time in milliseconds\r\n   * @return          (Object)    Time splitted to the required parts (years, months, days, hours, minutes, seconds)\r\n   */\n\n\n  function getParts(time) {\n    var ret = {};\n\n    if (dateMode && obj[max].index > obj.days.index) {\n      var i,\n          v,\n          o,\n          prev,\n          now = new Date(),\n          d2 = up ? now : origTime,\n          d1 = up ? origTime : now;\n      d1 = toUtc(d1);\n      d2 = toUtc(d2);\n      ret.years = d2.getFullYear() - d1.getFullYear();\n      ret.months = d2.getMonth() - d1.getMonth();\n      ret.days = d2.getDate() - d1.getDate();\n      ret.hours = d2.getHours() - d1.getHours();\n      ret.minutes = d2.getMinutes() - d1.getMinutes();\n      ret.seconds = d2.getSeconds() - d1.getSeconds();\n      ret.fract = (d2.getMilliseconds() - d1.getMilliseconds()) / 10;\n\n      for (i = unique.length; i > 0; i--) {\n        v = unique[i - 1];\n        o = obj[v];\n        prev = unique[$$1.inArray(v, unique) - 1];\n\n        if (obj[prev] && ret[v] < 0) {\n          ret[prev]--;\n          ret[v] += prev == 'months' ? 32 - new Date(d2.getFullYear(), d2.getMonth(), 32).getDate() : o.until + 1;\n        }\n      }\n\n      if (max == 'months') {\n        ret.months += ret.years * 12;\n        delete ret.years;\n      }\n    } else {\n      $$1(unique).each(function (i, v) {\n        if (obj[v].index <= obj[max].index) {\n          ret[v] = Math.floor(time / obj[v].limit);\n          time -= ret[v] * obj[v].limit;\n        }\n      });\n    }\n\n    return ret;\n  }\n  /**\r\n   * Generates a specific wheel\r\n   * @param   v   (String)  Unique identifier\r\n   */\n\n\n  function genWheel(v) {\n    var st = 1,\n        o = obj[v],\n        wh = o.wheel,\n        prefix = o.prefix,\n        from = 0,\n        until = o.until,\n        next = obj[unique[$$1.inArray(v, unique) - 1]];\n\n    if (o.index <= obj[max].index && (!next || next.limit > step)) {\n      if (!wheels[v]) {\n        w[0].push(wh);\n      }\n\n      wheels[v] = 1;\n      wh.data = [];\n      wh.label = o.label || '';\n      wh.cssClass = 'mbsc-timer-whl-' + v;\n\n      if (step >= o.limit) {\n        // Calculate steps on last wheel\n        st = Math.max(Math.round(step / o.limit), 1);\n        tstep = st * o.limit; // Timer is calculated with rounded step\n      }\n\n      if (v == max) {\n        wh.min = 0;\n\n        wh.data = function (i) {\n          return {\n            value: i,\n            display: genValue(i, prefix, o.label)\n          };\n        };\n\n        wh.getIndex = function (v) {\n          return v;\n        };\n      } else {\n        for (i = from; i <= until; i += st) {\n          wh.data.push({\n            value: i,\n            display: genValue(i, prefix, o.label)\n          });\n        }\n      }\n    }\n  }\n\n  function genValue(i, prefix, lbl) {\n    return (prefix || '') + (i < 10 ? '0' : '') + i + '<span class=\"mbsc-timer-lbl\">' + lbl + '</span>';\n  }\n  /**\r\n   * Converts the time into array containing the parts\r\n   * @param   time    (Integer)   Time in milliseconds\r\n   * @return          (Array)     Time splitted to the required parts (years, months, days, hours, minutes, seconds)\r\n   */\n\n\n  function getArray(time) {\n    var arr = [],\n        st,\n        p = getParts(time);\n    $$1(unique).each(function (i, v) {\n      if (wheels[v]) {\n        st = Math.max(Math.round(step / obj[v].limit), 1);\n        arr.push(Math.round(p[v] / st) * st);\n      }\n    });\n    return arr;\n  }\n  /**\r\n   * Calculates the time\r\n   * @param   reset   (Boolean)   Reset the timer or not\r\n   */\n\n\n  function calcTime(reset) {\n    if (dateMode) {\n      time = origTime - new Date();\n\n      if (time < 0) {\n        time *= -1;\n        up = true;\n      } else {\n        up = false;\n      }\n\n      timer = 0;\n      infinit = true;\n    } else if (origTime !== undefined) {\n      infinit = false;\n      time = origTime * 1000;\n      up = s.mode != 'countdown';\n\n      if (reset) {\n        timer = 0;\n      }\n    } else {\n      time = 0;\n      up = s.mode != 'countdown';\n      infinit = up;\n\n      if (reset) {\n        timer = 0;\n      }\n    }\n  }\n\n  function updateUI() {\n    if (running) {\n      $$1('.mbsc-fr-w', ctx).addClass('mbsc-timer-running mbsc-timer-locked');\n      $$1('.mbsc-timer-btn-toggle-c > div', ctx).text(s.stopText);\n\n      if (inst.buttons.start.icon) {\n        $$1('.mbsc-timer-btn-toggle-c > div', ctx).removeClass('mbsc-ic-' + inst.buttons.start.icon);\n      }\n\n      if (inst.buttons.stop.icon) {\n        $$1('.mbsc-timer-btn-toggle-c > div', ctx).addClass('mbsc-ic-' + inst.buttons.stop.icon);\n      }\n\n      if (s.mode == 'stopwatch') {\n        $$1('.mbsc-timer-btn-resetlap-c > div', ctx).text(s.lapText);\n\n        if (inst.buttons.reset.icon) {\n          $$1('.mbsc-timer-btn-resetlap-c > div', ctx).removeClass('mbsc-ic-' + inst.buttons.reset.icon);\n        }\n\n        if (inst.buttons.lap.icon) {\n          $$1('.mbsc-timer-btn-resetlap-c > div', ctx).addClass('mbsc-ic-' + inst.buttons.lap.icon);\n        }\n      }\n    } else {\n      $$1('.mbsc-fr-w', ctx).removeClass('mbsc-timer-running');\n      $$1('.mbsc-timer-btn-toggle-c > div', ctx).text(s.startText);\n\n      if (inst.buttons.start.icon) {\n        $$1('.mbsc-timer-btn-toggle-c > div', ctx).addClass('mbsc-ic-' + inst.buttons.start.icon);\n      }\n\n      if (inst.buttons.stop.icon) {\n        $$1('.mbsc-timer-btn-toggle-c > div', ctx).removeClass('mbsc-ic-' + inst.buttons.stop.icon);\n      }\n\n      if (s.mode == 'stopwatch') {\n        $$1('.mbsc-timer-btn-resetlap-c > div', ctx).text(s.resetText);\n\n        if (inst.buttons.reset.icon) {\n          $$1('.mbsc-timer-btn-resetlap-c > div', ctx).addClass('mbsc-ic-' + inst.buttons.reset.icon);\n        }\n\n        if (inst.buttons.lap.icon) {\n          $$1('.mbsc-timer-btn-resetlap-c > div', ctx).removeClass('mbsc-ic-' + inst.buttons.lap.icon);\n        }\n      }\n    }\n  }\n\n  var i,\n      interval,\n      tstep,\n      startTime,\n      started,\n      ellapsed,\n      time,\n      timer,\n      up,\n      ctx,\n      lap,\n      orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, defaults$e, orig),\n      lbls = s.useShortLabels ? s.labelsShort : s.labels,\n      animTime = 1000,\n      buttons = ['resetlap', 'toggle'],\n      unique = ['years', 'months', 'days', 'hours', 'minutes', 'seconds', 'fract'],\n      obj = {\n    'years': {\n      index: 6,\n      until: 10,\n      limit: 1000 * 60 * 60 * 24 * 365,\n      label: lbls[0],\n      wheel: {}\n    },\n    'months': {\n      index: 5,\n      until: 11,\n      limit: 1000 * 60 * 60 * 24 * 30,\n      label: lbls[1],\n      wheel: {}\n    },\n    'days': {\n      index: 4,\n      until: 31,\n      limit: 1000 * 60 * 60 * 24,\n      label: lbls[2],\n      wheel: {}\n    },\n    'hours': {\n      index: 3,\n      until: 23,\n      limit: 1000 * 60 * 60,\n      label: lbls[3],\n      wheel: {}\n    },\n    'minutes': {\n      index: 2,\n      until: 59,\n      limit: 1000 * 60,\n      label: lbls[4],\n      wheel: {}\n    },\n    'seconds': {\n      index: 1,\n      until: 59,\n      limit: 1000,\n      label: lbls[5],\n      wheel: {}\n    },\n    'fract': {\n      index: 0,\n      until: 99,\n      limit: 10,\n      label: lbls[6],\n      prefix: '.',\n      wheel: {}\n    }\n  },\n      wheels = {},\n      laps = [],\n      lastLap = 0,\n      running = false,\n      stopped = true,\n      infinit = false,\n      step = Math.max(10, s.step * 1000),\n      max = s.maxWheel,\n      locked = s.mode == 'stopwatch' || dateMode,\n      origTime = s.targetTime,\n      dateMode = origTime && origTime.getTime !== undefined,\n      w = [[]]; // Extended methods\n  // ---\n  // Start the counter\n\n  inst.start = function () {\n    if (stopped) {\n      inst.reset();\n    }\n\n    if (!running) {\n      calcTime();\n\n      if (!infinit && timer >= time) {\n        return;\n      }\n\n      running = true;\n      stopped = false;\n      started = new Date();\n      startTime = timer;\n      s.readonly = true;\n      inst.setVal(getArray(up ? timer : time - timer), true, true, false, 100);\n      interval = setInterval(function () {\n        timer = new Date() - started + startTime;\n        inst.setVal(getArray(up ? timer : time - timer), true, true, false, Math.min(100, tstep - 10));\n\n        if (!infinit && timer + tstep >= time) {\n          clearInterval(interval);\n          setTimeout(function () {\n            // Do last tick with precision\n            inst.stop();\n            timer = time;\n            inst.setVal(getArray(up ? timer : 0), true, true, false, 100);\n            inst.trigger('onFinish', {\n              time: time\n            });\n            stopped = true;\n          }, time - timer);\n        }\n      }, tstep);\n      updateUI();\n      inst.trigger('onStart');\n    }\n  }; // Stop the counter\n\n\n  inst.stop = function () {\n    if (running) {\n      running = false;\n      clearInterval(interval); // Time correction\n\n      timer = new Date() - started + startTime;\n      updateUI();\n      inst.trigger('onStop', {\n        ellapsed: timer\n      });\n    }\n  };\n\n  inst.toggle = function () {\n    if (running) {\n      inst.stop();\n    } else {\n      inst.start();\n    }\n  }; // Reset the counter\n\n\n  inst.reset = function () {\n    inst.stop();\n    timer = 0;\n    laps = [];\n    lastLap = 0;\n    inst.setVal(getArray(up ? 0 : time), true, true, false, animTime);\n    inst.settings.readonly = locked;\n    stopped = true;\n\n    if (!locked) {\n      $$1('.mbsc-fr-w', ctx).removeClass('mbsc-timer-locked');\n    }\n\n    inst.trigger('onReset');\n  }; // Lap\n\n\n  inst.lap = function () {\n    if (running) {\n      ellapsed = new Date() - started + startTime;\n      lap = ellapsed - lastLap;\n      lastLap = ellapsed;\n      laps.push(ellapsed);\n      inst.trigger('onLap', {\n        ellapsed: ellapsed,\n        lap: lap,\n        laps: laps\n      });\n    }\n  };\n\n  inst.resetlap = function () {\n    if (running && s.mode == 'stopwatch') {\n      inst.lap();\n    } else {\n      inst.reset();\n    }\n  };\n\n  inst.getTime = function () {\n    return time;\n  };\n\n  inst.setTime = function (t) {\n    origTime = t / 1000;\n    time = t;\n  };\n\n  inst.getEllapsedTime = function () {\n    return stopped ? 0 : running ? new Date() - started + startTime : timer;\n  };\n\n  inst.setEllapsedTime = function (t, change) {\n    if (!stopped) {\n      startTime = timer = t;\n      started = new Date();\n      inst.setVal(getArray(up ? timer : time - timer), true, change, false, animTime);\n    }\n  }; // ---\n  // Constructor\n\n\n  calcTime(true);\n\n  if (!max && !time) {\n    max = 'minutes';\n  }\n\n  if (s.display !== 'inline') {\n    buttons.unshift('hide');\n  } // Determine maximum wheel\n\n\n  if (!max) {\n    $$1(unique).each(function (i, v) {\n      if (!max && time >= obj[v].limit) {\n        max = v;\n        return false;\n      }\n    });\n  } // Generate wheels\n\n\n  $$1(unique).each(function (i, v) {\n    genWheel(v);\n  });\n  tstep = Math.max(97, tstep); // timer step cannot be less then 100 ms\n\n  if (s.autostart) {\n    setTimeout(function () {\n      inst.start();\n    }, 0);\n  }\n\n  inst.handlers.toggle = inst.toggle;\n  inst.handlers.start = inst.start;\n  inst.handlers.stop = inst.stop;\n  inst.handlers.resetlap = inst.resetlap;\n  inst.handlers.reset = inst.reset;\n  inst.handlers.lap = inst.lap;\n  inst.buttons.toggle = {\n    parentClass: 'mbsc-timer-btn-toggle-c',\n    text: s.startText,\n    icon: s.startIcon,\n    handler: 'toggle'\n  };\n  inst.buttons.start = {\n    text: s.startText,\n    icon: s.startIcon,\n    handler: 'start'\n  };\n  inst.buttons.stop = {\n    text: s.stopText,\n    icon: s.stopIcon,\n    handler: 'stop'\n  };\n  inst.buttons.reset = {\n    text: s.resetText,\n    icon: s.resetIcon,\n    handler: 'reset'\n  };\n  inst.buttons.lap = {\n    text: s.lapText,\n    icon: s.lapIcon,\n    handler: 'lap'\n  };\n  inst.buttons.resetlap = {\n    parentClass: 'mbsc-timer-btn-resetlap-c',\n    text: s.resetText,\n    icon: s.resetIcon,\n    handler: 'resetlap'\n  };\n  inst.buttons.hide = {\n    parentClass: 'mbsc-timer-btn-hide-c',\n    text: s.hideText,\n    icon: s.closeIcon,\n    handler: 'cancel'\n  }; // Return settings\n\n  return {\n    minWidth: 100,\n    wheels: w,\n    headerText: false,\n    readonly: locked,\n    buttons: buttons,\n    compClass: 'mbsc-timer mbsc-sc',\n    parseValue: function parseValue() {\n      return getArray(up ? 0 : time);\n    },\n    formatValue: function formatValue(d) {\n      var ret = '',\n          j = 0;\n      $$1(unique).each(function (i, v) {\n        if (v == 'fract') {\n          return;\n        }\n\n        if (wheels[v]) {\n          ret += d[j] + (v == 'seconds' && wheels.fract ? '.' + d[j + 1] : '') + ' ' + lbls[i] + ' ';\n          j++;\n        }\n      });\n      return ret;\n    },\n    validate: function validate(data) {\n      var values = data.values,\n          i = data.index,\n          j = 0;\n\n      if (stopped && i !== undefined) {\n        origTime = 0;\n        $$1(unique).each(function (i, v) {\n          if (wheels[v]) {\n            origTime += obj[v].limit * values[j];\n            j++;\n          }\n        });\n        origTime /= 1000;\n        calcTime(true);\n      }\n    },\n    onBeforeShow: function onBeforeShow() {\n      s.showLabel = true;\n    },\n    onMarkupReady: function onMarkupReady(ev) {\n      ctx = $$1(ev.target);\n      updateUI();\n\n      if (locked) {\n        $$1('.mbsc-fr-w', ctx).addClass('mbsc-timer-locked');\n      }\n    },\n    onPosition: function onPosition(ev) {\n      // Force width to fit buttons\n      $$1('.mbsc-fr-w', ev.target).css('min-width', 0).css('min-width', $$1('.mbsc-fr-btn-cont', ev.target)[0].offsetWidth);\n    },\n    onDestroy: function onDestroy() {\n      clearInterval(interval);\n    }\n  };\n};\n\nvar MbscTimer = function (_super) {\n  __extends(MbscTimer, _super);\n\n  function MbscTimer(initialElement, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElement, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.onLap = new EventEmitter();\n    _this.onFinish = new EventEmitter();\n    _this.onReset = new EventEmitter();\n    _this.onStart = new EventEmitter();\n    _this.onStop = new EventEmitter();\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscTimer.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscTimer.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      if (!this.instance._timer || Math.abs(this.instance._timer - v) > 10) {\n        this.instance.setEllapsedTime(v, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscTimer.prototype.handleChange = function () {\n    var that = this;\n    $$1(this.element).on('change', function () {\n      that.zone.run(function () {\n        that.instance._timer = that.instance.getEllapsedTime();\n\n        if (that.control) {\n          that.control.control.patchValue(that.instance._timer);\n        } else {\n          that.onChangeEmitter.emit(that.instance._timer);\n        }\n      });\n    });\n  };\n\n  MbscTimer.prototype.initControl = function () {\n    var options = extend$1({\n      preset: 'timer'\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Timer(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscTimer.prototype, \"autostart\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimer.prototype, \"maxWheel\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimer.prototype, \"mode\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscTimer.prototype, \"step\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscTimer.prototype, \"targetTime\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscTimer.prototype, \"useShortLabels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimer.prototype, \"hideText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscTimer.prototype, \"labels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscTimer.prototype, \"labelsShort\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimer.prototype, \"lapText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimer.prototype, \"resetText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimer.prototype, \"startText\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimer.prototype, \"stopText\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscTimer.prototype, \"onLap\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscTimer.prototype, \"onFinish\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscTimer.prototype, \"onReset\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscTimer.prototype, \"onStart\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], MbscTimer.prototype, \"onStop\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscTimer.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-timer'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], MbscTimer.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-timerChange'), __metadata(\"design:type\", EventEmitter)], MbscTimer.prototype, \"onChangeEmitter\", void 0);\n\n  MbscTimer = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscTimer);\n\n  MbscTimer.ɵfac = function MbscTimer_Factory(t) {\n    return new (t || MbscTimer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscTimer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscTimer,\n    selectors: [[\"\", \"mbsc-timer\", \"\"]],\n    inputs: {\n      value: [\"mbsc-timer\", \"value\"],\n      autostart: \"autostart\",\n      maxWheel: \"maxWheel\",\n      mode: \"mode\",\n      step: \"step\",\n      targetTime: \"targetTime\",\n      useShortLabels: \"useShortLabels\",\n      hideText: \"hideText\",\n      labels: \"labels\",\n      labelsShort: \"labelsShort\",\n      lapText: \"lapText\",\n      resetText: \"resetText\",\n      startText: \"startText\",\n      stopText: \"stopText\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onLap: \"onLap\",\n      onFinish: \"onFinish\",\n      onReset: \"onReset\",\n      onStart: \"onStart\",\n      onStop: \"onStop\",\n      onChangeEmitter: \"mbsc-timerChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTimer;\n}(MbscScrollerBase);\n\nvar MbscTimerComponent = function (_super) {\n  __extends(MbscTimerComponent, _super);\n\n  function MbscTimerComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscTimerComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscTimerComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscTimerComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimerComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscTimerComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimerComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscTimerComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimerComponent.prototype, \"placeholder\", void 0);\n\n  MbscTimerComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscTimerComponent);\n\n  MbscTimerComponent.ɵfac = function MbscTimerComponent_Factory(t) {\n    return new (t || MbscTimerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscTimerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscTimerComponent,\n    selectors: [[\"mbsc-timer\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscTimerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscTimerComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTimerComponent;\n}(MbscTimer);\n\nvar MbscTimerModule = function () {\n  function MbscTimerModule() {}\n\n  MbscTimerModule.ɵfac = function MbscTimerModule_Factory(t) {\n    return new (t || MbscTimerModule)();\n  };\n\n  MbscTimerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscTimerModule\n  });\n  MbscTimerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscScrollerBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscTimerModule, {\n      declarations: function () {\n        return [MbscTimer, MbscTimerComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscScrollerBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscTimer, MbscTimerComponent];\n      }\n    });\n  })();\n\n  return MbscTimerModule;\n}();\n\nvar Timespan = Scroller;\nvar defaults$f = {\n  wheelOrder: 'hhiiss',\n  useShortLabels: false,\n  min: 0,\n  max: Infinity,\n  // Localization\n  labels: ['Years', 'Months', 'Days', 'Hours', 'Minutes', 'Seconds'],\n  //, ''],\n  labelsShort: ['Yrs', 'Mths', 'Days', 'Hrs', 'Mins', 'Secs'] //, '']\n\n};\n\npresets.timespan = function (inst) {\n  /**\r\n   * Calculates the parts of the time differnce.\r\n   * @param {Integer} time - Time in milliseconds.\r\n   * @return {Object} - Time splitted to the required parts (years, months, days, hours, minutes, seconds).\r\n   */\n  function getParts(time) {\n    var ret = {};\n    $$1(unique).each(function (i, v) {\n      ret[v] = wheels[v] ? Math.floor(time / obj[v].limit) : 0;\n      time -= ret[v] * obj[v].limit;\n    });\n    return ret;\n  }\n  /**\r\n   * Generates a specific wheel.\r\n   * @param {String} v - Unique identifier.\r\n   */\n\n\n  function genWheel(v) {\n    var leading = false,\n        st = steps[wheels[v] - 1] || 1,\n        o = obj[v],\n        lbl = o.label,\n        w = o.wheel;\n    w.data = [];\n    w.label = o.label;\n\n    if (ord.match(new RegExp(o.re + o.re, 'i'))) {\n      leading = true;\n    }\n\n    if (v == max) {\n      w.min = minParts[v];\n      w.max = maxParts[v];\n\n      w.data = function (i) {\n        return {\n          value: i * st,\n          display: genValue(i * st, leading, lbl)\n        };\n      };\n\n      w.getIndex = function (v) {\n        return Math.round(v / st);\n      };\n    } else {\n      for (i = 0; i <= o.until; i += st) {\n        w.data.push({\n          value: i,\n          display: genValue(i, leading, lbl)\n        });\n      }\n    }\n  }\n\n  function genValue(i, leading, lbl) {\n    return (i < 10 && leading ? '0' : '') + i + '<span class=\"mbsc-ts-lbl\">' + lbl + '</span>';\n  }\n\n  function calcTime(arr) {\n    var j = 0,\n        time = 0;\n    $$1.each(o, function (i, v) {\n      if (!isNaN(+arr[j])) {\n        time += obj[v.v].limit * arr[i];\n      }\n    });\n    return time;\n  }\n\n  function step(v, st) {\n    return Math.floor(v / st) * st;\n  }\n\n  var i,\n      j,\n      p,\n      minParts,\n      maxParts,\n      orig = extend$1({}, inst.settings),\n      s = extend$1(inst.settings, defaults$f, orig),\n      ord = s.wheelOrder,\n      lbls = s.useShortLabels ? s.labelsShort : s.labels,\n      unique = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'],\n      //, 'fract'],\n  obj = {\n    'years': {\n      ord: 0,\n      index: 6,\n      until: 10,\n      limit: 1000 * 60 * 60 * 24 * 365,\n      label: lbls[0],\n      re: 'y',\n      wheel: {}\n    },\n    'months': {\n      ord: 1,\n      index: 5,\n      until: 11,\n      limit: 1000 * 60 * 60 * 24 * 30,\n      label: lbls[1],\n      re: 'm',\n      wheel: {}\n    },\n    'days': {\n      ord: 2,\n      index: 4,\n      until: 31,\n      limit: 1000 * 60 * 60 * 24,\n      label: lbls[2],\n      re: 'd',\n      wheel: {}\n    },\n    'hours': {\n      ord: 3,\n      index: 3,\n      until: 23,\n      limit: 1000 * 60 * 60,\n      label: lbls[3],\n      re: 'h',\n      wheel: {}\n    },\n    'minutes': {\n      ord: 4,\n      index: 2,\n      until: 59,\n      limit: 1000 * 60,\n      label: lbls[4],\n      re: 'i',\n      wheel: {}\n    },\n    'seconds': {\n      ord: 5,\n      index: 1,\n      until: 59,\n      limit: 1000,\n      label: lbls[5],\n      re: 's',\n      wheel: {}\n    } //,\n    //'fract': { index: 0, until: 99, limit: 10, label: lbls[6], prefix: '.', short: 'u' }\n\n  },\n      o = [],\n      steps = s.steps || [],\n      wheels = {},\n      max = 'seconds',\n      defaultVal = s.defaultValue || Math.max(s.min, Math.min(0, s.max)),\n      w = [[]]; // Constructor\n  // Generate wheels\n\n  $$1(unique).each(function (i, v) {\n    j = ord.search(new RegExp(obj[v].re, 'i'));\n\n    if (j > -1) {\n      o.push({\n        o: j,\n        v: v\n      });\n\n      if (obj[v].index > obj[max].index) {\n        max = v;\n      }\n    }\n  });\n  o.sort(function (a, b) {\n    return a.o > b.o ? 1 : -1;\n  });\n  $$1.each(o, function (i, v) {\n    wheels[v.v] = i + 1;\n    w[0].push(obj[v.v].wheel);\n  });\n  minParts = getParts(s.min);\n  maxParts = getParts(s.max);\n  $$1.each(o, function (i, v) {\n    genWheel(v.v);\n  }); // Extended methods\n  // ---\n\n  inst.getVal = function (temp, formatted) {\n    return formatted ? inst._getVal(temp) : inst._hasValue || temp ? calcTime(inst.getArrayVal(temp)) : null;\n  }; // ---\n  // Return settings\n\n\n  return {\n    minWidth: 100,\n    showLabel: true,\n    wheels: w,\n    compClass: 'mbsc-ts mbsc-sc',\n    parseValue: function parseValue(val) {\n      var ret = [],\n          m;\n\n      if (isNumeric(val) || !val) {\n        p = getParts(val || defaultVal);\n        $$1.each(o, function (i, v) {\n          ret.push(p[v.v]);\n        });\n      } else {\n        $$1.each(o, function (i, v) {\n          m = new RegExp('(\\\\d+)\\\\s?(' + s.labels[obj[v.v].ord] + '|' + s.labelsShort[obj[v.v].ord] + ')', 'gi').exec(val);\n          ret.push(m ? m[1] : 0);\n        });\n      }\n\n      $$1(ret).each(function (i, v) {\n        // Steps\n        ret[i] = step(v, steps[i] || 1);\n      });\n      return ret;\n    },\n    formatValue: function formatValue(d) {\n      var ret = '';\n      $$1.each(o, function (i, v) {\n        ret += +d[i] ? d[i] + ' ' + obj[v.v].label + ' ' : '';\n      });\n      return ret ? ret.replace(/\\s+$/g, '') : 0;\n    },\n    validate: function validate(data) {\n      var p,\n          i,\n          index,\n          dis,\n          values = data.values,\n          dir = data.direction,\n          disabled = [],\n          maxprop = true,\n          minprop = true;\n      $$1(unique).each(function (x, v) {\n        if (wheels[v] !== undefined) {\n          index = wheels[v] - 1;\n          disabled[index] = [];\n          dis = {};\n\n          if (v != max) {\n            if (maxprop) {\n              for (i = maxParts[v] + 1; i <= obj[v].until; i++) {\n                dis[i] = true;\n              }\n            }\n\n            if (minprop) {\n              for (i = 0; i < minParts[v]; i++) {\n                dis[i] = true;\n              }\n            }\n          }\n\n          values[index] = inst.getValidValue(index, values[index], dir, dis);\n          p = getParts(calcTime(values));\n          maxprop = maxprop && p[v] == maxParts[v];\n          minprop = minprop && p[v] == minParts[v];\n          $$1.each(dis, function (i) {\n            disabled[index].push(i);\n          });\n        }\n      });\n      return {\n        disabled: disabled\n      };\n    }\n  };\n};\n\nvar MbscTimespan = function (_super) {\n  __extends(MbscTimespan, _super);\n\n  function MbscTimespan(initialElement, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElement, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscTimespan.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscTimespan.prototype.setNewValue = function (v) {\n    if (this.instance) {\n      var innerValue = this.instance.getVal();\n\n      if (innerValue !== v) {\n        this.instance.setVal(v, true, false);\n\n        if (this._inputService && this._inputService.input) {\n          this._inputService.input.innerValue = this.instance._value;\n        }\n      }\n    }\n  };\n\n  MbscTimespan.prototype.initControl = function () {\n    var options = extend$1({\n      preset: 'timespan'\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Timespan(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscTimespan.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscTimespan.prototype, \"max\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Number)], MbscTimespan.prototype, \"min\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscTimespan.prototype, \"steps\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscTimespan.prototype, \"useShortLabels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimespan.prototype, \"wheelOrder\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscTimespan.prototype, \"labels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscTimespan.prototype, \"labelsShort\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscTimespan.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-timespan'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], MbscTimespan.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-timespanChange'), __metadata(\"design:type\", EventEmitter)], MbscTimespan.prototype, \"onChangeEmitter\", void 0);\n\n  MbscTimespan = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscTimespan);\n\n  MbscTimespan.ɵfac = function MbscTimespan_Factory(t) {\n    return new (t || MbscTimespan)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscTimespan.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscTimespan,\n    selectors: [[\"\", \"mbsc-timespan\", \"\"]],\n    inputs: {\n      value: [\"mbsc-timespan\", \"value\"],\n      defaultValue: \"defaultValue\",\n      max: \"max\",\n      min: \"min\",\n      steps: \"steps\",\n      useShortLabels: \"useShortLabels\",\n      wheelOrder: \"wheelOrder\",\n      labels: \"labels\",\n      labelsShort: \"labelsShort\",\n      options: [\"mbsc-options\", \"options\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-timespanChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTimespan;\n}(MbscScrollerBase);\n\nvar MbscTimespanComponent = function (_super) {\n  __extends(MbscTimespanComponent, _super);\n\n  function MbscTimespanComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    return _this;\n  }\n\n  MbscTimespanComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscTimespanComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscTimespanComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimespanComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscTimespanComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimespanComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscTimespanComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTimespanComponent.prototype, \"placeholder\", void 0);\n\n  MbscTimespanComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscTimespanComponent);\n\n  MbscTimespanComponent.ɵfac = function MbscTimespanComponent_Factory(t) {\n    return new (t || MbscTimespanComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscTimespanComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscTimespanComponent,\n    selectors: [[\"mbsc-timespan\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscTimespanComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscTimespanComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTimespanComponent;\n}(MbscTimespan);\n\nvar MbscTimespanModule = function () {\n  function MbscTimespanModule() {}\n\n  MbscTimespanModule.ɵfac = function MbscTimespanModule_Factory(t) {\n    return new (t || MbscTimespanModule)();\n  };\n\n  MbscTimespanModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscTimespanModule\n  });\n  MbscTimespanModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscScrollerBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscTimespanModule, {\n      declarations: function () {\n        return [MbscTimespan, MbscTimespanComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscScrollerBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscTimespan, MbscTimespanComponent];\n      }\n    });\n  })();\n\n  return MbscTimespanModule;\n}();\n\nvar Treelist = Scroller;\npresets.treelist = List;\n\nvar MbscTreelist = function (_super) {\n  __extends(MbscTreelist, _super);\n\n  function MbscTreelist(initialElement, zone, control, inputService, optionService, view) {\n    var _this = _super.call(this, initialElement, zone, control, inputService, view) || this;\n\n    _this.optionService = optionService;\n    _this.placeholder = '';\n    _this.options = {};\n    _this.onChangeEmitter = new EventEmitter();\n    return _this;\n  }\n\n  Object.defineProperty(MbscTreelist.prototype, \"value\", {\n    set: function (v) {\n      this.setNewValueProxy(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MbscTreelist.prototype.initControl = function () {\n    var _this = this;\n\n    var target = this.target;\n\n    if (target) {\n      if (typeof target !== 'string' && target._elementRef && target._elementRef.nativeElement) {\n        target = target._elementRef.nativeElement;\n      } else if (target.getInputElement) {\n        target.getInputElement().then(function (inp) {\n          _this.updateOptions({\n            input: inp\n          }, true, false, false);\n        });\n      }\n    }\n\n    var options = extend$1({\n      preset: 'treelist',\n      input: target\n    }, this.optionService ? this.optionService.options : {}, this.options, this.inlineOptionsObj, this.optionExtensions);\n    this.instance = new Treelist(this.element, options);\n\n    if (this.initialValue !== undefined) {\n      this.instance.setVal(this.initialValue, true, false);\n    }\n  };\n\n  MbscTreelist.prototype.setNewValue = function (v) {\n    if (this.instance && this.instance.getVal() !== v) {\n      this.instance.setVal(v, true, false);\n\n      if (this._inputService && this._inputService.input) {\n        this._inputService.input.innerValue = this.instance._value;\n      }\n    }\n  };\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscTreelist.prototype, \"defaultValue\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTreelist.prototype, \"inputClass\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscTreelist.prototype, \"invalid\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Array)], MbscTreelist.prototype, \"labels\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTreelist.prototype, \"placeholder\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscTreelist.prototype, \"showInput\", void 0);\n\n  __decorate([Input$1('mbsc-data'), __metadata(\"design:type\", Array)], MbscTreelist.prototype, \"wheelArray\", void 0);\n\n  __decorate([Input$1('mbsc-options'), __metadata(\"design:type\", Object)], MbscTreelist.prototype, \"options\", void 0);\n\n  __decorate([Input$1('mbsc-target'), __metadata(\"design:type\", Object)], MbscTreelist.prototype, \"target\", void 0);\n\n  __decorate([Input$1('mbsc-treelist'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], MbscTreelist.prototype, \"value\", null);\n\n  __decorate([Output('mbsc-treelistChange'), __metadata(\"design:type\", EventEmitter)], MbscTreelist.prototype, \"onChangeEmitter\", void 0);\n\n  MbscTreelist = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService, ViewContainerRef])], MbscTreelist);\n\n  MbscTreelist.ɵfac = function MbscTreelist_Factory(t) {\n    return new (t || MbscTreelist)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MbscTreelist.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MbscTreelist,\n    selectors: [[\"\", \"mbsc-treelist\", \"\"]],\n    inputs: {\n      value: [\"mbsc-treelist\", \"value\"],\n      defaultValue: \"defaultValue\",\n      inputClass: \"inputClass\",\n      invalid: \"invalid\",\n      labels: \"labels\",\n      placeholder: \"placeholder\",\n      showInput: \"showInput\",\n      wheelArray: [\"mbsc-data\", \"wheelArray\"],\n      options: [\"mbsc-options\", \"options\"],\n      target: [\"mbsc-target\", \"target\"]\n    },\n    outputs: {\n      onChangeEmitter: \"mbsc-treelistChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTreelist;\n}(MbscScrollerBase);\n\nvar MbscTreelistComponent = function (_super) {\n  __extends(MbscTreelistComponent, _super);\n\n  function MbscTreelistComponent(initialElem, zone, control, inputService, optionService) {\n    var _this = _super.call(this, initialElem, zone, control, inputService, optionService, null) || this;\n\n    _this.errorMessage = '';\n    _this.placeholder = '';\n    _this.showInput = false;\n    _this.inlineOptionsObj = {\n      showInput: false\n    };\n    return _this;\n  }\n\n  MbscTreelistComponent.prototype.ngAfterViewInit = function () {\n    _super.prototype.ngAfterViewInit.call(this);\n\n    this.setThemeClasses();\n  };\n\n  __decorate([Input$1('icon'), __metadata(\"design:type\", String)], MbscTreelistComponent.prototype, \"inputIcon\", void 0);\n\n  __decorate([Input$1('icon-align'), __metadata(\"design:type\", String)], MbscTreelistComponent.prototype, \"iconAlign\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTreelistComponent.prototype, \"name\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Boolean)], MbscTreelistComponent.prototype, \"error\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTreelistComponent.prototype, \"errorMessage\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", Object)], MbscTreelistComponent.prototype, \"options\", void 0);\n\n  __decorate([Input$1('data'), __metadata(\"design:type\", Array)], MbscTreelistComponent.prototype, \"wheelArray\", void 0);\n\n  __decorate([Input$1(), __metadata(\"design:type\", String)], MbscTreelistComponent.prototype, \"placeholder\", void 0);\n\n  MbscTreelistComponent = __decorate([__param(2, Optional()), __param(3, Optional()), __param(4, Optional()), __metadata(\"design:paramtypes\", [ElementRef, NgZone, NgControl, MbscInputService, MbscOptionsService])], MbscTreelistComponent);\n\n  MbscTreelistComponent.ɵfac = function MbscTreelistComponent_Factory(t) {\n    return new (t || MbscTreelistComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8));\n  };\n\n  MbscTreelistComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MbscTreelistComponent,\n    selectors: [[\"mbsc-treelist\"]],\n    inputs: {\n      inputIcon: [\"icon\", \"inputIcon\"],\n      iconAlign: [\"icon-align\", \"iconAlign\"],\n      name: \"name\",\n      error: \"error\",\n      errorMessage: \"errorMessage\",\n      options: \"options\",\n      wheelArray: [\"data\", \"wheelArray\"],\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\", 4, \"ngIf\"], [3, \"controlNg\", \"name\", \"theme\", \"themeVariant\", \"label-style\", \"input-style\", \"disabled\", \"dropdown\", \"placeholder\", \"error\", \"errorMessage\", \"icon\", \"icon-align\"]],\n    template: function MbscTreelistComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MbscTreelistComponent_mbsc_input_0_Template, 2, 13, \"mbsc-input\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.inline || ctx.showInput);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MbscInput],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MbscTreelistComponent;\n}(MbscTreelist);\n\nvar MbscTreelistModule = function () {\n  function MbscTreelistModule() {}\n\n  MbscTreelistModule.ɵfac = function MbscTreelistModule_Factory(t) {\n    return new (t || MbscTreelistModule)();\n  };\n\n  MbscTreelistModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscTreelistModule\n  });\n  MbscTreelistModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MbscScrollerBaseModule, MbscInputModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscTreelistModule, {\n      declarations: function () {\n        return [MbscTreelist, MbscTreelistComponent];\n      },\n      imports: function () {\n        return [CommonModule, MbscScrollerBaseModule, MbscInputModule];\n      },\n      exports: function () {\n        return [MbscTreelist, MbscTreelistComponent];\n      }\n    });\n  })();\n\n  return MbscTreelistModule;\n}();\n\nvar directives = [MbscInput, MbscCalendar, MbscCalendarComponent, MbscCard, MbscCardComponent, MbscCardContent, MbscCardFooter, MbscCardHeader, MbscCardSubtitle, MbscCardTitle, MbscColor, MbscColorComponent, MbscDate, MbscTime, MbscDatetime, MbscDateComponent, MbscTimeComponent, MbscDatetimeComponent, MbscEventcalendar, MbscEventcalendarComponent, MbscForm, MbscRating, MbscDropdown, MbscTextarea, MbscButton, MbscCheckbox, MbscSwitch, MbscStepper, MbscProgress, MbscSlider, MbscRadio, MbscRadioGroup, MbscSegmentedGroup, MbscSegmented, MbscFormGroup, MbscFormGroupTitle, MbscFormGroupContent, MbscAccordion, MbscImage, MbscImageComponent, MbscImageItem, MbscListview, MbscListviewSublist, MbscListviewItem, MbscListviewHeader, MbscMeasurement, MbscDistance, MbscForce, MbscMass, MbscSpeed, MbscTemperature, MbscMeasurementComponent, MbscTemperatureComponent, MbscForceComponent, MbscSpeedComponent, MbscMassComponent, MbscDistanceComponent, MbscNav, MbscBottomNav, MbscHamburgerNav, MbscTabNav, MbscNavItem, MbscNumber, MbscNumberComponent, MbscNumpad, MbscNumpadDecimal, MbscNumpadDate, MbscNumpadTime, MbscNumpadTimespan, MbscNumpadComponent, MbscNumpadDateComponent, MbscNumpadDecimalComponent, MbscNumpadTimeComponent, MbscNumpadTimespanComponent, MbscOptionlist, MbscOptionItem, MbscPage, MbscNote, MbscAvatar, MbscPopup, MbscWidget, MbscRange, MbscRangeComponent, MbscRangeStartComponent, MbscRangeEndComponent, MbscScroller, MbscScrollerComponent, MbscScrollView, MbscScrollViewItem, MbscScrollViewComponent, MbscScrollViewItemComponent, MbscSelect, MbscSelectComponent, MbscTimer, MbscTimerComponent, MbscTimespan, MbscTimespanComponent, MbscTreelist, MbscTreelistComponent];\nvar modules = [MbscInputModule, MbscCalendarModule, MbscCardModule, MbscColorModule, MbscDatetimeModule, MbscEventcalendarModule, MbscFormsModule, MbscImageModule, MbscListviewModule, MbscMeasurementModule, MbscNavigationModule, MbscNumberModule, MbscNumpadModule, MbscOptionlistModule, MbscPageModule, MbscPopupModule, MbscRangeModule, MbscScrollerModule, MbscScrollViewModule, MbscSelectModule, MbscTimerModule, MbscTimespanModule, MbscTreelistModule];\n\nvar MbscModule = function () {\n  function MbscModule() {}\n\n  MbscModule_1 = MbscModule;\n\n  MbscModule.forRoot = function (config) {\n    return {\n      ngModule: MbscModule_1,\n      providers: [{\n        provide: MbscRouterToken,\n        useExisting: config.angularRouter\n      }]\n    };\n  };\n\n  var MbscModule_1;\n\n  MbscModule.ɵfac = function MbscModule_Factory(t) {\n    return new (t || MbscModule)();\n  };\n\n  MbscModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MbscModule\n  });\n  MbscModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[FormsModule, CommonModule, modules], MbscInputModule, MbscCalendarModule, MbscCardModule, MbscColorModule, MbscDatetimeModule, MbscEventcalendarModule, MbscFormsModule, MbscImageModule, MbscListviewModule, MbscMeasurementModule, MbscNavigationModule, MbscNumberModule, MbscNumpadModule, MbscOptionlistModule, MbscPageModule, MbscPopupModule, MbscRangeModule, MbscScrollerModule, MbscScrollViewModule, MbscSelectModule, MbscTimerModule, MbscTimespanModule, MbscTreelistModule]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscModule, {\n      imports: function () {\n        return [FormsModule, CommonModule, MbscInputModule, MbscCalendarModule, MbscCardModule, MbscColorModule, MbscDatetimeModule, MbscEventcalendarModule, MbscFormsModule, MbscImageModule, MbscListviewModule, MbscMeasurementModule, MbscNavigationModule, MbscNumberModule, MbscNumpadModule, MbscOptionlistModule, MbscPageModule, MbscPopupModule, MbscRangeModule, MbscScrollerModule, MbscScrollViewModule, MbscSelectModule, MbscTimerModule, MbscTimespanModule, MbscTreelistModule];\n      },\n      exports: function () {\n        return [MbscInput, MbscCalendar, MbscCalendarComponent, MbscCard, MbscCardComponent, MbscCardContent, MbscCardFooter, MbscCardHeader, MbscCardSubtitle, MbscCardTitle, MbscColor, MbscColorComponent, MbscDate, MbscTime, MbscDatetime, MbscDateComponent, MbscTimeComponent, MbscDatetimeComponent, MbscEventcalendar, MbscEventcalendarComponent, MbscForm, MbscRating, MbscDropdown, MbscTextarea, MbscButton, MbscCheckbox, MbscSwitch, MbscStepper, MbscProgress, MbscSlider, MbscRadio, MbscRadioGroup, MbscSegmentedGroup, MbscSegmented, MbscFormGroup, MbscFormGroupTitle, MbscFormGroupContent, MbscAccordion, MbscImage, MbscImageComponent, MbscImageItem, MbscListview, MbscListviewSublist, MbscListviewItem, MbscListviewHeader, MbscMeasurement, MbscDistance, MbscForce, MbscMass, MbscSpeed, MbscTemperature, MbscMeasurementComponent, MbscTemperatureComponent, MbscForceComponent, MbscSpeedComponent, MbscMassComponent, MbscDistanceComponent, MbscNav, MbscBottomNav, MbscHamburgerNav, MbscTabNav, MbscNavItem, MbscNumber, MbscNumberComponent, MbscNumpad, MbscNumpadDecimal, MbscNumpadDate, MbscNumpadTime, MbscNumpadTimespan, MbscNumpadComponent, MbscNumpadDateComponent, MbscNumpadDecimalComponent, MbscNumpadTimeComponent, MbscNumpadTimespanComponent, MbscOptionlist, MbscOptionItem, MbscPage, MbscNote, MbscAvatar, MbscPopup, MbscWidget, MbscRange, MbscRangeComponent, MbscRangeStartComponent, MbscRangeEndComponent, MbscScroller, MbscScrollerComponent, MbscScrollView, MbscScrollViewItem, MbscScrollViewComponent, MbscScrollViewItemComponent, MbscSelect, MbscSelectComponent, MbscTimer, MbscTimerComponent, MbscTimespan, MbscTimespanComponent, MbscTreelist, MbscTreelistComponent, MbscInputModule, MbscCalendarModule, MbscCardModule, MbscColorModule, MbscDatetimeModule, MbscEventcalendarModule, MbscFormsModule, MbscImageModule, MbscListviewModule, MbscMeasurementModule, MbscNavigationModule, MbscNumberModule, MbscNumpadModule, MbscOptionlistModule, MbscPageModule, MbscPopupModule, MbscRangeModule, MbscScrollerModule, MbscScrollViewModule, MbscSelectModule, MbscTimerModule, MbscTimespanModule, MbscTreelistModule];\n      }\n    });\n  })();\n\n  return MbscModule;\n}(); // Arabic\n\n\nfunction intPart(floatNum) {\n  if (floatNum < -0.0000001) {\n    return Math.ceil(floatNum - 0.0000001);\n  }\n\n  return Math.floor(floatNum + 0.0000001);\n}\n\nfunction hijriToGregorian(hY, hM, hD) {\n  hY = parseInt(hY);\n  hM = parseInt(hM);\n  hD = parseInt(hD);\n  var jd,\n      l,\n      j,\n      n,\n      i,\n      k,\n      gregDate = new Array(3);\n  jd = intPart((11 * hY + 3) / 30) + 354 * hY + 30 * hM - intPart((hM - 1) / 2) + hD + 1948440 - 385;\n\n  if (jd > 2299160) {\n    l = jd + 68569;\n    n = intPart(4 * l / 146097);\n    l = l - intPart((146097 * n + 3) / 4);\n    i = intPart(4000 * (l + 1) / 1461001);\n    l = l - intPart(1461 * i / 4) + 31;\n    j = intPart(80 * l / 2447);\n    hD = l - intPart(2447 * j / 80);\n    l = intPart(j / 11);\n    hM = j + 2 - 12 * l;\n    hY = 100 * (n - 49) + i + l;\n  } else {\n    j = jd + 1402;\n    k = intPart((j - 1) / 1461);\n    l = j - 1461 * k;\n    n = intPart((l - 1) / 365) - intPart(l / 1461);\n    i = l - 365 * n + 30;\n    j = intPart(80 * i / 2447);\n    hD = i - intPart(2447 * j / 80);\n    i = intPart(j / 11);\n    hM = j + 2 - 12 * i;\n    hY = 4 * k + n + i - 4716;\n  }\n\n  gregDate[2] = hD;\n  gregDate[1] = hM;\n  gregDate[0] = hY;\n  return gregDate;\n}\n\nfunction gregorianToHijri(gY, gM, gD) {\n  gY = parseInt(gY);\n  gM = parseInt(gM);\n  gD = parseInt(gD);\n  var jd,\n      l,\n      j,\n      n,\n      hijriDate = new Array(0, 0, 0);\n\n  if (gY > 1582 || gY == 1582 && gM > 10 || gY == 1582 && gM == 10 && gD > 14) {\n    jd = intPart(1461 * (gY + 4800 + intPart((gM - 14) / 12)) / 4) + intPart(367 * (gM - 2 - 12 * intPart((gM - 14) / 12)) / 12) - intPart(3 * intPart((gY + 4900 + intPart((gM - 14) / 12)) / 100) / 4) + gD - 32075;\n  } else {\n    jd = 367 * gY - intPart(7 * (gY + 5001 + intPart((gM - 9) / 7)) / 4) + intPart(275 * gM / 9) + gD + 1729777;\n  }\n\n  l = jd - 1948440 + 10632;\n  n = intPart((l - 1) / 10631);\n  l = l - 10631 * n + 354;\n  j = intPart((10985 - l) / 5316) * intPart(50 * l / 17719) + intPart(l / 5670) * intPart(43 * l / 15238);\n  l = l - intPart((30 - j) / 15) * intPart(17719 * j / 50) - intPart(j / 16) * intPart(15238 * j / 43) + 29;\n  gM = intPart(24 * l / 709);\n  gD = l - intPart(709 * gM / 24);\n  gY = 30 * n + j - 30;\n  hijriDate[2] = gD;\n  hijriDate[1] = gM;\n  hijriDate[0] = gY;\n  return hijriDate;\n}\n\ncalendars.hijri = {\n  getYear: function getYear(date) {\n    return gregorianToHijri(date.getFullYear(), date.getMonth() + 1, date.getDate())[0];\n  },\n  getMonth: function getMonth(date) {\n    return --gregorianToHijri(date.getFullYear(), date.getMonth() + 1, date.getDate())[1];\n  },\n  getDay: function getDay(date) {\n    return gregorianToHijri(date.getFullYear(), date.getMonth() + 1, date.getDate())[2];\n  },\n  getDate: function getDate(y, m, d, h, i, s, u) {\n    if (m < 0) {\n      y += Math.floor(m / 12);\n      m = m % 12 ? 12 + m % 12 : 0;\n    }\n\n    if (m > 11) {\n      y += Math.floor(m / 12);\n      m = m % 12;\n    }\n\n    var gregorianDate = hijriToGregorian(y, +m + 1, d);\n    return new Date(gregorianDate[0], gregorianDate[1] - 1, gregorianDate[2], h || 0, i || 0, s || 0, u || 0);\n  },\n  getMaxDayOfMonth: function getMaxDayOfMonth(hY, hM) {\n    if (hM < 0) {\n      hY += Math.floor(hM / 12);\n      hM = hM % 12 ? 12 + hM % 12 : 0;\n    }\n\n    if (hM > 11) {\n      hY += Math.floor(hM / 12);\n      hM = hM % 12;\n    }\n\n    var daysPerMonth = [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],\n        leapYear = (hY * 11 + 14) % 30 < 11;\n    return daysPerMonth[hM] + (hM === 11 && leapYear ? 1 : 0);\n  }\n}; // Arabic\n\nmobiscroll.i18n.ar = {\n  // Core\n  rtl: true,\n  // Right to left mode\n  setText: 'تعيين',\n  cancelText: 'إلغاء',\n  clearText: 'مسح',\n  selectedText: '{count} المحدد',\n  // Datetime component\n  dateFormat: 'dd/mm/yy',\n  dayNames: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'],\n  dayNamesShort: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],\n  dayNamesMin: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],\n  dayText: 'يوم',\n  hourText: 'ساعات',\n  minuteText: 'الدقائق',\n  monthNames: ['يناير', 'فبراير', 'مارس', 'ابريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],\n  monthNamesShort: ['يناير', 'فبراير', 'مارس', 'ابريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],\n  monthText: 'شهر',\n  secText: 'ثواني',\n  amText: 'ص',\n  pmText: 'م',\n  timeFormat: 'hh:ii A',\n  yearText: 'عام',\n  nowText: 'الآن',\n  // Calendar component\n  firstDay: 0,\n  dateText: 'تاريخ',\n  timeText: 'وقت',\n  closeText: 'إغلاق',\n  todayText: 'اليوم',\n  prevMonthText: 'الشهر السابق',\n  nextMonthText: 'الشهر القادم',\n  prevYearText: 'السنه السابقة',\n  nextYearText: 'العام القادم',\n  allDayText: 'اليوم كله',\n  noEventsText: 'لا توجد احداث',\n  // Event calendar\n  eventText: 'الحدث',\n  eventsText: 'أحداث',\n  moreEventsText: 'واحد آخر',\n  moreEventsPluralText: 'اثنان آخران {count}',\n  // Daterange component\n  fromText: 'يبدا',\n  toText: 'ينتهي',\n  // Measurement components\n  wholeText: 'كامل',\n  fractionText: 'جزء',\n  unitText: 'وحدة',\n  // Numpad date\n  delimiter: '/',\n  // Numpad decimal\n  decimalSeparator: '.',\n  thousandsSeparator: ',',\n  // Timer / Timespan component\n  labels: ['سنوات', 'أشهر', 'أيام', 'ساعة', 'دقائق', 'ثواني', ''],\n  labelsShort: ['سنوات', 'أشهر', 'أيام', 'ساعة', 'دقائق', 'ثواني', ''],\n  // Timer component\n  startText: 'بدء',\n  stopText: 'إيقاف',\n  resetText: 'إعادة ضبط',\n  lapText: 'الدورة',\n  hideText: 'إخفاء',\n  // Forms\n  offText: 'إيقاف',\n  onText: 'تشغيل',\n  // Listview\n  backText: 'رجوع',\n  undoText: 'تراجع'\n};\nvar themes$1 = mobiscroll.themes;\nthemes$1.frame.ios = {\n  display: 'bottom',\n  // frame\n  headerText: false,\n  // frame\n  btnWidth: false,\n  // frame\n  deleteIcon: 'ios-backspace',\n  // numpad\n  scroll3d: os != 'wp' && (os != 'android' || majorVersion > 7)\n};\nthemes$1.scroller.ios = extend$1({}, themes$1.frame.ios, {\n  rows: 5,\n  // scroller\n  height: 34,\n  // scroller\n  minWidth: 55,\n  // scroller\n  selectedLineHeight: true,\n  // scroller\n  selectedLineBorder: 1,\n  // scroller\n  showLabel: false,\n  // scroller\n  useShortLabels: true,\n  // timespan/timer\n  btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down5',\n  // scroller\n  btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up5',\n  // scroller\n  checkIcon: 'ion-ios7-checkmark-empty',\n  // select\n  filterClearIcon: 'ion-close-circled',\n  // select\n  dateDisplay: 'MMdyy',\n  // date\n  btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left5',\n  // calendar\n  btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right5' // calendar\n\n});\nthemes$1.listview.ios = {\n  leftArrowClass: 'mbsc-ic-ion-ios7-arrow-back',\n  rightArrowClass: 'mbsc-ic-ion-ios7-arrow-forward'\n};\nthemes$1.form.ios = {};\nvar themes$2 = mobiscroll.themes;\nthemes$2.frame.bootstrap = {\n  disabledClass: 'disabled',\n  selectedClass: 'btn-primary',\n  selectedTabClass: 'active',\n  tabLink: true,\n  todayClass: 'text-primary mbsc-cal-today',\n  onMarkupInserted: function onMarkupInserted(ev) {\n    var dw = $$1(ev.target),\n        calTabs = $$1('.mbsc-cal-tabs', dw);\n    $$1('.mbsc-fr-popup', dw).addClass('popover');\n    $$1('.mbsc-fr-w', dw).addClass('popover-content');\n    $$1('.mbsc-fr-hdr', dw).addClass('popover-title popover-header');\n    $$1('.mbsc-fr-arr-i', dw).addClass('popover');\n    $$1('.mbsc-fr-arr', dw).addClass('arrow');\n    $$1('.mbsc-fr-btn', dw).addClass('btn btn-default btn-secondary');\n    $$1('.mbsc-fr-btn-s .mbsc-fr-btn', dw).removeClass('btn-default btn-secondary').addClass('btn btn-primary'); // Calendar tabs\n\n    calTabs.addClass('nav nav-tabs');\n    calTabs.find('.mbsc-cal-tab').addClass('nav-item'); // 4.x\n\n    calTabs.find('a').addClass('nav-link'); // 4.x\n\n    calTabs.find('.mbsc-cal-tab.active .nav-link').addClass('active'); // 4.x\n    // Calendar year/month selector\n\n    $$1('.mbsc-cal-picker', dw).addClass('popover'); // Rangepicker start/end buttons\n\n    $$1('.mbsc-range-btn', dw).addClass('btn btn-sm btn-small btn-default'); // Numpad \n\n    $$1('.mbsc-np-btn', dw).addClass('btn btn-default'); // Select filter\n\n    $$1('.mbsc-sel-filter-cont', dw).removeClass('mbsc-input');\n    $$1('.mbsc-sel-filter-input', dw).addClass('form-control');\n  },\n  onTabChange: function onTabChange(ev, inst) {\n    $$1('.mbsc-cal-tabs .nav-link', inst._markup).removeClass('active');\n    $$1('.mbsc-cal-tab.active .nav-link', inst._markup).addClass('active');\n  },\n  onPosition: function onPosition(ev) {\n    setTimeout(function () {\n      $$1('.mbsc-fr-bubble-top, .mbsc-fr-bubble-top .mbsc-fr-arr-i', ev.target).removeClass('bottom bs-popover-bottom').addClass('top bs-popover-top');\n      $$1('.mbsc-fr-bubble-bottom, .mbsc-fr-bubble-bottom .mbsc-fr-arr-i', ev.target).removeClass('top bs-popover-top').addClass('bottom  bs-popover-bottom');\n    }, 10);\n  }\n};\nthemes$2.scroller.bootstrap = extend$1({}, themes$2.frame.bootstrap, {\n  dateDisplay: 'Mddyy',\n  btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left5',\n  // calendar\n  btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right5',\n  // calendar\n  btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down5 btn-light',\n  // scroller\n  btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up5 btn-light',\n  // scroller\n  selectedLineHeight: true,\n  onEventBubbleShow: function onEventBubbleShow(ev) {\n    var evc = $$1(ev.eventList);\n    $$1('.mbsc-cal-event-list', evc).addClass('list-group');\n    $$1('.mbsc-cal-event', evc).addClass('list-group-item');\n  }\n});\nthemes$2.navigation.bootstrap = {\n  wrapperClass: 'popover panel panel-default',\n  groupClass: 'btn-group',\n  activeClass: 'btn-primary',\n  disabledClass: 'disabled',\n  itemClass: 'btn btn-default'\n};\nthemes$2.form.bootstrap = {};\nmobiscroll.customTheme('mobiscroll-dark', 'mobiscroll');\n\nfunction _addRipple($control, ev) {\n  var x = getCoord(ev, 'X', true),\n      y = getCoord(ev, 'Y', true),\n      control = $control[0],\n      rect = $control.offset(),\n      left = x - rect.left,\n      top = y - rect.top,\n      width = Math.max(left, control.offsetWidth - left),\n      height = Math.max(top, control.offsetHeight - top),\n      size = 2 * Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n\n  _removeRipple($ripple);\n\n  $ripple = $$1('<span class=\"mbsc-ripple\"></span>').css({\n    backgroundColor: getComputedStyle(control).color,\n    width: size,\n    height: size,\n    top: y - rect.top - size / 2,\n    left: x - rect.left - size / 2\n  }).appendTo($control);\n  setTimeout(function () {\n    $ripple.addClass('mbsc-ripple-scaled mbsc-ripple-visible');\n  }, 10);\n}\n\nfunction _removeRipple($r) {\n  setTimeout(function () {\n    if ($r) {\n      $r.removeClass('mbsc-ripple-visible');\n      setTimeout(function () {\n        $r.remove();\n      }, 2000);\n    }\n  }, 100);\n}\n\nfunction initRipple($markup, selector, disabled, nohl) {\n  var startX,\n      startY,\n      markup = $markup[0];\n\n  function onStart(ev) {\n    var target = closest(markup, ev.target, selector);\n\n    if (target && testTouch(ev, target)) {\n      startX = getCoord(ev, 'X');\n      startY = getCoord(ev, 'Y');\n      $active$1 = $$1(target);\n\n      if (!$active$1.hasClass(disabled) && !$active$1.hasClass(nohl)) {\n        _addRipple($active$1, ev);\n      } else {\n        $active$1 = null;\n      }\n    }\n  }\n\n  function onMove(ev) {\n    if ($active$1 && Math.abs(getCoord(ev, 'X') - startX) > 9 || Math.abs(getCoord(ev, 'Y') - startY) > 9) {\n      _removeRipple($ripple);\n\n      $active$1 = null;\n    }\n  }\n\n  function onEnd() {\n    if ($active$1) {\n      setTimeout(function () {\n        _removeRipple($ripple);\n      }, 100);\n      $active$1 = null;\n    }\n  }\n\n  if (markup) {\n    if (markup.__mbscRippleOff) {\n      markup.__mbscRippleOff();\n    }\n\n    listen(markup, 'touchstart', onStart, {\n      passive: true\n    });\n    listen(markup, 'mousedown', onStart);\n    listen(markup, 'touchmove', onMove, {\n      passive: true\n    });\n    listen(markup, 'mousemove', onMove);\n    listen(markup, 'touchend', onEnd);\n    listen(markup, 'touchcancel', onEnd);\n    listen(markup, 'mouseleave', onEnd);\n    listen(markup, 'mouseup', onEnd);\n\n    markup.__mbscRippleOff = function () {\n      unlisten(markup, 'touchstart', onStart, {\n        passive: true\n      });\n      unlisten(markup, 'mousedown', onStart);\n      unlisten(markup, 'touchmove', onMove, {\n        passive: true\n      });\n      unlisten(markup, 'mousemove', onMove);\n      unlisten(markup, 'touchend', onEnd);\n      unlisten(markup, 'touchcancel', onEnd);\n      unlisten(markup, 'mouseleave', onEnd);\n      unlisten(markup, 'mouseup', onEnd);\n      delete markup.__mbscRippleOff;\n    };\n  }\n}\n\nvar $active$1,\n    $ripple,\n    themes$3 = mobiscroll.themes;\nthemes$3.frame.material = {\n  headerText: false,\n  btnWidth: false,\n  deleteIcon: 'material-backspace',\n  onMarkupReady: function onMarkupReady(ev) {\n    initRipple($$1(ev.target), '.mbsc-fr-btn-e', 'mbsc-disabled', 'mbsc-fr-btn-nhl');\n  }\n};\nthemes$3.scroller.material = extend$1({}, themes$3.frame.material, {\n  showLabel: false,\n  selectedLineBorder: 2,\n  weekDays: 'min',\n  icon: {\n    filled: 'material-star',\n    empty: 'material-star-outline'\n  },\n  checkIcon: 'material-check',\n  btnPlusClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-down',\n  btnMinusClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-up',\n  btnCalPrevClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-left',\n  btnCalNextClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-right'\n});\nthemes$3.listview.material = {\n  leftArrowClass: 'mbsc-ic-material-keyboard-arrow-left',\n  rightArrowClass: 'mbsc-ic-material-keyboard-arrow-right',\n  onItemActivate: function onItemActivate(ev) {\n    _addRipple($$1(ev.target), ev.domEvent);\n  },\n  onItemDeactivate: function onItemDeactivate() {\n    _removeRipple($ripple);\n  },\n  onSlideStart: function onSlideStart(ev) {\n    $$1('.mbsc-ripple', ev.target).remove();\n  },\n  onSortStart: function onSortStart(ev) {\n    $$1('.mbsc-ripple', ev.target).remove();\n  }\n};\nthemes$3.navigation.material = {\n  onInit: function onInit() {\n    initRipple($$1(this), '.mbsc-ms-item.mbsc-btn-e', 'mbsc-disabled', 'mbsc-btn-nhl');\n  },\n  onMarkupInit: function onMarkupInit() {\n    $$1('.mbsc-ripple', this).remove();\n  },\n  onDestroy: function onDestroy() {\n    if (this.__mbscRippleOff) {\n      this.__mbscRippleOff();\n    }\n  }\n};\nthemes$3.form.material = {\n  addRipple: function addRipple(elm, ev) {\n    _addRipple(elm, ev);\n  },\n  removeRipple: function removeRipple() {\n    _removeRipple($ripple);\n  }\n};\nmobiscroll.customTheme('material-dark', 'material');\nmobiscroll.customTheme('ios-dark', 'ios');\nvar themes$4 = mobiscroll.themes;\nthemes$4.frame.windows = {\n  headerText: false,\n  deleteIcon: 'backspace4',\n  //setIcon: 'material-check',\n  //cancelIcon: 'material-close',\n  //closeIcon: 'material-close',\n  //clearIcon: 'material-close',\n  //okIcon: 'material-check',\n  //nowIcon: 'loop2',\n  //startIcon: 'play3',\n  //stopIcon: 'pause2',\n  //resetIcon: 'stop2',\n  //lapIcon: 'loop2',\n  //btnWidth: false,\n  btnReverse: true\n};\nthemes$4.scroller.windows = extend$1({}, themes$4.frame.windows, {\n  rows: 6,\n  // scroller\n  minWidth: 88,\n  height: 44,\n  btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down5',\n  btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up5',\n  checkIcon: 'material-check',\n  dateDisplay: 'MMdyy',\n  // date\n  showLabel: false,\n  showScrollArrows: true,\n  btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left5',\n  // calendar\n  btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right5',\n  // calendar\n  dayNamesShort: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  useShortLabels: true // timespan/timer\n\n});\nthemes$4.form.windows = {};\nmobiscroll.customTheme('windows-dark', 'windows');\nmobiscroll.customTheme('forms2', 'ios');\nmobiscroll.customTheme('navbarmenu', 'ios');\nmobiscroll.customTheme('newtheme', 'ios');\nvar themes$5 = mobiscroll.themes;\nvar theme = 'mobiscroll';\n\nif (os == 'android') {\n  theme = 'material';\n} else if (os == 'ios') {\n  theme = 'ios';\n} else if (os == 'wp') {\n  theme = 'windows';\n}\n\n$$1.each(themes$5.frame, function (key, settings) {\n  // Stop at the first custom theme with the OS base theme\n  if (theme && settings.baseTheme == theme && key != theme + '-dark') {\n    mobiscroll.autoTheme = key;\n    return false;\n  } else if (key == theme) {\n    mobiscroll.autoTheme = key;\n  }\n});\nexport { MbscAccordion, MbscAvatar, MbscBottomNav, MbscButton, MbscCalendar, MbscCalendarComponent, MbscCalendarModule, MbscCard, MbscCardComponent, MbscCardContent, MbscCardFooter, MbscCardHeader, MbscCardModule, MbscCardSubtitle, MbscCardTitle, MbscCheckbox, MbscColor, MbscColorComponent, MbscColorModule, MbscDate, MbscDateComponent, MbscDatetime, MbscDatetimeComponent, MbscDatetimeModule, MbscDistance, MbscDistanceComponent, MbscDropdown, MbscEventcalendar, MbscEventcalendarComponent, MbscEventcalendarModule, MbscForce, MbscForceComponent, MbscForm, MbscFormGroup, MbscFormGroupContent, MbscFormGroupTitle, MbscFormsModule, MbscHamburgerNav, MbscImage, MbscImageComponent, MbscImageItem, MbscImageModule, MbscInput, MbscInputModule, MbscListview, MbscListviewHeader, MbscListviewItem, MbscListviewModule, MbscListviewSublist, MbscMass, MbscMassComponent, MbscMeasurement, MbscMeasurementComponent, MbscMeasurementModule, MbscModule, MbscNav, MbscNavItem, MbscNavigationModule, MbscNote, MbscNumber, MbscNumberComponent, MbscNumberModule, MbscNumpad, MbscNumpadComponent, MbscNumpadDate, MbscNumpadDateComponent, MbscNumpadDecimal, MbscNumpadDecimalComponent, MbscNumpadModule, MbscNumpadTime, MbscNumpadTimeComponent, MbscNumpadTimespan, MbscNumpadTimespanComponent, MbscOptionItem, MbscOptionlist, MbscOptionlistModule, MbscPage, MbscPageModule, MbscPopup, MbscPopupModule, MbscProgress, MbscRadio, MbscRadioGroup, MbscRange, MbscRangeComponent, MbscRangeEndComponent, MbscRangeModule, MbscRangeStartComponent, MbscRating, MbscRouterToken, MbscScrollView, MbscScrollViewComponent, MbscScrollViewItem, MbscScrollViewItemComponent, MbscScrollViewModule, MbscScroller, MbscScrollerComponent, MbscScrollerModule, MbscSegmented, MbscSegmentedGroup, MbscSelect, MbscSelectComponent, MbscSelectModule, MbscSlider, MbscSpeed, MbscSpeedComponent, MbscStepper, MbscSwitch, MbscTabNav, MbscTemperature, MbscTemperatureComponent, MbscTextarea, MbscTime, MbscTimeComponent, MbscTimer, MbscTimerComponent, MbscTimerModule, MbscTimespan, MbscTimespanComponent, MbscTimespanModule, MbscTreelist, MbscTreelistComponent, MbscTreelistModule, MbscWidget, mobiscroll, MbscOptionsService as ɵa, MbscInputService as ɵb, MbscCalBaseModule as ɵba, MbscDatetimeBase as ɵbb, MbscDatetimeBaseModule as ɵbc, MbscNavItemBase as ɵbd, MbscNavigationBase as ɵbe, MbscNavigationBaseModule as ɵbf, MbscNotifyItemService as ɵbg, MbscScrollItemBase as ɵbh, MbscScrollViewBase as ɵbi, MbscScrollViewBaseModule as ɵbj, MbscListService as ɵc, MbscBase as ɵd, MbscValueBase as ɵe, MbscCloneBase as ɵf, MbscControlBase as ɵg, MbscFrameBase as ɵh, MbscScrollerBase as ɵi, MbscBaseModule as ɵj, MbscFrameBaseModule as ɵk, MbscScrollerBaseModule as ɵl, INPUT_TEMPLATE as ɵm, MbscDateBase as ɵn, MbscFormBase as ɵo, MbscFormValueBase as ɵp, MbscInputBase as ɵq, MbscRadioService as ɵr, MbscRadioGroupBase as ɵs, MbscListviewService as ɵt, MbscSublistService as ɵu, MbscListitemService as ɵv, MbscMeasurementBase as ɵw, MbscMeasurementChild as ɵx, MbscNumpadBase as ɵy, MbscCalBase as ɵz }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}