{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PlacesDBService = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst firestore_1 = require(\"@angular/fire/firestore\");\n\nconst database_1 = require(\"@angular/fire/database\");\n\nrequire(\"rxjs/add/operator/map\");\n\nconst cross_service_1 = require(\"./cross.service\");\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\nconst i1 = (0, tslib_1.__importStar)(require(\"@angular/fire/firestore\"));\nconst i2 = (0, tslib_1.__importStar)(require(\"@angular/fire/database\"));\nconst i3 = (0, tslib_1.__importStar)(require(\"./cross.service\"));\n\nclass PlacesDBService {\n  constructor(afs, db, crossService) {\n    this.afs = afs;\n    this.db = db;\n    this.crossService = crossService;\n  }\n\n  ngOnInit() {}\n\n  getPlacesFromDB() {\n    this.getCountriesFromDB(this.setCountries.bind(this));\n    this.getStatesFromDB(this.setStates.bind(this));\n    this.getCitiesFromDB(this.setCities.bind(this));\n    this.getTownsFromDB(this.setTowns.bind(this));\n  }\n\n  setCountries(countries) {\n    this.countries = countries;\n  }\n\n  setStates(states) {\n    this.states = states;\n  }\n\n  setCities(cities) {\n    this.cities = cities;\n  }\n\n  setTowns(towns) {\n    this.towns = towns;\n    this.crossService.loading = true;\n  }\n\n  getCountriesFromDB(callback) {\n    this.afs.collection('countries').snapshotChanges().map(actions => {\n      return actions.map(action => {\n        const data = action.payload.doc.data();\n        const id = action.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }).map(data => {\n      return data;\n    }).subscribe(countries => {\n      this.countries = countries;\n      callback(countries);\n    });\n  }\n\n  getStatesFromDB(callback, countrId) {\n    let statesCollection;\n\n    if (countrId) {\n      statesCollection = this.afs.collection('states', ref => ref.where('parent', '==', countrId));\n    } else {\n      statesCollection = this.afs.collection('states');\n    }\n\n    statesCollection.snapshotChanges().map(actions => {\n      return actions.map(action => {\n        const data = action.payload.doc.data();\n        const id = action.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }).map(data => {\n      return data;\n    }).subscribe(states => {\n      this.states = states;\n      callback(states);\n    });\n  }\n\n  getCitiesFromDB(callback, stateId) {\n    let citiesCollection;\n\n    if (stateId) {\n      citiesCollection = this.afs.collection('cities', ref => ref.where('parent', '==', stateId));\n    } else {\n      citiesCollection = this.afs.collection('cities');\n    }\n\n    citiesCollection.snapshotChanges().map(actions => {\n      return actions.map(action => {\n        const data = action.payload.doc.data();\n        const id = action.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }).map(data => {\n      return data;\n    }).subscribe(cities => {\n      this.cities = cities;\n      callback(cities);\n    });\n  }\n\n  getTownsFromDB(callback, cityId) {\n    let townsCollection;\n\n    if (cityId) {\n      townsCollection = this.afs.collection('towns', ref => ref.where('parent', '==', cityId));\n    } else {\n      townsCollection = this.afs.collection('towns');\n    }\n\n    townsCollection.snapshotChanges().map(actions => {\n      return actions.map(action => {\n        const data = action.payload.doc.data();\n        const id = action.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }).map(data => {\n      return data;\n    }).subscribe(towns => {\n      this.towns = towns;\n      callback(towns);\n    });\n  }\n\n  getCountries() {\n    if (this.countries) {\n      return this.countries.slice();\n    } else {\n      return null;\n    }\n  }\n\n  getStates(countryId) {\n    if (countryId) {\n      let states = this.states.filter((state, index) => {\n        return state.parent == countryId;\n      });\n      return states;\n    }\n\n    if (this.states) {\n      return this.states.slice();\n    }\n\n    return null;\n  }\n\n  getCities(stateId) {\n    if (stateId) {\n      let cities = this.cities.filter((city, index) => {\n        return city.parent == stateId;\n      });\n      return cities;\n    }\n\n    if (this.cities) {\n      return this.cities.slice();\n    }\n\n    return null;\n  }\n\n  getTowns(cityId) {\n    if (cityId) {\n      let towns = this.towns.filter((town, index) => {\n        return town.parent == cityId;\n      });\n      return towns;\n    }\n\n    if (this.towns) {\n      return this.towns.slice();\n    }\n\n    return null;\n  }\n\n  getCountry(id) {\n    let country = this.countries.find(item => {\n      return item.id === id;\n    });\n    return Object.assign({}, country);\n  }\n\n  getState(id) {\n    let state = this.states.find(item => {\n      return item.id === id;\n    });\n    return Object.assign({}, state);\n  }\n\n  getCity(id) {\n    let city = this.cities.find(item => {\n      return item.id === id;\n    });\n    return Object.assign({}, city);\n  }\n\n  getTown(id) {\n    let town = this.towns.find(item => {\n      return item.id === id;\n    });\n    return Object.assign({}, town);\n  }\n\n  saveCountry(id, country) {\n    let countryNew = {};\n    countryNew.name = country.name;\n    countryNew.arabicName = country.arabicName;\n    countryNew.code = country.code;\n    countryNew.currency = country.currency;\n    countryNew.exRate = country.exRate;\n    this.afs.collection('countries').doc(id).update(countryNew);\n  }\n\n  saveState(id, state) {\n    let stateNew = {};\n    stateNew.name = state.name;\n    stateNew.arabicName = state.arabicName;\n    stateNew.parent = state.parent;\n    this.afs.collection('states').doc(id).update(stateNew);\n  }\n\n  saveCity(id, city) {\n    let cityNew = {};\n    cityNew.name = city.name;\n    cityNew.arabicName = city.arabicName;\n    cityNew.parent = city.parent;\n    this.afs.collection('cities').doc(id).update(cityNew);\n  }\n\n  saveTown(id, town) {\n    let townNew = {};\n    townNew.name = town.name;\n    townNew.arabicName = town.arabicName;\n    townNew.parent = town.parent;\n    this.afs.collection('towns').doc(id).update(townNew);\n  }\n\n  deleteCountry(id) {\n    this.afs.collection('countries').doc(id).delete();\n  }\n\n  deleteState(id) {\n    this.afs.collection('states').doc(id).delete();\n  }\n\n  deleteCity(id) {\n    this.afs.collection('cities').doc(id).delete();\n  }\n\n  deleteTown(id) {\n    this.afs.collection('towns').doc(id).delete();\n  }\n\n  createCountry(country) {\n    this.afs.collection('countries').add(country);\n  }\n\n  createState(state) {\n    this.afs.collection('states').add(state);\n  }\n\n  createCity(city) {\n    this.afs.collection('cities').add(city);\n  }\n\n  createTown(town) {\n    this.afs.collection('towns').add(town);\n  }\n\n  canDeleteCountry(id) {\n    return this.afs.collection('states', ref => ref.where('parent', '==', id)).valueChanges().map(data => {\n      return data;\n    });\n  }\n\n  canDeleteState(id) {\n    return this.afs.collection('cities', ref => ref.where('parent', '==', id)).valueChanges().map(data => {\n      return data;\n    });\n  }\n\n  canDeleteCity(id) {\n    return this.afs.collection('towns', ref => ref.where('parent', '==', id)).valueChanges().map(data => {\n      return data;\n    });\n  }\n\n  canDeleteTown(id) {\n    return true;\n  }\n\n  setSelectedCountry(id) {\n    if (!id) {\n      this.selectedCountry = null;\n      return;\n    }\n\n    this.selectedCountry = this.countries.find(item => {\n      return item.id === id;\n    });\n  }\n\n  setSelectedState(id) {\n    if (!id) {\n      this.selectedState = null;\n      return;\n    }\n\n    this.selectedState = this.states.find(item => {\n      return item.id === id;\n    });\n  }\n\n  setSelectedCity(id) {\n    if (!id) {\n      this.selectedCity = null;\n      return;\n    }\n\n    this.selectedCity = this.cities.find(item => {\n      return item.id === id;\n    });\n  }\n\n  setSelectedTown(id) {\n    if (!id) {\n      this.selectedTown = null;\n      return;\n    }\n\n    this.selectedTown = this.towns.find(item => {\n      return item.id === id;\n    });\n  }\n\n  getSelectedCountry() {\n    return this.selectedCountry;\n  }\n\n  getSelectedState() {\n    return this.selectedState;\n  }\n\n  getSelectedCity() {\n    return this.selectedCity;\n  }\n\n  getSelectedTown() {\n    return this.selectedTown;\n  }\n\n}\n\nexports.PlacesDBService = PlacesDBService;\n\nPlacesDBService.ɵfac = function PlacesDBService_Factory(t) {\n  return new (t || PlacesDBService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireDatabase), i0.ɵɵinject(i3.CrossService));\n};\n\nPlacesDBService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlacesDBService,\n  factory: PlacesDBService.ɵfac\n});","map":null,"metadata":{},"sourceType":"script"}