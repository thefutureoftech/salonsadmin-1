{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranslateService = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst core_1 = require(\"@angular/core\");\n\nconst translation_1 = require(\"./translation\"); // import our opaque token\n\n\nconst i0 = (0, tslib_1.__importStar)(require(\"@angular/core\"));\n\nclass TranslateService {\n  // inject our translations\n  constructor(_translations) {\n    this._translations = _translations;\n    this.onLangChanged = new core_1.EventEmitter();\n    this.PLACEHOLDER = '%'; // our placeholder\n  }\n\n  get currentLang() {\n    return this._currentLang;\n  }\n\n  use(lang) {\n    // set current language\n    this._currentLang = lang;\n    this.onLangChanged.emit(lang); // publish changes\n  }\n\n  translate(key) {\n    // private perform translation\n    let translation = key;\n\n    if (this._translations[this.currentLang] && this._translations[this.currentLang][key]) {\n      return this._translations[this.currentLang][key];\n    }\n\n    return translation;\n  }\n\n  instant(key, words) {\n    const translation = this.translate(key);\n    if (!words) return translation;\n    return this.replace(translation, words); // call replace function\n  }\n\n  replace(word = '', words = '') {\n    let translation = word;\n    const values = [].concat(words);\n    values.forEach((e, i) => {\n      translation = translation.replace(this.PLACEHOLDER.concat(i), e);\n    });\n    return translation;\n  }\n\n}\n\nexports.TranslateService = TranslateService;\n\nTranslateService.ɵfac = function TranslateService_Factory(t) {\n  return new (t || TranslateService)(i0.ɵɵinject(translation_1.TRANSLATIONS));\n};\n\nTranslateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TranslateService,\n  factory: TranslateService.ɵfac\n});","map":null,"metadata":{},"sourceType":"script"}